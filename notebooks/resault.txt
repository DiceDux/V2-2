Microsoft Windows [Version 10.0.20348.2322]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Administrator>cd C:\

C:\>findstr /s /i "PCA" *.py
$Recycle.Bin\S-1-5-21-3916683422-3405376795-491586591-500\$RTGA3GL.venv\Lib\site-packages\adodbapi\test\adodbapitest.py:            upcaseConverter = lambda aStringField: aStringField.upper()
$Recycle.Bin\S-1-5-21-3916683422-3405376795-491586591-500\$RTGA3GL.venv\Lib\site-packages\adodbapi\test\adodbapitest.py:            assert upcaseConverter("upThis") == "UPTHIS"
$Recycle.Bin\S-1-5-21-3916683422-3405376795-491586591-500\$RTGA3GL.venv\Lib\site-packages\adodbapi\test\adodbapitest.py:            rows.converters[1] = upcaseConverter  # convert second column
$Recycle.Bin\S-1-5-21-3916683422-3405376795-491586591-500\$RV1TSPX.py:    """╪»╪▒█î╪º┘ü╪¬ ╪º┘à╪¿╪»█î┘å┌»ΓÇî┘ç╪º█î ╪«╪¿╪▒█î ╪¿╪»┘ê┘å PCA"""
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:_O1TcsDloJ`T4?A;I!1BYXLlQFA&E@5b)8L?*Kp-v<%J<##=B_wik`y5EWtPcaU^ZJaqgvVv=|nXU%y
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:gRFQCB$r?tg}<7tfhLLEvOpW;VcH0Q@y!muQeHYXZehP9NkpCa|e97K=sdbC?&KhLuXJ;w>NRx49mcK
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:g&DvrUemy&@iQHo0NIzYYkytKgXJ=;{xfM%PCmmbeO`uMu`pCatW;l-V5peZoz|TB@mEUEk_WZe(YFR
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:%`uhdL9qqdW6|ds{;x5S7T+N!aG76W@c&{ZN)tqFsPx>$WnpcaX!nM7E}`V}m3V2KB#f)>pO|=tZM7a
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:lrZ%yIg_9ePJ74{}RZ1-Q+4NMFMViSO6PcAd5HX+0g7Q&@&qjt?)#PV)&0D(P)Gxn*#SxYjDvp1Sv*6
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:8TocXqAGvkpeMM7G@;4P3XzF+%EnLL(dL{6V=_RGS|Pca^i4;W_hFY<I6<9^ez4uF$tyD*DZYUeodrq
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:R>lu_N4ma0RLR0-Cy$<-{Q1=5|-JTwYrgr+wB&bo~+G<PcaD4C+UgvUO0*>Y~k0+OyC@h`s5z8IXYjG
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:XE$5ecP#dA}*rQR(bPoLvWgVj0U^6!bEmO5?PM_DYflDs?Rrg9p*PCatjJ?&<X_WVg^Ip1wM6IC8>P;
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:K&dpCAos=&rJi48tpD&<S1R6-hH5+SkD5W@cYdwL{5NCLy9vg@l_S1QIcJx|YcKm9Vp^XJ(=RBv22TX
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:_ZOc^ou>AKrh*!(0<s<PCay9Bz`6Ynar9@r*KuYMZv^+NzBk<Lj<d+Vql8phtFJ(VCnOe5itF*+BLaC
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:03^4pfqg9+eJ$&Pca3>mv8*#$nztCIfv2K;fcT)2i86P}p@XU^$6QtUNWRCsbnhm5r#m{Qx<*@M_!<(
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:)O`gZ~9dw#3t$EHC0LH7d+?Q0PcaH%wrca*%6KTWvsjQK-&&SDhXozXplc<pVWL5_L;!jk?uF=g&G4#
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:#rOr{0s~FIQ(pdD7yBI-P$ZOJ#5gI0i@#nC7)X*j|pCAneAz}SXNHxq?(tKG^B=gJsVqeFAsv!->4kH
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:3vl+J^<8~OgU&ieyPCATR6(_aFcS@)P^2{1{kc``5+>pmIZoiB>8uuhWq%bSSjoWgn#_d2QaJt1dZbx
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:g2%Ch-`xUS!>Zho;+{Zk>>vPPCa@4FNX=|x^qk{QFE*$zU>O^3n}L|miuAcfrMuSdPoWjfzyU1%8Lj?
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:Z^>+0ZTTe4D^1aQd_lOpCaXuA{rCLQq3But@+|%f`xcjToZUf1E6eah{Q6!GtJcwfwGNx36nePI1Onf
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:wLDju%mZ@OC8o<8Am?~=6=5c7)PCALb2dw9a*kFN)zVXYSsSdEoXv*<9moA@J+4uN!_W88iF3Rj=)~*
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:oa-xHvKAG^X>5$k;f`v}gpm@ncTUsPJI2e$PfuV5PchEt!PV6j-H(0D(VWIncGW7`?V+})TLpCauq8a
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:t<&)pXkB^V9F)_)WTJYzp{8$|EpCaBo5<kX!_F}Y~=ALw2j26;do-W8lnjzm==<)95ERc-)J&t_aXbu
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:>G9i-n5<IQy%eoUqxk8PsvF9*zD0RA;D5<&7LlRl>Z=y|<$cEpcANIg)V#uyNK@Fzw*gZNL`-r=)hI8
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:p_Ag>)9tTM)|`J_e*PceiOv|4bpCawBr?eMw+zgx8vzoUTYYHXCrZ$d7Kb_Ch7I^itsfM9@Fvh2;6&q
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:!aNDmt_5L4QHa#bO0k>_|!Pca}$nIDFXXoBJkNhKE8XOtJOC#^3FsF6?Ltd)yO!88GIK@j~h&uT+aU0
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:#iPm;;AxcK8Ow6_5*_(n3i5!zQ69%_^Y-}J6f1PCA<B2-t#|Diq~~*Q{nnn3Vpx*KVr$)Nf4R+Ed_}Y
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:4b0^YOQ#}PKp0;1H{?`MT~)~)w$Zwz<qEr6pca@2Rn>L$oQLZkw07(R#h8_{_U9{7iqmy3I@8?8zDTe
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:|c*3PiGHsk?afFf%aZt}i06gCecaMUR@v5X2~%nSyJ~5Y0&hpcAdL6){;MBB1u?ww<NL5u4=*_~xQa9
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:{KT7j<!IQ^*jyJXT%Am6<X=BY<HD>Aen{{Myw8e|36V%t!k}c4S>!R8;%k6<2rA3T_ipcARYo+nKkP_
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:ulyVunVX{U2i9FP2;C8tGk`6G8Po57g4S}jbcc>>fALnt&5t~Hn3$)Ymj_#YBSWWzl`Q}MYq}pca5&K
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:j^loB~_%-__E(V`ZMt=1PCAb_{0w-i^W1kd`U=5S?TMbS^b?KrGD-WLG7z#5kkbH@ri5$d+jQV6_`5s
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:2Ioz0;2ZtWUDwXkH5ECHAMPcAIleUI4z4qUhw32xmxH?sk)k9FpijrRgmRO;PgFNuB@z)Oe>9>ixkIv
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:iHm}Mh)?P)4xiu1r2%I&Cm_V!B_CYEz*g>IFz`!6N@C3RpCAi6=DW;BL@?%}w&6SNrFL3hIfe8#M={d
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:cxBL;kd31P}w)9^q-j0MyyoyW^67jStDeCH}HVhm51#XhftVR5u#LE@|ly(2WL>OJY|<>PCaOO&0cUx
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:k!+pzPbiONRC>tEPJw?q-vy=NIs-4szn=^4}OLLjGDXqGoYET!PD)_xBx9V<{THOmpcA1{LoANH{Z@P
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:q!ZmWr64}qRSyj#B4oChz-X=ZALowNT|LlgxMfJ1}AJt|hKKOgeHYQe9PpIpuN={DCPcAPPS7%Si$$*
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\get-pip.py:~=+IK)jR5?vP_tInrtWz&Z9ooPCak?`E40&kE_%fu~ElRgh3JYuL!SF=Z_3fURi)EtRi@y#UK0Z*7g!
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\lib\jedilsp\typeguard\_checkers.py:TypeCheckLookupCallback: TypeAlias = Callable[
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\lib\jedilsp\typeguard\_checkers.py:checker_lookup_functions: list[TypeCheckLookupCallback] = []
Users\Administrator\.vscode\extensions\ms-python.python-2024.4.1\python_files\lib\jedilsp\typeguard\__init__.py:from ._checkers import TypeCheckLookupCallback as TypeCheckLookupCallback
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\collections\__init__.py:    def swapcase(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\collections\__init__.py:        return self.__class__(self.data.swapcase())
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\html\entities.py:    'capcap;': '\u2a4b',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\html\entities.py:    'CupCap;': '\u224d',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\html\entities.py:    'cupcap;': '\u2a46',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\html\entities.py:    'NotCupCap;': '\u226d',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:FileSFPCatalog = Table('FileSFPCatalog')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:FileSFPCatalog.add_field(1,'File_',11592)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:FileSFPCatalog.add_field(2,'SFPCatalog_',11775)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:SFPCatalog = Table('SFPCatalog')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:SFPCatalog.add_field(1,'SFPCatalog',11775)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:SFPCatalog.add_field(2,'Catalog',2304)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:SFPCatalog.add_field(3,'Dependency',7424)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:tables=[_Validation, ActionText, AdminExecuteSequence, Condition, AdminUISequence, AdvtExecuteSequence, AdvtUISequence, AppId, AppSearch, Property, BBControl, Billboard, Feature, Binary, BindImage, File, CCPSearch, CheckBox, Class, Component, Icon, ProgId, ComboBox, CompLocator, Complus, Directory, Control, Dialog, ControlCondition, ControlEvent, CreateFolder, CustomAction, DrLocator, DuplicateFile, Environment, Error, EventMapping, Extension, MIME, FeatureComponents, FileSFPCatalog, SFPCatalog, Font, IniFile, IniLocator, InstallExecuteSequence, InstallUISequence, IsolatedComponent, LaunchCondition, ListBox, ListView, LockPermissions, Media, MoveFile, MsiAssembly, MsiAssemblyName, MsiDigitalCertificate, MsiDigitalSignature, MsiFileHash, MsiPatchHeaders, ODBCAttribute, ODBCDriver, ODBCDataSource, ODBCSourceAttribute, ODBCTranslator, Patch, PatchPackage, PublishComponent, RadioButton, Registry, RegLocator, RemoveFile, RemoveIniFile, RemoveRegistry, ReserveCost, SelfReg, ServiceControl, ServiceInstall, Shortcut, Signature, TextStyle, TypeLib, UIText, Upgrade, Verb]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:('FileSFPCatalog','File_','N',None, None, 'File',1,'Identifier',None, 'File associated with the catalog',),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:('FileSFPCatalog','SFPCatalog_','N',None, None, 'SFPCatalog',1,'Filename',None, 'Catalog associated with the file',),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:('SFPCatalog','SFPCatalog','N',None, None, None, None, 'Filename',None, 'File name for the catalog.',),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:('SFPCatalog','Catalog','N',None, None, None, None, 'Binary',None, 'SFP Catalog',),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\schema.py:('SFPCatalog','Dependency','Y',None, None, None, None, 'Formatted',None, 'Parent catalog - only used by SFP',),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\msilib\text.py:('InstallSFPCatalogFile', 'Installing system catalog', 'File: [1],  Dependencies: [2]'),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\pstats.py:    PCALLS = 'pcalls'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\pstats.py:              "pcalls"    : (((0,-1),              ), "primitive call count"),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\pydoc_data\topics.py:                   'str.swapcase()\n'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\pydoc_data\topics.py:                   '   "s.swapcase().swapcase() == s".\n'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\adodbapi\test\adodbapitest.py:            upcaseConverter = lambda aStringField: aStringField.upper()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\adodbapi\test\adodbapitest.py:            assert upcaseConverter("upThis") == "UPTHIS"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\adodbapi\test\adodbapitest.py:            rows.converters[1] = upcaseConverter  # convert second column
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\bleach\_vendor\html5lib\constants.py:    "CupCap;": "\u224d",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\bleach\_vendor\html5lib\constants.py:    "NotCupCap;": "\u226d",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\bleach\_vendor\html5lib\constants.py:    "capcap;": "\u2a4b",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\bleach\_vendor\html5lib\constants.py:    "cupcap;": "\u2a46",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\catboost\core.py:class EShapCalcType(Enum):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\catboost\core.py:        shap_calc_type : EShapCalcType or string, optional (default="Regular")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\catboost\core.py:            shap_calc_type = enum_from_enum_or_str(EShapCalcType, shap_calc_type).value
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\catboost\core.py:        shap_calc_type : EShapCalcType or string, optional (default=Regular)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\catboost\core.py:                params["shap_calc_type"] = enum_from_enum_or_str(EShapCalcType, shap_calc_type).value
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\catboost\__init__.py:    FeaturesData, EFstrType, EShapCalcType, EFeaturesSelectionAlgorithm, EFeaturesSelectionGrouping,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\catboost\__init__.py:    'FeaturesData', 'EFstrType', 'EShapCalcType', 'EFeaturesSelectionAlgorithm', 'EFeaturesSelectionGrouping',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\bingx.py:    swap_v1_private_post_twap_cancelorder = swapV1PrivatePostTwapCancelOrder = Entry('twap/cancelOrder', ['swap', 'v1', 'private'], 'POST', {'cost': 5})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\htx.py:    contract_private_post_swap_api_v1_swap_cancel_after = contractPrivatePostSwapApiV1SwapCancelAfter = Entry('swap-api/v1/swap-cancel-after', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\htx.py:    contract_private_post_swap_api_v1_swap_cancel = contractPrivatePostSwapApiV1SwapCancel = Entry('swap-api/v1/swap_cancel', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\htx.py:    contract_private_post_swap_api_v1_swap_cancelall = contractPrivatePostSwapApiV1SwapCancelall = Entry('swap-api/v1/swap_cancelall', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\htx.py:    contract_private_post_linear_swap_api_v1_swap_cancel = contractPrivatePostLinearSwapApiV1SwapCancel = Entry('linear-swap-api/v1/swap_cancel', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\htx.py:    contract_private_post_linear_swap_api_v1_swap_cancelall = contractPrivatePostLinearSwapApiV1SwapCancelall = Entry('linear-swap-api/v1/swap_cancelall', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\huobi.py:    contract_private_post_swap_api_v1_swap_cancel_after = contractPrivatePostSwapApiV1SwapCancelAfter = Entry('swap-api/v1/swap-cancel-after', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\huobi.py:    contract_private_post_swap_api_v1_swap_cancel = contractPrivatePostSwapApiV1SwapCancel = Entry('swap-api/v1/swap_cancel', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\huobi.py:    contract_private_post_swap_api_v1_swap_cancelall = contractPrivatePostSwapApiV1SwapCancelall = Entry('swap-api/v1/swap_cancelall', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\huobi.py:    contract_private_post_linear_swap_api_v1_swap_cancel = contractPrivatePostLinearSwapApiV1SwapCancel = Entry('linear-swap-api/v1/swap_cancel', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\abstract\huobi.py:    contract_private_post_linear_swap_api_v1_swap_cancelall = contractPrivatePostLinearSwapApiV1SwapCancelall = Entry('linear-swap-api/v1/swap_cancelall', ['contract', 'private'], 'POST', {'cost': 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\alpaca.py:                'APCA-PARTNER-ID': 'ccxt',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\alpaca.py:            headers['APCA-API-KEY-ID'] = self.apiKey
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\alpaca.py:            headers['APCA-API-SECRET-KEY'] = self.secret
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\alpaca.py:                'APCA-PARTNER-ID': 'ccxt',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\alpaca.py:            headers['APCA-API-KEY-ID'] = self.apiKey
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\alpaca.py:            headers['APCA-API-SECRET-KEY'] = self.secret
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\bingx.py:            response = await self.swapV1PrivatePostTwapCancelOrder(self.extend(twapRequest, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\defx.py:                    'Bad Request': BadRequest,  # {"errorMessage":"Bad Request","data":[{"param":"symbol","message":"\"symbol\" must be one of [ETH_USDC, BTC_USDC, BNB_USDC, SOL_USDC, DOGE_USDC, TON_USDC, AVAX_USDC, WIF_USDC, KPEPE_USDC, KSHIB_USDC, KBONK_USDC, MOODENG_USDC, POPCAT_USDC, MOTHER_USDC]"}]}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\htx.py:                        response = await self.contractPrivatePostLinearSwapApiV1SwapCancel(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\htx.py:                        response = await self.contractPrivatePostSwapApiV1SwapCancel(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\htx.py:                        response = await self.contractPrivatePostLinearSwapApiV1SwapCancel(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\htx.py:                        response = await self.contractPrivatePostSwapApiV1SwapCancel(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\htx.py:                        response = await self.contractPrivatePostLinearSwapApiV1SwapCancelall(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\async_support\htx.py:                        response = await self.contractPrivatePostSwapApiV1SwapCancelall(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\bingx.py:            response = self.swapV1PrivatePostTwapCancelOrder(self.extend(twapRequest, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\defx.py:                    'Bad Request': BadRequest,  # {"errorMessage":"Bad Request","data":[{"param":"symbol","message":"\"symbol\" must be one of [ETH_USDC, BTC_USDC, BNB_USDC, SOL_USDC, DOGE_USDC, TON_USDC, AVAX_USDC, WIF_USDC, KPEPE_USDC, KSHIB_USDC, KBONK_USDC, MOODENG_USDC, POPCAT_USDC, MOTHER_USDC]"}]}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\htx.py:                        response = self.contractPrivatePostLinearSwapApiV1SwapCancel(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\htx.py:                        response = self.contractPrivatePostSwapApiV1SwapCancel(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\htx.py:                        response = self.contractPrivatePostLinearSwapApiV1SwapCancel(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\htx.py:                        response = self.contractPrivatePostSwapApiV1SwapCancel(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\htx.py:                        response = self.contractPrivatePostLinearSwapApiV1SwapCancelall(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\htx.py:                        response = self.contractPrivatePostSwapApiV1SwapCancelall(self.extend(request, params))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\static_dependencies\ethereum\typing\networks.py:    POPCAT = 1213
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\static_dependencies\ethereum\utils\toolz.py:    mapcat,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\static_dependencies\toolz\curried\__init__.py:# mapcat = curry(mapcat)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\static_dependencies\toolz\itertoolz.py:           'mapcat', 'cons', 'interpose', 'frequencies', 'reduceby', 'iterate',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\static_dependencies\toolz\itertoolz.py:def mapcat(func, seqs):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\ccxt\static_dependencies\toolz\itertoolz.py:    >>> list(mapcat(lambda s: [c.upper() for c in s],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fontTools\ttLib\tables\ttProgram.py:    (0x2a,  'LOOPCALL',      0,    'LoopAndCallFunction',    2,  0),    #                             f, count               -
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fontTools\varLib\interpolatable.py:                    doc.draw_cupcake()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fontTools\varLib\interpolatable.py:                    svg.draw_cupcake()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fontTools\varLib\interpolatablePlot.py:    no_issues_label = "Your font's good! Have a cupcake..."
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fontTools\varLib\interpolatablePlot.py:    cupcake_color = (0.3, 0, 0.3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fontTools\varLib\interpolatablePlot.py:    cupcake = r"""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fontTools\varLib\interpolatablePlot.py:    def draw_cupcake(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fontTools\varLib\interpolatablePlot.py:            self.cupcake,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fontTools\varLib\interpolatablePlot.py:            color=self.cupcake_color,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\caching.py:class MMapCache(BaseCache):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\caching.py:    MMapCache,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\callbacks.py:        ``NoOpCallback``. This is an alternative to including
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\callbacks.py:class NoOpCallback(Callback):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\callbacks.py:DEFAULT_CALLBACK = _DEFAULT_CALLBACK = NoOpCallback()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\core.py:    MMapCache,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\implementations\cached.py:from fsspec.core import BaseCache, MMapCache
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\implementations\cached.py:    :class:`~fsspec.caching.MMapCache`), so only the data which is accessed
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\implementations\cached.py:        f.cache = MMapCache(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\fsspec\implementations\cache_metadata.py:                            # performed by MMapCache are propagated back to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\huggingface_hub\hf_file_system.py:from fsspec.callbacks import _DEFAULT_CALLBACK, NoOpCallback, TqdmCallback
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\huggingface_hub\hf_file_system.py:        if not isinstance(callback, (NoOpCallback, TqdmCallback)) or len(unhandled_kwargs) > 0:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\pipeline.py:    >>> from sklearn.decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\pipeline.py:    >>> pca = PCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\pipeline.py:    >>> pipeline = Pipeline([('smt', smt), ('pca', pca), ('knn', knn)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:from sklearn.decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:def test_pipeline_methods_pca_svm():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    # Test the various methods of the pipeline (pca + svm).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    # Test with PCA + SVC
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA(svd_solver="full", n_components="mle", whiten=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipe = Pipeline([("pca", pca), ("svc", clf)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA(n_components=2, svd_solver="randomized", whiten=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    for preprocessing in [scaler, pca]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA(svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipe = Pipeline([("scaler", scaler), ("pca", pca)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA(n_components=2, svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipeline = Pipeline([("pca", pca)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    X_trans3 = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    X_back2 = pca.inverse_transform(X_trans)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:def test_pipeline_methods_pca_rus_svm():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    # Test the various methods of the pipeline (pca + svm).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    # Test with PCA + SVC
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipe = Pipeline([("pca", pca), ("rus", rus), ("svc", clf)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:def test_pipeline_methods_rus_pca_svm():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    # Test the various methods of the pipeline (pca + svm).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    # Test with PCA + SVC
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipe = Pipeline([("rus", rus), ("pca", pca), ("svc", clf)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipeline = Pipeline([("pca", PCA()), ("rus", rus)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    X_pca = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    X_trans2, y_trans2 = rus.fit_resample(X_pca, y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    # We round the value near to zero. It seems that PCA has some issue
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca2 = PCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipeline = Pipeline([("pca", pca), ("rus", rus), ("pca2", pca2)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA(whiten=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipe = make_pipeline(None, pca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:def test_pipeline_score_samples_pca_lof_binary():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA(svd_solver="full", n_components="mle", whiten=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipe = Pipeline([("rus", rus), ("pca", pca), ("lof", lof)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    lof.fit(pca.fit_transform(X_res))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    assert_allclose(pipe.score_samples(X), lof.score_samples(pca.transform(X)))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:def test_pipeline_score_samples_pca_lof_multiclass():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pca = PCA(svd_solver="full", n_components="mle", whiten=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    pipe = Pipeline([("rus", rus), ("pca", pca), ("lof", lof)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    lof.fit(pca.fit_transform(X))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\imblearn\tests\test_pipeline.py:    assert_allclose(pipe.score_samples(X), lof.score_samples(pca.transform(X)))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\IPython\core\magics\execution.py:          "pcalls"      primitive call count
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_client\ioloop\restarter.py:    _pcallback = None
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_client\ioloop\restarter.py:        if self._pcallback is None:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_client\ioloop\restarter.py:            self._pcallback = PeriodicCallback(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_client\ioloop\restarter.py:            self._pcallback.start()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_client\ioloop\restarter.py:        if self._pcallback is not None:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_client\ioloop\restarter.py:            self._pcallback.stop()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_client\ioloop\restarter.py:            self._pcallback = None
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\llvmlite\ir\builder.py:        Zero-extending integer upcast to a larger type:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\llvmlite\ir\builder.py:        Sign-extending integer upcast to a larger type:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\llvmlite\ir\builder.py:        Floating-point upcast to a more precise type:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\llvmlite\ir\values.py:        Zero-extending integer upcast to a larger type
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\llvmlite\ir\values.py:        Sign-extending integer upcast to a larger type.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\llvmlite\ir\values.py:        Floating-point upcast to a more precise type.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\markupsafe\__init__.py:    def swapcase(self, /) -> te.Self:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\markupsafe\__init__.py:        return self.__class__(super().swapcase())
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\matplotlib\axes\_axes.py:        def _upcast_err(err):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\matplotlib\axes\_axes.py:            xerr = _upcast_err(xerr)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\matplotlib\axes\_axes.py:            yerr = _upcast_err(yerr)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\narwhals\_arrow\dataframe.py:        # upcast numeric to non-numeric (e.g. string) datatypes
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\nltk\app\nemo_app.py:    "FIND": "R0lGODlhMAAiAPcAMf/////37//35//n1v97Off///f/9/f37/fexvfOvfeEQvd7QvdrQvdrKfdaKfdSMfdSIe/v9+/v7+/v5+/n3u/e1u/Wxu/Gre+1lO+tnO+thO+Ua+97Y+97Oe97Me9rOe9rMe9jOe9jMe9jIe9aMefe5+fe3ufezuece+eEWudzQudaIedSIedKMedKIedCKedCId7e1t7Wzt7Oxt7Gvd69vd69rd61pd6ljN6UjN6Ue96EY95zY95rUt5rQt5jMd5SId5KIdbn59be3tbGztbGvda1rdaEa9Z7a9Z7WtZzQtZzOdZzMdZjMdZaQtZSOdZSMdZKMdZCKdZCGNY5Ic7W1s7Oxs7Gtc69xs69tc69rc6tpc6llM6clM6cjM6Ue86EY85zWs5rSs5SKc5KKc5KGMa1tcatrcalvcalnMaUpcZ7c8ZzMcZrUsZrOcZrMcZaQsZSOcZSMcZKMcZCKcZCGMYxIcYxGL3Gxr21tb21rb2lpb2crb2cjL2UnL2UlL2UhL2Ec717Wr17Ur1zWr1rMb1jUr1KMb1KIb1CIb0xGLWlrbWlpbWcnLWEe7V7c7VzY7VzUrVSKbVKMbVCMbVCIbU5KbUxIbUxEK2lta2lpa2clK2UjK2MnK2MlK2Ea617e61za61rY61rMa1jSq1aUq1aSq1SQq1KKa0xEKWlnKWcnKWUnKWUhKWMjKWEa6Vza6VrWqVjMaVaUqVaKaVSMaVCMaU5KaUxIaUxGJyclJyMe5yElJyEhJx7e5x7c5xrOZxaQpxSOZxKQpw5IZSMhJSEjJR7c5Rre5RrY5RrUpRSQpRSKZRCOZRCKZQxKZQxIYyEhIx7hIxza4xzY4xrc4xjUoxaa4xaUoxSSoxKQoxCMYw5GIR7c4Rzc4Rre4RjY4RjWoRaa4RSWoRSUoRSMYRKQoRCOYQ5KYQxIXtra3taY3taSntKOXtCMXtCKXNCMXM5MXMxIWtSUmtKSmtKQmtCOWs5MWs5KWs5IWNCKWMxIVIxKUIQCDkhGAAAACH+AS4ALAAAAAAwACIAAAj/AAEIHEiwoMGDCBMqXMiwoUOHMqxIeEiRoZVp7cpZ29WrF4WKIAd208dGAQEVbiTVChUjZMU9+pYQmPmBZpxgvVw+nDdKwQICNVcIXQEkTgKdDdUJ+/nggVAXK1xI3TEA6UIr2uJ8iBqka1cXXTlkqGoVYRZ7iLyqBSs0iiEtZQVKiDGxBI1u3NR6lUpGDKg8MSgEQCphU7Z22vhg0dILXRCpYLuSCcYJT4wqXASBQaBzU7klHxC127OHD7ZDJFpERqRt0x5OnwQpmZmCLEhrbgg4WIHO1RY+nbQ9WRGEDJlmnXwJ+9FBgXMCIzYMVijBBgYMFxIMqJBMSc0Ht7qh/+Gjpte2rnYsYeNlasWIBgQ6yCewIoPCCp/cyP/wgUGbXVu0QcADZNBDnh98gHMLGXYQUw02w61QU3wdbNWDbQVVIIhMMwFF1DaZiPLBAy7E04kafrjSizaK3LFNNc0AAYRQDsAHHQlJ2IDQJ2zE1+EKDjiAijShkECCC8Qgw4cr7ZgyzC2WaHPNLWWoNeNWPiRAw0QFWQFMhz8C+QQ20yAiVSrY+MGOJCsccsst2GCzoHFxxEGGC+8hgs0MB2kyCpgzrUDCbs1Es41UdtATHFFkWELMOtsoQsYcgvRRQw5RSDgGOjZMR1AvPQIq6KCo9AKOJWDd48owQlHR4DXEKP9iyRrK+DNNBTu4RwIPFeTAGUG7hAomkA84gEg1m6ADljy9PBKGGJY4ig0xlsTBRSn98FOFDUC8pwQOPkgHbCGAzhTkA850s0c7j6Hjix9+gBIrMXLeAccWXUCyiRBcBEECdEJ98KtAqtBCYQc/OvDENnl4gYpUxISCIjjzylkGGV9okYUVNogRhAOBuuAEhjG08wOgDYzAgA5bCjIoCe5uwUk80RKTTSppPREGGGCIISOQ9AXBg6cC6WIywvCpoMHAocRBwhP4bHLFLujYkV42xNxBRhAyGrc113EgYtRBerDDDHMoDCyQEL5sE083EkgwQyBhxGFHMM206DUixGxmE0wssbQjCQ4JCaFKFwgQTVAVVhQUwAVPIFJKrHfYYRwi6OCDzzuIJIFhXAD0EccPsYRiSyqKSDpFcWSMIcZRoBMkQyA2BGZDIKSYcggih8TRRg4VxM5QABVYYLxgwiev/PLMCxQQADs=",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\nltk\app\nemo_app.py:    "REPL": "R0lGODlhMAAjAPcAMf/////3//+lOf+UKf+MEPf///f39/f35/fv7/ecQvecOfecKfeUIfeUGPeUEPeUCPeMAO/37+/v9+/v3u/n3u/n1u+9jO+9c++1hO+ta++tY++tWu+tUu+tSu+lUu+lQu+lMe+UMe+UKe+UGO+UEO+UAO+MCOfv5+fvxufn7+fn5+fnzue9lOe9c+e1jOe1e+e1c+e1a+etWuetUuelQuecOeeUUueUCN7e597e3t7e1t7ezt7evd7Wzt7Oxt7Ovd7Otd7Opd7OnN7Gtd7Gpd69lN61hN6ta96lStbextberdbW3tbWztbWxtbOvdbOrda1hNalUtaECM7W1s7Ozs7Oxs7Otc7Gxs7Gvc69tc69rc69pc61jM6lc8bWlMbOvcbGxsbGpca9tca9pca1nMaMAL3OhL3Gtb21vb21tb2tpb2tnL2tlLW9tbW9pbW9e7W1pbWtjLWcKa21nK2tra2tnK2tlK2lpa2llK2ljK2le6WlnKWljKWUe6WUc6WUY5y1QpyclJycjJychJyUc5yMY5StY5SUe5SMhJSMe5SMc5SMWpSEa5SESoyUe4yMhIyEY4SlKYScWoSMe4SEe4SEa4R7c4R7Y3uMY3uEe3t7e3t7c3tza3tzY3trKXtjIXOcAHOUMXOEY3Nzc3NzWnNrSmulCGuUMWuMGGtzWmtrY2taMWtaGGOUOWOMAGNzUmNjWmNjSmNaUmNaQmNaOWNaIWNSCFqcAFpjUlpSMVpSIVpSEFpKKVKMAFJSUlJSSlJSMVJKMVJKGFJKAFI5CEqUAEqEAEpzQkpKIUpCQkpCGEpCAEo5EEoxAEJjOUJCOUJCAEI5IUIxADl7ADlaITlCOTkxMTkxKTkxEDkhADFzADFrGDE5OTExADEpEClrCCkxKSkpKSkpISkpACkhCCkhACkYACFzACFrACEhCCEYGBhjEBhjABghABgYCBgYABgQEBgQABAQABAIAAhjAAhSAAhKAAgIEAgICABaAABCAAAhAAAQAAAIAAAAAAAAACH+AS4ALAAAAAAwACMAAAj/AAEIHEiwoMGDCBMqXMiwocOHAA4cgEixIIIJO3JMmAjADIqKFU/8MHIkg5EgYXx4iaTkI0iHE6wE2TCggYILQayEAgXIy8uGCKz8sDCAQAMRG3iEcXULlJkJPwli3OFjh9UdYYLE6NBhA04UXHoVA2XoTZgfPKBWlOBDphAWOdfMcfMDLloeO3hIMjbWVCQ5Fn6E2UFxgpsgFjYIEBADrZU6luqEEfqjTqpt54z1uuWqTIcgWAk7PECGzIUQDRosDmxlUrVJkwQJkqVuX71v06YZcyUlROAdbnLAJKPFyAYFAhoMwFlnEh0rWkpz8raPHm7dqKKc/KFFkBUrVn1M/ziBcEIeLUEQI8/AYk0i9Be4sqjsrN66c9/OnbobhpR3HkIUoZ0WVnBE0AGLFKKFD0HAFUQe77HQgQI1hRBDEHMcY0899bBzihZuCPILJD8EccEGGzwAQhFaUHHQH82sUkgeNHISDBk8WCCCcsqFUEQWmOyzjz3sUGNNOO5Y48YOEgowAAQhnBScQV00k82V47jzjy9CXZBcjziFoco//4CDiSOyhPMPLkJZkEBqJmRQxA9uZGEQD8Ncmc044/zzDF2IZQBCCDYE8QMZz/iiCSx0neHGI7BIhhhNn+1gxRpokEcQAp7seWU7/PwTyxqG/iCEEVzQmUombnDRxRExzP9nBR2PCKLFD3UJwcMPa/SRqUGNWJmNOVn+M44ukMRB4KGcWDNLVhuUMEIJAlzwA3DJBHMJIXm4sQYhqyxCRQQGLSIsn1qac2UzysQSyzX/hLMGD0F0IMCODYAQBA9W/PKPOcRiw0wzwxTiokF9dLMnuv/Mo+fCZF7jBr0xbDDCACWEYKgb1vzjDp/jZNOMLX0IZxAKq2TZTjtaOjwOsXyG+s8sZJTIQsUdIGHoJPf8w487QI/TDSt5mGwQFZxc406o8HiDJchk/ltLHpSlJwSvz5DpTjvmuGNOM57koelBOaAhiCaaPBLL0wwbm003peRBnBZqJMJL1ECz/HXYYx/NdAIOOVCxQyLorswymU93o0wuwfAiTDNR/xz0MLXU0XdCE+UwSTRZAq2lsSATu+4wkGvt+TjNzPLrQyegAUku2Hij5cd8LhxyM8QIg4w18HgcdC6BTBFSDmfQqsovttveDcG7lFLHI75cE841sARCxeWsnxC4G9HADPK6ywzDCRqBo0EHHWhMgT1IJzziNci1N7PMKnSYfML96/90AiJKey/0KtbLX1QK0rrNnQ541xugQ7SHhkXBghN0SKACWRc4KlAhBwKcIOYymJCAAAA7",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\nltk\chunk\named_entity.py:            return "upcase"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\nltk\tag\sequential.py:            shape = "upcase"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\core\caching.py:class _ZipCacheLocator(_SourceFileBackedLocatorMixin, _CacheLocator):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\core\caching.py:        _ZipCacheLocator,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\core\typing\new_builtins.py:# Bitwise invert and negate are special: we must not upcast the operand
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\core\typing\old_builtins.py:# automatically upcast.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\core\typing\old_builtins.py:# Bitwise invert and negate are special: we must not upcast the operand
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\core\untyped_passes.py:class IterLoopCanonicalization(FunctionPass):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\core\untyped_passes.py:        pm.add_pass(IterLoopCanonicalization,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\core\withcontexts.py:        spcattr = ir.Expr.getattr(gvar, 'set_parallel_chunksize', loc)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\core\withcontexts.py:        set_state.append(ir.Assign(spcattr, spcvar, loc))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\new_numbers.py:    # Negate before upcasting, for unsigned numbers
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\new_numbers.py:    # Invert before upcasting, for unsigned numbers
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\new_numbers.py:        # Signed upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\new_numbers.py:        # Unsigned upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\old_numbers.py:    # Negate before upcasting, for unsigned numbers
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\old_numbers.py:    # Invert before upcasting, for unsigned numbers
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\old_numbers.py:        # Signed upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\old_numbers.py:        # Unsigned upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\unicode.py:def _ascii_swapcase(data, res):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\unicode.py:def _unicode_swapcase(data, length, res, maxchars):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\unicode.py:@overload_method(types.UnicodeType, 'swapcase')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\unicode.py:def unicode_swapcase(data):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cpython\unicode.py:    return case_operation(_ascii_swapcase, _unicode_swapcase)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\cudadrv\devicearray.py:        Returns a *IpcArrayHandle* object that is safe to serialize and transfer
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\cudadrv\devicearray.py:        return IpcArrayHandle(ipc_handle=ipch, array_desc=desc)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\cudadrv\devicearray.py:class IpcArrayHandle(object):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\tests\cudapy\test_ipc.py:def ipc_array_test(ipcarr, result_queue):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\tests\cudapy\test_ipc.py:        with ipcarr as darr:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\tests\cudapy\test_ipc.py:                with ipcarr:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\tests\cudapy\test_ipc.py:def staged_ipc_array_test(ipcarr, device_num, result_queue):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\tests\cudapy\test_ipc.py:            with ipcarr as darr:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\tests\cudapy\test_ipc.py:                    with ipcarr:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\tests\cudapy\test_sync.py:    def test_syncthreads_count_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\tests\cudapy\test_sync.py:    def test_syncthreads_and_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\cuda\tests\cudapy\test_sync.py:    def test_syncthreads_or_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\np\math\numbers.py:    # Negate before upcasting, for unsigned numbers
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\np\math\numbers.py:    # Invert before upcasting, for unsigned numbers
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\np\math\numbers.py:        # Signed upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\np\math\numbers.py:        # Unsigned upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_array_methods.py:            # check upcasting logic, this matters most on windows
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_caching.py:from numba.core.caching import _UserWideCacheLocator, _ZipCacheLocator
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_caching.py:    ZipCache tests that don't require the setup/teardown from `TestCacheZip`
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_caching.py:        locator = _ZipCacheLocator.from_function(mock_func, zip_path)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_caching.py:        locator = _ZipCacheLocator.from_function(mock_func, non_zip_path)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_dictobject.py:    def test_simple_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:                                       SimplifyCFG, IterLoopCanonicalization,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:class TestLoopCanonicalisation(MemoryLeakMixin, TestCase):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:                    pm.add_pass(IterLoopCanonicalization, "Canonicalise loops")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:    LoopCanonicalisingCompiler = get_pipeline(True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:    TypedLoopCanonicalisingCompiler = get_pipeline(True, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:            get_info(self.LoopCanonicalisingCompiler)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:            get_info(self.LoopCanonicalisingCompiler)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:            get_info(self.TypedLoopCanonicalisingCompiler)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:            get_info(self.TypedLoopCanonicalisingCompiler)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:            get_info(self.LoopCanonicalisingCompiler)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_mixed_tuple_unroller.py:            get_info(self.LoopCanonicalisingCompiler)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_np_functions.py:            # weights as list, then array, mixed types, check upcast is ok
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:    def get_numpy_signed_upcast(self, *vals):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:    def get_numpy_unsigned_upcast(self, *vals):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:            tp = self.get_numpy_signed_upcast(a, b)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:            tp = self.get_numpy_unsigned_upcast(a, b)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:            tp = self.get_numpy_signed_upcast(a, b)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:            tp = self.get_numpy_signed_upcast(a, b)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:            tp = self.get_numpy_unsigned_upcast(a, b)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:            tp = self.get_numpy_signed_upcast(a)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:            tp = self.get_numpy_unsigned_upcast(a)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:            tp = self.get_numpy_signed_upcast(a)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_operators.py:            tp = self.get_numpy_unsigned_upcast(a)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_target_extension.py:                # Signed upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_target_extension.py:                # Unsigned upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_unicode.py:    def test_swapcase(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_unicode.py:            return x.swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numba\tests\test_unicode.py:        msg = 'Results of "{}".swapcase() must be equal'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\array_api\_statistical_functions.py:    # Note: sum() and prod() always upcast for dtype=None. `np.prod` does that
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\array_api\_statistical_functions.py:    # Note: sum() and prod() always upcast for dtype=None. `np.sum` does that
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:    'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:def swapcase(a):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:    Calls `str.swapcase` element-wise.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:    str.swapcase
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:    >>> np.char.swapcase(c)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:    return _vec_string(a_arr, a_arr.dtype, 'swapcase')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:    swapcase
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:    def swapcase(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:        char.swapcase
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\defchararray.py:        return asarray(swapcase(self))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\numerictypes.py:    # prevent abstract classes being upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\tests\test_defchararray.py:    def test_swapcase(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\tests\test_defchararray.py:        assert_(issubclass(self.A.swapcase().dtype.type, np.bytes_))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\tests\test_defchararray.py:        assert_array_equal(self.A.swapcase(), tgt)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\tests\test_defchararray.py:        assert_(issubclass(self.B.swapcase().dtype.type, np.str_))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\tests\test_defchararray.py:        assert_array_equal(self.B.swapcase(), tgt)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\tests\test_multiarray.py:        # test out with type upcast to complex
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\tests\test_multiarray.py:        # also check upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\tests\test_ufunc.py:        expected = call_ufunc(arr.astype(np.float64))  # upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\core\_add_newdocs.py:    Upcasting:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\distutils\cpuinfo.py:    def _is_PCA56(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\distutils\cpuinfo.py:        return self.is_Alpha() and self.info[0]['cpu model'] == 'PCA56'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:groupcache = None
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:    global beginpattern, groupcounter, groupname, groupcache, grouplist
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache = {groupcounter: {}}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['body'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['vars'] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['block'] = ''
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['name'] = ''
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            grouplist[groupcounter - 1].append(groupcache[groupcounter])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            grouplist[groupcounter - 1].append(groupcache[groupcounter])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            grouplist[groupcounter - 1].append(groupcache[groupcounter])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        if 'externals' in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            for name in groupcache[groupcounter]['externals']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                if 'interfaced' in groupcache[groupcounter] and name in groupcache[groupcounter]['interfaced']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        grouplist[groupcounter - 1].append(groupcache[groupcounter])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:    global variable groupcache, a dictionary containing info about each part
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:    global groupcounter, groupname, groupcache, grouplist, filepositiontext
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['body'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['vars'] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['block'] = 'program'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['name'] = newname
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['from'] = 'fromsky'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['vars'][name] = dict(attrspec = attrs)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            if 'args' not in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            if name not in groupcache[groupcounter]['args']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            if name in groupcache[groupcounter]['interfaced']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['block'] = 'python module'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['name'] = f77modulename
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['from'] = ''
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['body'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['externals'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['interfaced'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['vars'] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['block'] = 'interface'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['name'] = 'unknown_interface'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['from'] = '%s:%s' % (
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter - 1]['from'], groupcache[groupcounter - 1]['name'])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['body'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['externals'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['interfaced'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['vars'] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['block'] = block
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['prefix'] = m.group('before')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['name'] = rmbadname1(name)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['result'] = result
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['from'] = currentfilename
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter]['from'] = '%s:%s' % (
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                    groupcache[groupcounter - 1]['from'], currentfilename)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter]['from'] = '%s:%s' % (
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                    groupcache[groupcounter - 1]['from'], groupcache[groupcounter - 1]['name'])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        for k in list(groupcache[groupcounter].keys()):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            if not groupcache[groupcounter][k]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                del groupcache[groupcounter][k]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['args'] = args
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['body'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['externals'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['interfaced'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['vars'] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['entry'] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['varnames'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            if name not in groupcache[groupcounter - 2]['externals']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter - 2]['externals'].append(name)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['vars'] = copy.deepcopy(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter - 2]['vars'])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                del groupcache[groupcounter]['vars'][name][
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                    groupcache[groupcounter]['vars'][name]['attrspec'].index('external')]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                    groupcache[groupcounter]['bindlang'] = {name : {}}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                    groupcache[groupcounter]['bindlang'][name]["lang"] = bindcdat.group('lang')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                        groupcache[groupcounter]['bindlang'][name]["name"] = bindcdat.group('lang_name')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter]['vars'][name] = appenddecl(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                    groupcache[groupcounter]['vars'][name], groupcache[groupcounter - 2]['vars'][''])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                if result and result in groupcache[groupcounter]['vars']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                        groupcache[groupcounter]['vars'][name] = appenddecl(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                            groupcache[groupcounter]['vars'][name], groupcache[groupcounter]['vars'][result])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter - 2]['interfaced'].append(name)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            grouplist[groupcounter - 1].append(groupcache[groupcounter])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            grouplist[groupcounter - 1].append(groupcache[groupcounter])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['entry'][name] = args
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        edecl = groupcache[groupcounter]['vars']
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            if ll[i:] == '::' and 'args' in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                ll = ll + ','.join(groupcache[groupcounter]['args'])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                    if k not in groupcache[groupcounter]['args']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                            if '__user__' not in groupcache[groupcounter - 2]['name']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                            if k != groupcache[groupcounter]['name']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                                        ' to %s arguments\n' % (k, groupcache[groupcounter]['name']))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                                groupcache[groupcounter]['args'].append(k)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                if groupcache[groupcounter]['block'] == 'program':
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                if k not in groupcache[groupcounter]['args']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                if 'externals' not in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                    groupcache[groupcounter]['externals'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter]['externals'].append(k)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['vars'] = edecl
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['implementedby'] = \
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        edecl = groupcache[groupcounter]['vars']
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['vars'] = edecl
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['implicit'] = None
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            if 'implicit' in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                impl = groupcache[groupcounter]['implicit']
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['implicit'] = impl
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        vars = groupcache[groupcounter].get('vars', {})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['vars'] = vars
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        if 'common' in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            commonkey = groupcache[groupcounter]['common']
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['common'] = commonkey
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            if 'use' not in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter]['use'] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['use'][name] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter]['use'][name]['only'] = isonly
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                    groupcache[groupcounter]['use'][name]['map'] = rl
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        if 'f2pyenhancements' not in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['f2pyenhancements'] = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        d = groupcache[groupcounter]['f2pyenhancements']
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        appendmultiline(groupcache[gc],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:    Alters groupcache to add the name, typespec, attrspec (and possibly value)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:    global groupcache, groupcounter
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        if ename in groupcache[groupcounter]['vars']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            edecl = groupcache[groupcounter]['vars'][ename].copy()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        if 'external' in (edecl.get('attrspec') or []) and e in groupcache[groupcounter]['args']:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            if 'externals' not in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:                groupcache[groupcounter]['externals'] = []
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['externals'].append(e)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        groupcache[groupcounter]['vars'][ename] = edecl
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:        if 'varnames' in groupcache[groupcounter]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\f2py\crackfortran.py:            groupcache[groupcounter]['varnames'].append(ename)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\lib\tests\test_function_base.py:    def test_upcasting(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\lib\tests\test_io.py:        # bytes encoding with non-latin1 -> unicode upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\numpy\lib\tests\test__datasource.py:    def test_InvalidHTTPCacheURLError(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\algorithms.py:            # GH#46485 Use object to avoid upcast to float64 later
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\base.py:        # should allow "easy" concatenation (no upcasting needed), and result
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\boolean.py:    # The value used to fill '_data' to avoid upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\floating.py:    # The value used to fill '_data' to avoid upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\integer.py:    # The value used to fill '_data' to avoid upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\interval.py:    maybe_upcast_numeric_to_64bit,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\interval.py:        left = maybe_upcast_numeric_to_64bit(left)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\interval.py:        right = maybe_upcast_numeric_to_64bit(right)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\masked.py:    # The value used to fill '_data' to avoid upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\masked.py:        # to avoid upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\sparse\accessor.py:        upcasting); that is to say if the dtypes (even of numeric types)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\sparse\accessor.py:        e.g. If the dtypes are float16 and float32, dtype will be upcast to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\_arrow_string_mixins.py:    def _str_swapcase(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\arrays\_arrow_string_mixins.py:        return type(self)(pc.utf8_swapcase(self._pa_array))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\dtypes\cast.py:            # try to upcast here
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\dtypes\cast.py:        # don't allow upcasts here (except if empty)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\dtypes\cast.py:def maybe_upcast_numeric_to_64bit(arr: NumpyIndexT) -> NumpyIndexT:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\dtypes\cast.py:    If array is a int/uint/float bit size lower than 64 bit, upcast it to 64 bit.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\dtypes\cast.py:        Upcasted from dtype argument if necessary.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\dtypes\cast.py:        Upcasted from fill_value argument if necessary.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\dtypes\cast.py:                # upcast to prevent overflow
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\dtypes\cast.py:        #  which will make us upcast too far.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\frame.py:                # GH#57124 - `that` might get upcasted because of NA values, and then
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\frame.py:        upcasting); that is to say if the dtypes (even of numeric types)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\frame.py:        e.g. If the dtypes are float16 and float32, dtype will be upcast to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\frame.py:        float32.  If dtypes are int32 and uint8, dtype will be upcast to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\indexes\accessors.py:        # maybe need to upcast (ints)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\indexes\base.py:        if we can upcast the object-dtype one to improve performance.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\indexes\interval.py:    maybe_upcast_numeric_to_64bit,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\indexes\interval.py:        left = maybe_upcast_numeric_to_64bit(left)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\indexes\interval.py:        right = maybe_upcast_numeric_to_64bit(right)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\indexes\interval.py:            key = maybe_upcast_numeric_to_64bit(key)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\indexing.py:                    # - Exclude `object`, as then no upcasting happens.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:    def coerce_to_target_dtype(self, other, warn_on_upcast: bool = False) -> Block:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:            warn_on_upcast = False
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:            warn_on_upcast = False
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:        if warn_on_upcast:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:            # split so that we only upcast where necessary
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:        # Note: algos.take_nd has upcast logic similar to coerce_to_target_dtype
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:            nb = self.coerce_to_target_dtype(value, warn_on_upcast=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:                        new, warn_on_upcast=True
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:            #  without using 'casted', expressions.where may do unwanted upcasts.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:                #  can avoid some potential upcast/downcast by splitting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:                # Note: expressions.where may upcast.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:        """shift the block by periods, possibly upcast"""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:                nb = self.coerce_to_target_dtype(orig_value, warn_on_upcast=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:                nb = self.coerce_to_target_dtype(orig_value, warn_on_upcast=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:            # Avoid a) raising for Interval/PeriodDtype and b) unnecessary object upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:                    blk = self.coerce_to_target_dtype(orig_new, warn_on_upcast=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\blocks.py:                    blk = self.coerce_to_target_dtype(orig_new, warn_on_upcast=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\concat.py:    def get_reindexed_values(self, empty_dtype: DtypeObj, upcasted_na) -> ArrayLike:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\concat.py:        if upcasted_na is None and self.block.dtype.kind != "V":
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\concat.py:            # No upcasting is necessary
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\concat.py:            fill_value = upcasted_na
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\concat.py:    upcasted_na = _dtype_to_na_value(empty_dtype, has_none_blocks)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\concat.py:        ju.get_reindexed_values(empty_dtype=empty_dtype, upcasted_na=upcasted_na)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\internals\concat.py:        # no blocks that would get missing values (can lead to type upcasts)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\nanops.py:        # bottleneck does not properly upcast during the sum
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:        >>> repl = lambda m: m.group('two').swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    Series.str.swapcase : Converts uppercase to lowercase and lowercase to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    >>> s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    3              SwApCaSe
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    3              swapcase
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    3              SWAPCASE
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    3              Swapcase
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    3              Swapcase
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    >>> s.str.swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    3              sWaPcAsE
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    #       upper, lower, title, capitalize, swapcase, casefold
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    _doc_args["swapcase"] = {
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:        "type": "be swapcased",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:        "method": "swapcase",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    @Appender(_shared_docs["casemethods"] % _doc_args["swapcase"])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:    def swapcase(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\accessor.py:        result = self._data.array._str_swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\base.py:    def _str_swapcase(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\object_array.py:    def _str_swapcase(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\core\strings\object_array.py:        return self._str_map(str.swapcase)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\stata.py:    Preserve Stata datatypes. If False, numeric data are upcast to pandas
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\stata.py:    are checked for violations of the value restrictions and upcast if needed.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\stata.py:    same size if there is no loss in precision, otherwise are upcast to a
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\stata.py:        # Check values and upcast if necessary
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\stata.py:                # Upcast if needed so that correct missing values can be set
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\stata.py:        # Check columns for compatibility with stata, upcast if necessary
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\common.py:def get_upcast_box(left, right, is_cmp: bool = False):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:    get_upcast_box,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:        xbox = get_upcast_box(dtarr, other, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:        xbox = get_upcast_box(obj, ts, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:        xbox = get_upcast_box(left, NaT, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:        xbox = get_upcast_box(ser, ser, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:        xbox = get_upcast_box(left, right, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:        xbox = get_upcast_box(dtarr, other, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:        # The datetime object has "us" so we upcast lower units
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:        xbox = get_upcast_box(dti, other)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_datetime64.py:        xbox = get_upcast_box(dtarr, other)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_interval.py:from pandas.tests.arithmetic.common import get_upcast_box
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_interval.py:            xbox = get_upcast_box(obj, nulls_fixture, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_period.py:    get_upcast_box,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_period.py:        xbox = get_upcast_box(idx, other, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_period.py:        xbox = get_upcast_box(pi, other, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_period.py:        xbox = get_upcast_box(parr, other, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_period.py:        xbox = get_upcast_box(ser, val, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_period.py:        xbox = get_upcast_box(base, per, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_period.py:        xbox = get_upcast_box(base, idx, True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_timedelta64.py:    get_upcast_box,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_timedelta64.py:        xbox = get_upcast_box(tdi, other)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_timedelta64.py:        xbox = get_upcast_box(tdser, vector)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_timedelta64.py:        xbox = get_upcast_box(tdser, vector)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_timedelta64.py:        xbox = get_upcast_box(tdi, ser)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arithmetic\test_timedelta64.py:        xbox = get_upcast_box(tdi, ser)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arrays\boolean\test_function.py:    # np.sqrt on np.bool_ returns float16, which we upcast to Float32
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\arrays\masked_shared.py:        # Set nullable dtype here to avoid upcasting when setting to pd.NA below
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\computation\test_eval.py:    # maybe someday... numexpr has too many upcasting rules now
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\computation\test_eval.py:                reason="numexpr issue with complex that are upcast "
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\copy_view\test_indexing.py:def test_column_as_series_set_with_upcast(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\copy_view\test_indexing.py:    # setting a value causes an upcast, we don't need to update the parent
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\copy_view\test_methods.py:        # Without CoW the original will be modified, the other case upcasts, e.g. copy
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\dtypes\cast\test_promote.py:        The expected value for the (potentially upcast) fill_value returned by
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\dtypes\cast\test_promote.py:    # returned from maybe_promote is fill_value, potentially upcast to the
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\dtypes\cast\test_promote.py:    # filling int with float always upcasts to float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\dtypes\cast\test_promote.py:        # NaT upcasts everything that's not datetime/timedelta to object
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\dtypes\test_inference.py:        # For floats, we just upcast directly to float64 instead of trying to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\dtypes\test_inference.py:        # For floats, we just upcast directly to float64 instead of trying to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\extension\test_arrow.py:        # BaseOpsUtil._combine can upcast expected dtype
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\extension\test_arrow.py:                #  ArrowExtensionArray does not upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\extension\test_arrow.py:            #  ArrowExtensionArray does not upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\extension\test_arrow.py:        ["swapcase", "AbC Def"],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\common.py:    # float16 are most likely to be upcasted to float32
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_coercion.py:@pytest.mark.xfail(reason="unwanted upcast")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_coercion.py:def test_iloc_setitem_unnecesssary_float_upcasting():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_indexing.py:        # don't upcast if we don't need to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_indexing.py:        # upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_indexing.py:    def test_setitem_frame_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_indexing.py:        # needs upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_indexing.py:    def test_single_element_ix_dont_upcast(self, float_frame):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_setitem.py:        # Set dtype object straight away to avoid upcast when setting inc below
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_where.py:    def test_where_upcasting(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_where.py:        # upcasting case (GH # 2794)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_where.py:        # integers are upcast, so don't check the dtypes
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_where.py:            # dtypes (and confirm upcasts)x
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_where.py:    def test_where_axis_with_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_where.py:        # Upcast needed
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\indexing\test_where.py:        #  checking that we don't unnecessarily upcast to object.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\methods\test_asof.py:        # explicitly cast to float to avoid implicit upcast when setting to np.nan
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\methods\test_asof.py:        # Cast to 'float64' to avoid upcast when introducing nan in df.asof
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\methods\test_clip.py:        # TODO: avoid this warning here?  seems like we should never be upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\methods\test_map.py:    # Set float64 type to avoid upcast when setting NA below
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\methods\test_replace.py:    def test_replace_mixed_int_block_upcasting(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\methods\test_replace.py:        # int block upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\methods\test_replace.py:        # to object block upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_arithmetic.py:            #   DataFrame op will return all-float.  So we upcast `expected`
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_arithmetic.py:        # mix vs float64, upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_arithmetic.py:        # no upcast needed
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_arithmetic.py:        # vs mix (upcast) as needed
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_constructors.py:    def test_constructor_dict_dont_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_constructors.py:    def test_constructor_dict_dont_upcast2(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_constructors.py:        # expecting single value upcasting here
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_constructors.py:        # overflow issue? (we always expected int64 upcasting here)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_cumulative.py:        # GH#19296 dont incorrectly upcast to object
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\frame\test_reductions.py:        # mixed types (with upcasting happening)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\generic\test_finalize.py:        operator.methodcaller("swapcase"),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\groupby\test_counting.py:    # Set float64 dtype to avoid upcast when setting nan below
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\groupby\test_filters.py:    # Cast to avoid upcast when setting nan below
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\groupby\test_filters.py:    # Cast to avoid upcast when setting nan below
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\groupby\test_filters.py:    # Cast to avoid upcast when setting nan below
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\groupby\test_filters.py:    # Cast to avoid upcast when setting nan below
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\groupby\test_filters.py:    # Cast to avoid upcast when setting nan below
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\groupby\transform\test_transform.py:    # GH 3740, make sure that we might upcast on item-by-item transform
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexes\interval\test_interval_range.py:        # resulting endpoints can safely be upcast to integers
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexes\numeric\test_numeric.py:    # GH#44609 case where we have to upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\multiindex\test_setitem.py:        # arr + 0.5 cannot be cast losslessly to int, so we upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_at.py:        # Set float64 dtype to avoid upcast when setting .5
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_iloc.py:        # Set object type to avoid upcast when setting "Z"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_indexing.py:    def test_inf_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_indexing.py:    def test_setitem_dtype_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_indexing.py:    def test_setitem_dtype_upcast2(self, val):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_indexing.py:    def test_setitem_dtype_upcast3(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_indexing.py:        # set float64 to avoid upcast when setting nan
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_loc.py:        # Set object dtype to avoid upcast when setting 'Z'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_loc.py:        # float64 dtype to avoid upcast when trying to set float data
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_loc.py:    def test_loc_setitem_with_expansion_inf_upcast_empty(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\indexing\test_loc.py:def test_loc_setitem_uint8_upcast(value):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:    _maybe_upcast,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:def test_maybe_upcast(any_real_numpy_dtype):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:    result = _maybe_upcast(arr, use_dtype_backend=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:def test_maybe_upcast_no_na(any_real_numpy_dtype):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:    result = _maybe_upcast(arr, use_dtype_backend=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:def test_maybe_upcaste_bool():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:    result = _maybe_upcast(arr, use_dtype_backend=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:def test_maybe_upcaste_bool_no_nan():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:    result = _maybe_upcast(arr, use_dtype_backend=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:def test_maybe_upcaste_all_nan():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:    result = _maybe_upcast(arr, use_dtype_backend=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:def test_maybe_upcast_object(val, string_storage):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\io\parser\test_upcast.py:        result = _maybe_upcast(arr, use_dtype_backend=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\concat\test_append.py:    def test_append_missing_column_proper_upcast(self, sort):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\concat\test_categorical.py:    def test_categorical_index_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\concat\test_categorical.py:        # test upcasting to object when concatenating on categorical indexes
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\concat\test_concat.py:    def test_concat_different_extension_dtypes_upcasts(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\concat\test_concat.py:def test_concat_no_unnecessary_upcast(float_numpy_dtype, frame_or_series):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\concat\test_concat.py:def test_concat_will_upcast(pdt, any_signed_int_numpy_dtype):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\concat\test_concat.py:def test_concat_ea_upcast():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\merge\test_merge.py:        pcat = CategoricalDtype(categories=["P2", "P1"], ordered=ordered)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\merge\test_merge.py:                "p": Categorical(["P2", "P1", "P2"], dtype=pcat),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\merge\test_merge.py:                "p": Categorical(["P2", "P2", "P1"], dtype=pcat),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\merge\test_merge.py:                "p": Categorical(["P2", "P1", "P2"], dtype=pcat),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\merge\test_merge.py:def test_merge_datetime_upcast_dtype():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\test_from_dummies.py:    # Set float64 dtype to avoid upcast when setting np.nan
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\reshape\test_from_dummies.py:    # Set object dtype to avoid upcast when setting "str"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:        # Set object dtype to avoid upcast when setting date.today()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:        # need to upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:    def test_setitem_mask_smallint_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:    def test_setitem_mask_smallint_no_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:        # like test_setitem_mask_smallint_upcast, but while we can't hold 'alt',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:        # TODO: ser.where(~mask, alt) unnecessarily upcasts to int64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:        # set object dtype to avoid upcast when setting inc
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:    #  small-itemsize integer dtypes should not need to upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:class TestSetitemIntoIntegerSeriesNeedsUpcast(SetitemCastingEquivalents):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:class TestSmallIntegerSetitemUpcast(SetitemCastingEquivalents):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:    # bool-with-int and bool-with-float both upcast to object
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:def test_setitem_empty_mask_dont_upcast_dt64():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:    assert ser.dtype == dti.dtype  # no-op -> dont upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_setitem.py:    assert ser.dtype == dti.dtype  # no-op -> dont upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\indexing\test_where.py:def test_where_unsafe_upcast(dtype, expected_dtype):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\methods\test_clip.py:        # TODO: avoid this warning here?  seems like we should never be upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\methods\test_fillna.py:    def test_fillna_f32_upcast_with_dict(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\methods\test_reindex.py:    # don't upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\methods\test_reindex.py:def test_reindex_fill_value_datetimelike_upcast(dtype, fill_value, using_array_manager):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\methods\test_replace.py:        # 3.0 can still be held in our int64 series, so we do not upcast GH#44940
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\methods\test_replace.py:        # MUST upcast to float
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\methods\test_update.py:        # Cast to object to avoid upcast when setting "foo"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\series\test_missing.py:    # set float64 dtype to avoid upcast when setting nan
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\conftest.py:            "swapcase",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_case_justify.py:def test_swapcase(any_string_dtype):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_case_justify.py:    result = s.str.swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_case_justify.py:def test_swapcase_mixed_object():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_case_justify.py:    result = s.str.swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_case_justify.py:    assert s.str.swapcase().tolist() == [v.swapcase() for v in values]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_find_replace.py:    repl = lambda m: m.group(0).swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_find_replace.py:    repl = lambda m: m.group("middle").swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_find_replace.py:    repl = lambda m: m.group(0).swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_find_replace.py:    repl = lambda m: m.group(0).swapcase()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\tests\strings\test_strings.py:    tm.assert_series_equal(empty_str, empty.str.swapcase())
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pip\_vendor\rich\_emoji_codes.py:    "cupcake": "≡ƒºü",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pkg_resources\_vendor\pyparsing\common.py:    - :class:`upcaseTokens`
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pkg_resources\_vendor\pyparsing\common.py:    upcase_tokens = staticmethod(token_map(lambda t: t.upper()))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pkg_resources\_vendor\pyparsing\common.py:    upcaseTokens = upcase_tokens
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\api.py:    ...     def upcast_integer_types(self) -> pl.LazyFrame:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\api.py:    >>> lf.types.upcast_integer_types().collect()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\dataframe\frame.py:        integer_cast: Literal["upcast", "forbid"]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\dataframe\frame.py:        | Mapping[str, Literal["upcast", "forbid"]] = "forbid",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\dataframe\frame.py:        float_cast: Literal["upcast", "forbid"]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\dataframe\frame.py:        | Mapping[str, Literal["upcast", "forbid"]] = "forbid",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\dataframe\frame.py:            Forbid of upcast for integer columns from the input to the respective column
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\dataframe\frame.py:            Forbid of upcast for float columns from the input to the respective column
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\dataframe\frame.py:        Upcasting integers and floats
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\dataframe\frame.py:        ...         integer_cast="upcast",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\dataframe\frame.py:        ...         float_cast="upcast",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\expr\expr.py:    def append(self, other: IntoExpr, *, upcast: bool = True) -> Expr:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\expr\expr.py:        upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\expr\expr.py:        return self._from_pyexpr(self._pyexpr.append(other, upcast))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\io\cast_options.py:FloatCastOption: TypeAlias = Literal["upcast", "downcast"]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\io\cast_options.py:        integer_cast: Literal["upcast", "forbid"] = "forbid",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\io\cast_options.py:            * `upcast`: Allow lossless casting to wider integer types.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\io\cast_options.py:            * `upcast`: Allow casting to higher precision float types.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\lazyframe\frame.py:        integer_cast: Literal["upcast", "forbid"]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\lazyframe\frame.py:        | Mapping[str, Literal["upcast", "forbid"]] = "forbid",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\lazyframe\frame.py:        float_cast: Literal["upcast", "forbid"]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\lazyframe\frame.py:        | Mapping[str, Literal["upcast", "forbid"]] = "forbid",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\lazyframe\frame.py:            Forbid of upcast for integer columns from the input to the respective column
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\lazyframe\frame.py:            Forbid of upcast for float columns from the input to the respective column
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\lazyframe\frame.py:        Upcasting integers and floats
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\lazyframe\frame.py:        ...         integer_cast="upcast",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\lazyframe\frame.py:        ...         float_cast="upcast",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\series\series.py:            # require upcast when comparing int series to float value
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\polars\series\series.py:                # require upcast when comparing date series to datetime
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\prompt_toolkit\key_binding\bindings\vi.py:        (("g", "~"), Always(), lambda string: string.swapcase()),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\prompt_toolkit\key_binding\bindings\vi.py:            lambda string: string.swapcase(),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\prompt_toolkit\key_binding\bindings\vi.py:            buffer.insert_text(c.swapcase(), overwrite=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\prompt_toolkit\key_binding\bindings\vi.py:    def _swapcase_line(event: E) -> None:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\prompt_toolkit\key_binding\bindings\vi.py:        buff.transform_current_line(lambda s: s.swapcase())
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\propcache\_helpers.py:NO_EXTENSIONS = bool(os.environ.get("PROPCACHE_NO_EXTENSIONS"))  # type: bool
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\propcache\__init__.py:"""propcache: An accelerated property cache for Python classes."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\propcache\__init__.py:# Imports have moved to `propcache.api` in 0.2.0+.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\psutil\tests\test_linux.py:            SwapCached:            6 kB
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyarrow\pandas_compat.py:        # ARROW-9096: if original DataFrame was upcast we keep that
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyarrow\tests\test_feather.py:    # pandas requires upcast to float dtype
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyarrow\tests\test_feather.py:    # pandas requires upcast to object dtype
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyarrow\tests\test_pandas.py:        # pandas requires upcast to float dtype
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyarrow\tests\test_pandas.py:        # pandas requires upcast to object dtype
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyarrow\tests\test_pandas.py:        # None value in item array causes upcast to float
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\apdlexer.py:               "PATH", "PAUSE", "/PBC", "/PBF", "PCALC", "PCGOPT",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\apdlexer.py:               "STRLENG()", "UPCASE()", "LWCASE()", "JOIN()",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\configs.py:        "ipcache_high", "ipcache_low", "ipcache_size", "local_domain",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\configs.py:        "objects", "vm_objects", "utilization", "ipcache", "fqdncache", "dns",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\dotnet.py:        'true', 'try', 'type', 'upcast', 'use!', 'use', 'val', 'void', 'when',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\ecl.py:                'PARALLEL', 'SEQUENTIAL', 'SOAPCALL', 'CHECKPOINT', 'DEPRECATED',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\ecl.py:                'SINH', 'SIZEOF', 'SOAPCALL', 'SORT', 'SORTED', 'SQRT', 'STEPPED',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\idl.py:        'struct_hide', 'strupcase', 'surface', 'surfr', 'svdc',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\igor.py:         'PauseForUser', 'PauseUpdate', 'PCA', 'PlayMovie', 'PlayMovieAction',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\igor.py:         'MCC_GetBridgeBalEnable', 'MCC_GetBridgeBalResist', 'MCC_GetFastCompCap',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\igor.py:         'MCC_GetSecondarySignalGain', 'MCC_GetSecondarySignalLPF', 'MCC_GetSlowCompCap',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\igor.py:        'MCC_GetSlowCurrentInjSetlTime', 'MCC_GetWholeCellCompCap',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\igor.py:        'MCC_SetFastCompCap', 'MCC_SetFastCompTau', 'MCC_SetHolding',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\igor.py:        'MCC_SetSecondarySignalLPF', 'MCC_SetSlowCompCap', 'MCC_SetSlowCompTau',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\igor.py:        'MCC_SetTimeoutMs', 'MCC_SetWholeCellCompCap', 'MCC_SetWholeCellCompEnable',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\jvm.py:        'make-array', 'make-node', 'map', 'map-invert', 'map?', 'mapcat',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'char-upcase', 'char-upper-case?', 'char-utf-8-length',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'string-locale-upcase', 'string-locale<?', 'string-locale=?',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'string-upcase', 'string-utf-8-length', 'string<=?', 'string<?',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'oref', 'oref-default', 'oset', 'oset-default', 'pcase',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'pcase-defmacro', 'pcase-dolist', 'pcase-exhaustive', 'pcase-let',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'pcase-let*', 'pop', 'psetf', 'psetq', 'push', 'pushnew', 'remf',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'map-keymap-internal', 'mapatoms', 'mapc', 'mapcar', 'mapconcat',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'unintern', 'unix-sync', 'unlock-buffer', 'upcase', 'upcase-initials',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'upcase-initials-region', 'upcase-region', 'upcase-word',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'map', 'mapcan', 'maxinferences', 'mode', 'n->string', 'nl', 'nth', 'null',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'char-upcase', 'char-upper-case?', 'char-whitespace?',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'math', 'next', 'os', 'package', 'pairs', 'pcall', 'print',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'tostring', 'type', 'unpack', 'xpcall'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\lisp.py:        'maclintf', 'make-env', 'make-image', 'map', 'mapcat',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\pascal.py:        'pbyte', 'pbytearray', 'pcardinal', 'pchar', 'pcomp', 'pcurrency',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\pascal.py:            'upcase', 'utf8decode', 'utf8encode', 'utf8toansi',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\pascal.py:        'numpcarac',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\phix.py:        'IupBackgroundBox', 'IupButton', 'IupCalendar', 'IupCanvas',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\praat.py:        'PCA', 'PairDistribution', 'ParamCurve', 'Pattern', 'Permutation', 'Photo',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\sas.py:        "qsubstr", "qsysfunc", "qtrim", "quote", "qupcase", "scan",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\sas.py:        "then", "to", "trim", "unquote", "until", "upcase", "verify",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\sas.py:        "trim", "trimn", "trunc", "uniform", "upcase", "uss", "var",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\shell.py:        'component description example externalhelp forwardhelpcategory '
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_asy_builtins.py:    'upcase',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_cl_builtins.py:    'char-not-equal', 'char-not-greaterp', 'char-not-lessp', 'char-upcase',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_cl_builtins.py:    'mapc', 'mapcan', 'mapcar', 'mapcon', 'maphash', 'map-into', 'mapl',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_cl_builtins.py:    'nstring-downcase', 'nstring-upcase', 'nsublis', 'nsubst', 'nsubst-if',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_cl_builtins.py:    'stringp', 'string-right-trim', 'string-trim', 'string-upcase',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_cocoa_builtins.py:COCOA_INTERFACES = {'AAAttribution', 'ABNewPersonViewController', 'ABPeoplePickerNavigationController', 'ABPersonViewController', 'ABUnknownPersonViewController', 'ACAccount', 'ACAccountCredential', 'ACAccountStore', 'ACAccountType', 'ADBannerView', 'ADClient', 'ADInterstitialAd', 'ADInterstitialAdPresentationViewController', 'AEAssessmentConfiguration', 'AEAssessmentSession', 'ALAsset', 'ALAssetRepresentation', 'ALAssetsFilter', 'ALAssetsGroup', 'ALAssetsLibrary', 'APActivationPayload', 'ARAnchor', 'ARAppClipCodeAnchor', 'ARBody2D', 'ARBodyAnchor', 'ARBodyTrackingConfiguration', 'ARCamera', 'ARCoachingOverlayView', 'ARCollaborationData', 'ARConfiguration', 'ARDepthData', 'ARDirectionalLightEstimate', 'AREnvironmentProbeAnchor', 'ARFaceAnchor', 'ARFaceGeometry', 'ARFaceTrackingConfiguration', 'ARFrame', 'ARGeoAnchor', 'ARGeoTrackingConfiguration', 'ARGeoTrackingStatus', 'ARGeometryElement', 'ARGeometrySource', 'ARHitTestResult', 'ARImageAnchor', 'ARImageTrackingConfiguration', 'ARLightEstimate', 'ARMatteGenerator', 'ARMeshAnchor', 'ARMeshGeometry', 'ARObjectAnchor', 'ARObjectScanningConfiguration', 'AROrientationTrackingConfiguration', 'ARParticipantAnchor', 'ARPlaneAnchor', 'ARPlaneGeometry', 'ARPointCloud', 'ARPositionalTrackingConfiguration', 'ARQuickLookPreviewItem', 'ARRaycastQuery', 'ARRaycastResult', 'ARReferenceImage', 'ARReferenceObject', 'ARSCNFaceGeometry', 'ARSCNPlaneGeometry', 'ARSCNView', 'ARSKView', 'ARSession', 'ARSkeleton', 'ARSkeleton2D', 'ARSkeleton3D', 'ARSkeletonDefinition', 'ARTrackedRaycast', 'ARVideoFormat', 'ARView', 'ARWorldMap', 'ARWorldTrackingConfiguration', 'ASAccountAuthenticationModificationController', 'ASAccountAuthenticationModificationExtensionContext', 'ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest', 'ASAccountAuthenticationModificationRequest', 'ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest', 'ASAccountAuthenticationModificationViewController', 'ASAuthorization', 'ASAuthorizationAppleIDButton', 'ASAuthorizationAppleIDCredential', 'ASAuthorizationAppleIDProvider', 'ASAuthorizationAppleIDRequest', 'ASAuthorizationController', 'ASAuthorizationOpenIDRequest', 'ASAuthorizationPasswordProvider', 'ASAuthorizationPasswordRequest', 'ASAuthorizationProviderExtensionAuthorizationRequest', 'ASAuthorizationRequest', 'ASAuthorizationSingleSignOnCredential', 'ASAuthorizationSingleSignOnProvider', 'ASAuthorizationSingleSignOnRequest', 'ASCredentialIdentityStore', 'ASCredentialIdentityStoreState', 'ASCredentialProviderExtensionContext', 'ASCredentialProviderViewController', 'ASCredentialServiceIdentifier', 'ASIdentifierManager', 'ASPasswordCredential', 'ASPasswordCredentialIdentity', 'ASWebAuthenticationSession', 'ASWebAuthenticationSessionRequest', 'ASWebAuthenticationSessionWebBrowserSessionManager', 'ATTrackingManager', 'AUAudioUnit', 'AUAudioUnitBus', 'AUAudioUnitBusArray', 'AUAudioUnitPreset', 'AUAudioUnitV2Bridge', 'AUAudioUnitViewConfiguration', 'AUParameter', 'AUParameterGroup', 'AUParameterNode', 'AUParameterTree', 'AUViewController', 'AVAggregateAssetDownloadTask', 'AVAsset', 'AVAssetCache', 'AVAssetDownloadStorageManagementPolicy', 'AVAssetDownloadStorageManager', 'AVAssetDownloadTask', 'AVAssetDownloadURLSession', 'AVAssetExportSession', 'AVAssetImageGenerator', 'AVAssetReader', 'AVAssetReaderAudioMixOutput', 'AVAssetReaderOutput', 'AVAssetReaderOutputMetadataAdaptor', 'AVAssetReaderSampleReferenceOutput', 'AVAssetReaderTrackOutput', 'AVAssetReaderVideoCompositionOutput', 'AVAssetResourceLoader', 'AVAssetResourceLoadingContentInformationRequest', 'AVAssetResourceLoadingDataRequest', 'AVAssetResourceLoadingRequest', 'AVAssetResourceLoadingRequestor', 'AVAssetResourceRenewalRequest', 'AVAssetSegmentReport', 'AVAssetSegmentReportSampleInformation', 'AVAssetSegmentTrackReport', 'AVAssetTrack', 'AVAssetTrackGroup', 'AVAssetTrackSegment', 'AVAssetWriter', 'AVAssetWriterInput', 'AVAssetWriterInputGroup', 'AVAssetWriterInputMetadataAdaptor', 'AVAssetWriterInputPassDescription', 'AVAssetWriterInputPixelBufferAdaptor', 'AVAsynchronousCIImageFilteringRequest', 'AVAsynchronousVideoCompositionRequest', 'AVAudioMix', 'AVAudioMixInputParameters', 'AVAudioSession', 'AVCameraCalibrationData', 'AVCaptureAudioChannel', 'AVCaptureAudioDataOutput', 'AVCaptureAudioFileOutput', 'AVCaptureAudioPreviewOutput', 'AVCaptureAutoExposureBracketedStillImageSettings', 'AVCaptureBracketedStillImageSettings', 'AVCaptureConnection', 'AVCaptureDataOutputSynchronizer', 'AVCaptureDepthDataOutput', 'AVCaptureDevice', 'AVCaptureDeviceDiscoverySession', 'AVCaptureDeviceFormat', 'AVCaptureDeviceInput', 'AVCaptureDeviceInputSource', 'AVCaptureFileOutput', 'AVCaptureInput', 'AVCaptureInputPort', 'AVCaptureManualExposureBracketedStillImageSettings', 'AVCaptureMetadataInput', 'AVCaptureMetadataOutput', 'AVCaptureMovieFileOutput', 'AVCaptureMultiCamSession', 'AVCaptureOutput', 'AVCapturePhoto', 'AVCapturePhotoBracketSettings', 'AVCapturePhotoOutput', 'AVCapturePhotoSettings', 'AVCaptureResolvedPhotoSettings', 'AVCaptureScreenInput', 'AVCaptureSession', 'AVCaptureStillImageOutput', 'AVCaptureSynchronizedData', 'AVCaptureSynchronizedDataCollection', 'AVCaptureSynchronizedDepthData', 'AVCaptureSynchronizedMetadataObjectData', 'AVCaptureSynchronizedSampleBufferData', 'AVCaptureSystemPressureState', 'AVCaptureVideoDataOutput', 'AVCaptureVideoPreviewLayer', 'AVComposition', 'AVCompositionTrack', 'AVCompositionTrackFormatDescriptionReplacement', 'AVCompositionTrackSegment', 'AVContentKeyRequest', 'AVContentKeyResponse', 'AVContentKeySession', 'AVDateRangeMetadataGroup', 'AVDepthData', 'AVDisplayCriteria', 'AVFragmentedAsset', 'AVFragmentedAssetMinder', 'AVFragmentedAssetTrack', 'AVFragmentedMovie', 'AVFragmentedMovieMinder', 'AVFragmentedMovieTrack', 'AVFrameRateRange', 'AVMediaDataStorage', 'AVMediaSelection', 'AVMediaSelectionGroup', 'AVMediaSelectionOption', 'AVMetadataBodyObject', 'AVMetadataCatBodyObject', 'AVMetadataDogBodyObject', 'AVMetadataFaceObject', 'AVMetadataGroup', 'AVMetadataHumanBodyObject', 'AVMetadataItem', 'AVMetadataItemFilter', 'AVMetadataItemValueRequest', 'AVMetadataMachineReadableCodeObject', 'AVMetadataObject', 'AVMetadataSalientObject', 'AVMovie', 'AVMovieTrack', 'AVMutableAssetDownloadStorageManagementPolicy', 'AVMutableAudioMix', 'AVMutableAudioMixInputParameters', 'AVMutableComposition', 'AVMutableCompositionTrack', 'AVMutableDateRangeMetadataGroup', 'AVMutableMediaSelection', 'AVMutableMetadataItem', 'AVMutableMovie', 'AVMutableMovieTrack', 'AVMutableTimedMetadataGroup', 'AVMutableVideoComposition', 'AVMutableVideoCompositionInstruction', 'AVMutableVideoCompositionLayerInstruction', 'AVOutputSettingsAssistant', 'AVPersistableContentKeyRequest', 'AVPictureInPictureController', 'AVPlayer', 'AVPlayerItem', 'AVPlayerItemAccessLog', 'AVPlayerItemAccessLogEvent', 'AVPlayerItemErrorLog', 'AVPlayerItemErrorLogEvent', 'AVPlayerItemLegibleOutput', 'AVPlayerItemMediaDataCollector', 'AVPlayerItemMetadataCollector', 'AVPlayerItemMetadataOutput', 'AVPlayerItemOutput', 'AVPlayerItemTrack', 'AVPlayerItemVideoOutput', 'AVPlayerLayer', 'AVPlayerLooper', 'AVPlayerMediaSelectionCriteria', 'AVPlayerViewController', 'AVPortraitEffectsMatte', 'AVQueuePlayer', 'AVRouteDetector', 'AVRoutePickerView', 'AVSampleBufferAudioRenderer', 'AVSampleBufferDisplayLayer', 'AVSampleBufferRenderSynchronizer', 'AVSemanticSegmentationMatte', 'AVSynchronizedLayer', 'AVTextStyleRule', 'AVTimedMetadataGroup', 'AVURLAsset', 'AVVideoComposition', 'AVVideoCompositionCoreAnimationTool', 'AVVideoCompositionInstruction', 'AVVideoCompositionLayerInstruction', 'AVVideoCompositionRenderContext', 'AVVideoCompositionRenderHint', 'AXCustomContent', 'BCChatAction', 'BCChatButton', 'BGAppRefreshTask', 'BGAppRefreshTaskRequest', 'BGProcessingTask', 'BGProcessingTaskRequest', 'BGTask', 'BGTaskRequest', 'BGTaskScheduler', 'CAAnimation', 'CAAnimationGroup', 'CABTMIDICentralViewController', 'CABTMIDILocalPeripheralViewController', 'CABasicAnimation', 'CADisplayLink', 'CAEAGLLayer', 'CAEmitterCell', 'CAEmitterLayer', 'CAGradientLayer', 'CAInterAppAudioSwitcherView', 'CAInterAppAudioTransportView', 'CAKeyframeAnimation', 'CALayer', 'CAMediaTimingFunction', 'CAMetalLayer', 'CAPropertyAnimation', 'CAReplicatorLayer', 'CAScrollLayer', 'CAShapeLayer', 'CASpringAnimation', 'CATextLayer', 'CATiledLayer', 'CATransaction', 'CATransformLayer', 'CATransition', 'CAValueFunction', 'CBATTRequest', 'CBAttribute', 'CBCentral', 'CBCentralManager', 'CBCharacteristic', 'CBDescriptor', 'CBL2CAPChannel', 'CBManager', 'CBMutableCharacteristic', 'CBMutableDescriptor', 'CBMutableService', 'CBPeer', 'CBPeripheral', 'CBPeripheralManager', 'CBService', 'CBUUID', 'CHHapticDynamicParameter', 'CHHapticEngine', 'CHHapticEvent', 'CHHapticEventParameter', 'CHHapticParameterCurve', 'CHHapticParameterCurveControlPoint', 'CHHapticPattern', 'CIAztecCodeDescriptor', 'CIBarcodeDescriptor', 'CIBlendKernel', 'CIColor', 'CIColorKernel', 'CIContext', 'CIDataMatrixCodeDescriptor', 'CIDetector', 'CIFaceFeature', 'CIFeature', 'CIFilter', 'CIFilterGenerator', 'CIFilterShape', 'CIImage', 'CIImageAccumulator', 'CIImageProcessorKernel', 'CIKernel', 'CIPDF417CodeDescriptor', 'CIPlugIn', 'CIQRCodeDescriptor', 'CIQRCodeFeature', 'CIRectangleFeature', 'CIRenderDestination', 'CIRenderInfo', 'CIRenderTask', 'CISampler', 'CITextFeature', 'CIVector', 'CIWarpKernel', 'CKAcceptSharesOperation', 'CKAsset', 'CKContainer', 'CKDatabase', 'CKDatabaseNotification', 'CKDatabaseOperation', 'CKDatabaseSubscription', 'CKDiscoverAllUserIdentitiesOperation', 'CKDiscoverUserIdentitiesOperation', 'CKFetchDatabaseChangesOperation', 'CKFetchNotificationChangesOperation', 'CKFetchRecordChangesOperation', 'CKFetchRecordZoneChangesConfiguration', 'CKFetchRecordZoneChangesOperation', 'CKFetchRecordZoneChangesOptions', 'CKFetchRecordZonesOperation', 'CKFetchRecordsOperation', 'CKFetchShareMetadataOperation', 'CKFetchShareParticipantsOperation', 'CKFetchSubscriptionsOperation', 'CKFetchWebAuthTokenOperation', 'CKLocationSortDescriptor', 'CKMarkNotificationsReadOperation', 'CKModifyBadgeOperation', 'CKModifyRecordZonesOperation', 'CKModifyRecordsOperation', 'CKModifySubscriptionsOperation', 'CKNotification', 'CKNotificationID', 'CKNotificationInfo', 'CKOperation', 'CKOperationConfiguration', 'CKOperationGroup', 'CKQuery', 'CKQueryCursor', 'CKQueryNotification', 'CKQueryOperation', 'CKQuerySubscription', 'CKRecord', 'CKRecordID', 'CKRecordZone', 'CKRecordZoneID', 'CKRecordZoneNotification', 'CKRecordZoneSubscription', 'CKReference', 'CKServerChangeToken', 'CKShare', 'CKShareMetadata', 'CKShareParticipant', 'CKSubscription', 'CKUserIdentity', 'CKUserIdentityLookupInfo', 'CLBeacon', 'CLBeaconIdentityConstraint', 'CLBeaconRegion', 'CLCircularRegion', 'CLFloor', 'CLGeocoder', 'CLHeading', 'CLKComplication', 'CLKComplicationDescriptor', 'CLKComplicationServer', 'CLKComplicationTemplate', 'CLKComplicationTemplateCircularSmallRingImage', 'CLKComplicationTemplateCircularSmallRingText', 'CLKComplicationTemplateCircularSmallSimpleImage', 'CLKComplicationTemplateCircularSmallSimpleText', 'CLKComplicationTemplateCircularSmallStackImage', 'CLKComplicationTemplateCircularSmallStackText', 'CLKComplicationTemplateExtraLargeColumnsText', 'CLKComplicationTemplateExtraLargeRingImage', 'CLKComplicationTemplateExtraLargeRingText', 'CLKComplicationTemplateExtraLargeSimpleImage', 'CLKComplicationTemplateExtraLargeSimpleText', 'CLKComplicationTemplateExtraLargeStackImage', 'CLKComplicationTemplateExtraLargeStackText', 'CLKComplicationTemplateGraphicBezelCircularText', 'CLKComplicationTemplateGraphicCircular', 'CLKComplicationTemplateGraphicCircularClosedGaugeImage', 'CLKComplicationTemplateGraphicCircularClosedGaugeText', 'CLKComplicationTemplateGraphicCircularImage', 'CLKComplicationTemplateGraphicCircularOpenGaugeImage', 'CLKComplicationTemplateGraphicCircularOpenGaugeRangeText', 'CLKComplicationTemplateGraphicCircularOpenGaugeSimpleText', 'CLKComplicationTemplateGraphicCircularStackImage', 'CLKComplicationTemplateGraphicCircularStackText', 'CLKComplicationTemplateGraphicCornerCircularImage', 'CLKComplicationTemplateGraphicCornerGaugeImage', 'CLKComplicationTemplateGraphicCornerGaugeText', 'CLKComplicationTemplateGraphicCornerStackText', 'CLKComplicationTemplateGraphicCornerTextImage', 'CLKComplicationTemplateGraphicExtraLargeCircular', 'CLKComplicationTemplateGraphicExtraLargeCircularClosedGaugeImage', 'CLKComplicationTemplateGraphicExtraLargeCircularClosedGaugeText', 'CLKComplicationTemplateGraphicExtraLargeCircularImage', 'CLKComplicationTemplateGraphicExtraLargeCircularOpenGaugeImage', 'CLKComplicationTemplateGraphicExtraLargeCircularOpenGaugeRangeText', 'CLKComplicationTemplateGraphicExtraLargeCircularOpenGaugeSimpleText', 'CLKComplicationTemplateGraphicExtraLargeCircularStackImage', 'CLKComplicationTemplateGraphicExtraLargeCircularStackText', 'CLKComplicationTemplateGraphicRectangularFullImage', 'CLKComplicationTemplateGraphicRectangularLargeImage', 'CLKComplicationTemplateGraphicRectangularStandardBody', 'CLKComplicationTemplateGraphicRectangularTextGauge', 'CLKComplicationTemplateModularLargeColumns', 'CLKComplicationTemplateModularLargeStandardBody', 'CLKComplicationTemplateModularLargeTable', 'CLKComplicationTemplateModularLargeTallBody', 'CLKComplicationTemplateModularSmallColumnsText', 'CLKComplicationTemplateModularSmallRingImage', 'CLKComplicationTemplateModularSmallRingText', 'CLKComplicationTemplateModularSmallSimpleImage', 'CLKComplicationTemplateModularSmallSimpleText', 'CLKComplicationTemplateModularSmallStackImage', 'CLKComplicationTemplateModularSmallStackText', 'CLKComplicationTemplateUtilitarianLargeFlat', 'CLKComplicationTemplateUtilitarianSmallFlat', 'CLKComplicationTemplateUtilitarianSmallRingImage', 'CLKComplicationTemplateUtilitarianSmallRingText', 'CLKComplicationTemplateUtilitarianSmallSquare', 'CLKComplicationTimelineEntry', 'CLKDateTextProvider', 'CLKFullColorImageProvider', 'CLKGaugeProvider', 'CLKImageProvider', 'CLKRelativeDateTextProvider', 'CLKSimpleGaugeProvider', 'CLKSimpleTextProvider', 'CLKTextProvider', 'CLKTimeIntervalGaugeProvider', 'CLKTimeIntervalTextProvider', 'CLKTimeTextProvider', 'CLKWatchFaceLibrary', 'CLLocation', 'CLLocationManager', 'CLPlacemark', 'CLRegion', 'CLSActivity', 'CLSActivityItem', 'CLSBinaryItem', 'CLSContext', 'CLSDataStore', 'CLSObject', 'CLSProgressReportingCapability', 'CLSQuantityItem', 'CLSScoreItem', 'CLVisit', 'CMAccelerometerData', 'CMAltimeter', 'CMAltitudeData', 'CMAttitude', 'CMDeviceMotion', 'CMDyskineticSymptomResult', 'CMFallDetectionEvent', 'CMFallDetectionManager', 'CMGyroData', 'CMHeadphoneMotionManager', 'CMLogItem', 'CMMagnetometerData', 'CMMotionActivity', 'CMMotionActivityManager', 'CMMotionManager', 'CMMovementDisorderManager', 'CMPedometer', 'CMPedometerData', 'CMPedometerEvent', 'CMRecordedAccelerometerData', 'CMRecordedRotationRateData', 'CMRotationRateData', 'CMSensorDataList', 'CMSensorRecorder', 'CMStepCounter', 'CMTremorResult', 'CNChangeHistoryAddContactEvent', 'CNChangeHistoryAddGroupEvent', 'CNChangeHistoryAddMemberToGroupEvent', 'CNChangeHistoryAddSubgroupToGroupEvent', 'CNChangeHistoryDeleteContactEvent', 'CNChangeHistoryDeleteGroupEvent', 'CNChangeHistoryDropEverythingEvent', 'CNChangeHistoryEvent', 'CNChangeHistoryFetchRequest', 'CNChangeHistoryRemoveMemberFromGroupEvent', 'CNChangeHistoryRemoveSubgroupFromGroupEvent', 'CNChangeHistoryUpdateContactEvent', 'CNChangeHistoryUpdateGroupEvent', 'CNContact', 'CNContactFetchRequest', 'CNContactFormatter', 'CNContactPickerViewController', 'CNContactProperty', 'CNContactRelation', 'CNContactStore', 'CNContactVCardSerialization', 'CNContactViewController', 'CNContactsUserDefaults', 'CNContainer', 'CNFetchRequest', 'CNFetchResult', 'CNGroup', 'CNInstantMessageAddress', 'CNLabeledValue', 'CNMutableContact', 'CNMutableGroup', 'CNMutablePostalAddress', 'CNPhoneNumber', 'CNPostalAddress', 'CNPostalAddressFormatter', 'CNSaveRequest', 'CNSocialProfile', 'CPActionSheetTemplate', 'CPAlertAction', 'CPAlertTemplate', 'CPBarButton', 'CPButton', 'CPContact', 'CPContactCallButton', 'CPContactDirectionsButton', 'CPContactMessageButton', 'CPContactTemplate', 'CPDashboardButton', 'CPDashboardController', 'CPGridButton', 'CPGridTemplate', 'CPImageSet', 'CPInformationItem', 'CPInformationRatingItem', 'CPInformationTemplate', 'CPInterfaceController', 'CPListImageRowItem', 'CPListItem', 'CPListSection', 'CPListTemplate', 'CPManeuver', 'CPMapButton', 'CPMapTemplate', 'CPMessageComposeBarButton', 'CPMessageListItem', 'CPMessageListItemLeadingConfiguration', 'CPMessageListItemTrailingConfiguration', 'CPNavigationAlert', 'CPNavigationSession', 'CPNowPlayingAddToLibraryButton', 'CPNowPlayingButton', 'CPNowPlayingImageButton', 'CPNowPlayingMoreButton', 'CPNowPlayingPlaybackRateButton', 'CPNowPlayingRepeatButton', 'CPNowPlayingShuffleButton', 'CPNowPlayingTemplate', 'CPPointOfInterest', 'CPPointOfInterestTemplate', 'CPRouteChoice', 'CPSearchTemplate', 'CPSessionConfiguration', 'CPTabBarTemplate', 'CPTemplate', 'CPTemplateApplicationDashboardScene', 'CPTemplateApplicationScene', 'CPTextButton', 'CPTravelEstimates', 'CPTrip', 'CPTripPreviewTextConfiguration', 'CPVoiceControlState', 'CPVoiceControlTemplate', 'CPWindow', 'CSCustomAttributeKey', 'CSIndexExtensionRequestHandler', 'CSLocalizedString', 'CSPerson', 'CSSearchQuery', 'CSSearchableIndex', 'CSSearchableItem', 'CSSearchableItemAttributeSet', 'CTCall', 'CTCallCenter', 'CTCarrier', 'CTCellularData', 'CTCellularPlanProvisioning', 'CTCellularPlanProvisioningRequest', 'CTSubscriber', 'CTSubscriberInfo', 'CTTelephonyNetworkInfo', 'CXAction', 'CXAnswerCallAction', 'CXCall', 'CXCallAction', 'CXCallController', 'CXCallDirectoryExtensionContext', 'CXCallDirectoryManager', 'CXCallDirectoryProvider', 'CXCallObserver', 'CXCallUpdate', 'CXEndCallAction', 'CXHandle', 'CXPlayDTMFCallAction', 'CXProvider', 'CXProviderConfiguration', 'CXSetGroupCallAction', 'CXSetHeldCallAction', 'CXSetMutedCallAction', 'CXStartCallAction', 'CXTransaction', 'DCAppAttestService', 'DCDevice', 'EAAccessory', 'EAAccessoryManager', 'EAGLContext', 'EAGLSharegroup', 'EASession', 'EAWiFiUnconfiguredAccessory', 'EAWiFiUnconfiguredAccessoryBrowser', 'EKAlarm', 'EKCalendar', 'EKCalendarChooser', 'EKCalendarItem', 'EKEvent', 'EKEventEditViewController', 'EKEventStore', 'EKEventViewController', 'EKObject', 'EKParticipant', 'EKRecurrenceDayOfWeek', 'EKRecurrenceEnd', 'EKRecurrenceRule', 'EKReminder', 'EKSource', 'EKStructuredLocation', 'ENExposureConfiguration', 'ENExposureDaySummary', 'ENExposureDetectionSummary', 'ENExposureInfo', 'ENExposureSummaryItem', 'ENExposureWindow', 'ENManager', 'ENScanInstance', 'ENTemporaryExposureKey', 'EntityRotationGestureRecognizer', 'EntityScaleGestureRecognizer', 'EntityTranslationGestureRecognizer', 'FPUIActionExtensionContext', 'FPUIActionExtensionViewController', 'GCColor', 'GCController', 'GCControllerAxisInput', 'GCControllerButtonInput', 'GCControllerDirectionPad', 'GCControllerElement', 'GCControllerTouchpad', 'GCDeviceBattery', 'GCDeviceCursor', 'GCDeviceHaptics', 'GCDeviceLight', 'GCDirectionalGamepad', 'GCDualShockGamepad', 'GCEventViewController', 'GCExtendedGamepad', 'GCExtendedGamepadSnapshot', 'GCGamepad', 'GCGamepadSnapshot', 'GCKeyboard', 'GCKeyboardInput', 'GCMicroGamepad', 'GCMicroGamepadSnapshot', 'GCMotion', 'GCMouse', 'GCMouseInput', 'GCPhysicalInputProfile', 'GCXboxGamepad', 'GKARC4RandomSource', 'GKAccessPoint', 'GKAchievement', 'GKAchievementChallenge', 'GKAchievementDescription', 'GKAchievementViewController', 'GKAgent', 'GKAgent2D', 'GKAgent3D', 'GKBasePlayer', 'GKBehavior', 'GKBillowNoiseSource', 'GKChallenge', 'GKChallengeEventHandler', 'GKCheckerboardNoiseSource', 'GKCircleObstacle', 'GKCloudPlayer', 'GKCoherentNoiseSource', 'GKComponent', 'GKComponentSystem', 'GKCompositeBehavior', 'GKConstantNoiseSource', 'GKCylindersNoiseSource', 'GKDecisionNode', 'GKDecisionTree', 'GKEntity', 'GKFriendRequestComposeViewController', 'GKGameCenterViewController', 'GKGameSession', 'GKGameSessionSharingViewController', 'GKGaussianDistribution', 'GKGoal', 'GKGraph', 'GKGraphNode', 'GKGraphNode2D', 'GKGraphNode3D', 'GKGridGraph', 'GKGridGraphNode', 'GKInvite', 'GKLeaderboard', 'GKLeaderboardEntry', 'GKLeaderboardScore', 'GKLeaderboardSet', 'GKLeaderboardViewController', 'GKLinearCongruentialRandomSource', 'GKLocalPlayer', 'GKMatch', 'GKMatchRequest', 'GKMatchmaker', 'GKMatchmakerViewController', 'GKMersenneTwisterRandomSource', 'GKMeshGraph', 'GKMinmaxStrategist', 'GKMonteCarloStrategist', 'GKNSPredicateRule', 'GKNoise', 'GKNoiseMap', 'GKNoiseSource', 'GKNotificationBanner', 'GKObstacle', 'GKObstacleGraph', 'GKOctree', 'GKOctreeNode', 'GKPath', 'GKPeerPickerController', 'GKPerlinNoiseSource', 'GKPlayer', 'GKPolygonObstacle', 'GKQuadtree', 'GKQuadtreeNode', 'GKRTree', 'GKRandomDistribution', 'GKRandomSource', 'GKRidgedNoiseSource', 'GKRule', 'GKRuleSystem', 'GKSCNNodeComponent', 'GKSKNodeComponent', 'GKSavedGame', 'GKScene', 'GKScore', 'GKScoreChallenge', 'GKSession', 'GKShuffledDistribution', 'GKSphereObstacle', 'GKSpheresNoiseSource', 'GKState', 'GKStateMachine', 'GKTurnBasedEventHandler', 'GKTurnBasedExchangeReply', 'GKTurnBasedMatch', 'GKTurnBasedMatchmakerViewController', 'GKTurnBasedParticipant', 'GKVoiceChat', 'GKVoiceChatService', 'GKVoronoiNoiseSource', 'GLKBaseEffect', 'GLKEffectProperty', 'GLKEffectPropertyFog', 'GLKEffectPropertyLight', 'GLKEffectPropertyMaterial', 'GLKEffectPropertyTexture', 'GLKEffectPropertyTransform', 'GLKMesh', 'GLKMeshBuffer', 'GLKMeshBufferAllocator', 'GLKReflectionMapEffect', 'GLKSkyboxEffect', 'GLKSubmesh', 'GLKTextureInfo', 'GLKTextureLoader', 'GLKView', 'GLKViewController', 'HKActivityMoveModeObject', 'HKActivityRingView', 'HKActivitySummary', 'HKActivitySummaryQuery', 'HKActivitySummaryType', 'HKAnchoredObjectQuery', 'HKAudiogramSample', 'HKAudiogramSampleType', 'HKAudiogramSensitivityPoint', 'HKBiologicalSexObject', 'HKBloodTypeObject', 'HKCDADocument', 'HKCDADocumentSample', 'HKCategorySample', 'HKCategoryType', 'HKCharacteristicType', 'HKClinicalRecord', 'HKClinicalType', 'HKCorrelation', 'HKCorrelationQuery', 'HKCorrelationType', 'HKCumulativeQuantitySample', 'HKCumulativeQuantitySeriesSample', 'HKDeletedObject', 'HKDevice', 'HKDiscreteQuantitySample', 'HKDocumentQuery', 'HKDocumentSample', 'HKDocumentType', 'HKElectrocardiogram', 'HKElectrocardiogramQuery', 'HKElectrocardiogramType', 'HKElectrocardiogramVoltageMeasurement', 'HKFHIRResource', 'HKFHIRVersion', 'HKFitzpatrickSkinTypeObject', 'HKHealthStore', 'HKHeartbeatSeriesBuilder', 'HKHeartbeatSeriesQuery', 'HKHeartbeatSeriesSample', 'HKLiveWorkoutBuilder', 'HKLiveWorkoutDataSource', 'HKObject', 'HKObjectType', 'HKObserverQuery', 'HKQuantity', 'HKQuantitySample', 'HKQuantitySeriesSampleBuilder', 'HKQuantitySeriesSampleQuery', 'HKQuantityType', 'HKQuery', 'HKQueryAnchor', 'HKSample', 'HKSampleQuery', 'HKSampleType', 'HKSeriesBuilder', 'HKSeriesSample', 'HKSeriesType', 'HKSource', 'HKSourceQuery', 'HKSourceRevision', 'HKStatistics', 'HKStatisticsCollection', 'HKStatisticsCollectionQuery', 'HKStatisticsQuery', 'HKUnit', 'HKWheelchairUseObject', 'HKWorkout', 'HKWorkoutBuilder', 'HKWorkoutConfiguration', 'HKWorkoutEvent', 'HKWorkoutRoute', 'HKWorkoutRouteBuilder', 'HKWorkoutRouteQuery', 'HKWorkoutSession', 'HKWorkoutType', 'HMAccessControl', 'HMAccessory', 'HMAccessoryBrowser', 'HMAccessoryCategory', 'HMAccessoryOwnershipToken', 'HMAccessoryProfile', 'HMAccessorySetupPayload', 'HMAction', 'HMActionSet', 'HMAddAccessoryRequest', 'HMCalendarEvent', 'HMCameraAudioControl', 'HMCameraControl', 'HMCameraProfile', 'HMCameraSettingsControl', 'HMCameraSnapshot', 'HMCameraSnapshotControl', 'HMCameraSource', 'HMCameraStream', 'HMCameraStreamControl', 'HMCameraView', 'HMCharacteristic', 'HMCharacteristicEvent', 'HMCharacteristicMetadata', 'HMCharacteristicThresholdRangeEvent', 'HMCharacteristicWriteAction', 'HMDurationEvent', 'HMEvent', 'HMEventTrigger', 'HMHome', 'HMHomeAccessControl', 'HMHomeManager', 'HMLocationEvent', 'HMMutableCalendarEvent', 'HMMutableCharacteristicEvent', 'HMMutableCharacteristicThresholdRangeEvent', 'HMMutableDurationEvent', 'HMMutableLocationEvent', 'HMMutablePresenceEvent', 'HMMutableSignificantTimeEvent', 'HMNetworkConfigurationProfile', 'HMNumberRange', 'HMPresenceEvent', 'HMRoom', 'HMService', 'HMServiceGroup', 'HMSignificantTimeEvent', 'HMTimeEvent', 'HMTimerTrigger', 'HMTrigger', 'HMUser', 'HMZone', 'ICCameraDevice', 'ICCameraFile', 'ICCameraFolder', 'ICCameraItem', 'ICDevice', 'ICDeviceBrowser', 'ICScannerBandData', 'ICScannerDevice', 'ICScannerFeature', 'ICScannerFeatureBoolean', 'ICScannerFeatureEnumeration', 'ICScannerFeatureRange', 'ICScannerFeatureTemplate', 'ICScannerFunctionalUnit', 'ICScannerFunctionalUnitDocumentFeeder', 'ICScannerFunctionalUnitFlatbed', 'ICScannerFunctionalUnitNegativeTransparency', 'ICScannerFunctionalUnitPositiveTransparency', 'ILCallClassificationRequest', 'ILCallCommunication', 'ILClassificationRequest', 'ILClassificationResponse', 'ILClassificationUIExtensionContext', 'ILClassificationUIExtensionViewController', 'ILCommunication', 'ILMessageClassificationRequest', 'ILMessageCommunication', 'ILMessageFilterExtension', 'ILMessageFilterExtensionContext', 'ILMessageFilterQueryRequest', 'ILMessageFilterQueryResponse', 'ILNetworkResponse', 'INAccountTypeResolutionResult', 'INActivateCarSignalIntent', 'INActivateCarSignalIntentResponse', 'INAddMediaIntent', 'INAddMediaIntentResponse', 'INAddMediaMediaDestinationResolutionResult', 'INAddMediaMediaItemResolutionResult', 'INAddTasksIntent', 'INAddTasksIntentResponse', 'INAddTasksTargetTaskListResolutionResult', 'INAddTasksTemporalEventTriggerResolutionResult', 'INAirline', 'INAirport', 'INAirportGate', 'INAppendToNoteIntent', 'INAppendToNoteIntentResponse', 'INBalanceAmount', 'INBalanceTypeResolutionResult', 'INBillDetails', 'INBillPayee', 'INBillPayeeResolutionResult', 'INBillTypeResolutionResult', 'INBoatReservation', 'INBoatTrip', 'INBookRestaurantReservationIntent', 'INBookRestaurantReservationIntentResponse', 'INBooleanResolutionResult', 'INBusReservation', 'INBusTrip', 'INCallCapabilityResolutionResult', 'INCallDestinationTypeResolutionResult', 'INCallRecord', 'INCallRecordFilter', 'INCallRecordResolutionResult', 'INCallRecordTypeOptionsResolutionResult', 'INCallRecordTypeResolutionResult', 'INCancelRideIntent', 'INCancelRideIntentResponse', 'INCancelWorkoutIntent', 'INCancelWorkoutIntentResponse', 'INCar', 'INCarAirCirculationModeResolutionResult', 'INCarAudioSourceResolutionResult', 'INCarDefrosterResolutionResult', 'INCarHeadUnit', 'INCarSeatResolutionResult', 'INCarSignalOptionsResolutionResult', 'INCreateNoteIntent', 'INCreateNoteIntentResponse', 'INCreateTaskListIntent', 'INCreateTaskListIntentResponse', 'INCurrencyAmount', 'INCurrencyAmountResolutionResult', 'INDailyRoutineRelevanceProvider', 'INDateComponentsRange', 'INDateComponentsRangeResolutionResult', 'INDateComponentsResolutionResult', 'INDateRelevanceProvider', 'INDateSearchTypeResolutionResult', 'INDefaultCardTemplate', 'INDeleteTasksIntent', 'INDeleteTasksIntentResponse', 'INDeleteTasksTaskListResolutionResult', 'INDeleteTasksTaskResolutionResult', 'INDoubleResolutionResult', 'INEndWorkoutIntent', 'INEndWorkoutIntentResponse', 'INEnergyResolutionResult', 'INEnumResolutionResult', 'INExtension', 'INFile', 'INFileResolutionResult', 'INFlight', 'INFlightReservation', 'INGetAvailableRestaurantReservationBookingDefaultsIntent', 'INGetAvailableRestaurantReservationBookingDefaultsIntentResponse', 'INGetAvailableRestaurantReservationBookingsIntent', 'INGetAvailableRestaurantReservationBookingsIntentResponse', 'INGetCarLockStatusIntent', 'INGetCarLockStatusIntentResponse', 'INGetCarPowerLevelStatusIntent', 'INGetCarPowerLevelStatusIntentResponse', 'INGetReservationDetailsIntent', 'INGetReservationDetailsIntentResponse', 'INGetRestaurantGuestIntent', 'INGetRestaurantGuestIntentResponse', 'INGetRideStatusIntent', 'INGetRideStatusIntentResponse', 'INGetUserCurrentRestaurantReservationBookingsIntent', 'INGetUserCurrentRestaurantReservationBookingsIntentResponse', 'INGetVisualCodeIntent', 'INGetVisualCodeIntentResponse', 'INImage', 'INImageNoteContent', 'INIntegerResolutionResult', 'INIntent', 'INIntentResolutionResult', 'INIntentResponse', 'INInteraction', 'INLengthResolutionResult', 'INListCarsIntent', 'INListCarsIntentResponse', 'INListRideOptionsIntent', 'INListRideOptionsIntentResponse', 'INLocationRelevanceProvider', 'INLocationSearchTypeResolutionResult', 'INLodgingReservation', 'INMassResolutionResult', 'INMediaAffinityTypeResolutionResult', 'INMediaDestination', 'INMediaDestinationResolutionResult', 'INMediaItem', 'INMediaItemResolutionResult', 'INMediaSearch', 'INMediaUserContext', 'INMessage', 'INMessageAttributeOptionsResolutionResult', 'INMessageAttributeResolutionResult', 'INNote', 'INNoteContent', 'INNoteContentResolutionResult', 'INNoteContentTypeResolutionResult', 'INNoteResolutionResult', 'INNotebookItemTypeResolutionResult', 'INObject', 'INObjectCollection', 'INObjectResolutionResult', 'INObjectSection', 'INOutgoingMessageTypeResolutionResult', 'INParameter', 'INPauseWorkoutIntent', 'INPauseWorkoutIntentResponse', 'INPayBillIntent', 'INPayBillIntentResponse', 'INPaymentAccount', 'INPaymentAccountResolutionResult', 'INPaymentAmount', 'INPaymentAmountResolutionResult', 'INPaymentMethod', 'INPaymentMethodResolutionResult', 'INPaymentRecord', 'INPaymentStatusResolutionResult', 'INPerson', 'INPersonHandle', 'INPersonResolutionResult', 'INPlacemarkResolutionResult', 'INPlayMediaIntent', 'INPlayMediaIntentResponse', 'INPlayMediaMediaItemResolutionResult', 'INPlayMediaPlaybackSpeedResolutionResult', 'INPlaybackQueueLocationResolutionResult', 'INPlaybackRepeatModeResolutionResult', 'INPreferences', 'INPriceRange', 'INRadioTypeResolutionResult', 'INRecurrenceRule', 'INRelativeReferenceResolutionResult', 'INRelativeSettingResolutionResult', 'INRelevanceProvider', 'INRelevantShortcut', 'INRelevantShortcutStore', 'INRentalCar', 'INRentalCarReservation', 'INRequestPaymentCurrencyAmountResolutionResult', 'INRequestPaymentIntent', 'INRequestPaymentIntentResponse', 'INRequestPaymentPayerResolutionResult', 'INRequestRideIntent', 'INRequestRideIntentResponse', 'INReservation', 'INReservationAction', 'INRestaurant', 'INRestaurantGuest', 'INRestaurantGuestDisplayPreferences', 'INRestaurantGuestResolutionResult', 'INRestaurantOffer', 'INRestaurantReservation', 'INRestaurantReservationBooking', 'INRestaurantReservationUserBooking', 'INRestaurantResolutionResult', 'INResumeWorkoutIntent', 'INResumeWorkoutIntentResponse', 'INRideCompletionStatus', 'INRideDriver', 'INRideFareLineItem', 'INRideOption', 'INRidePartySizeOption', 'INRideStatus', 'INRideVehicle', 'INSaveProfileInCarIntent', 'INSaveProfileInCarIntentResponse', 'INSearchCallHistoryIntent', 'INSearchCallHistoryIntentResponse', 'INSearchForAccountsIntent', 'INSearchForAccountsIntentResponse', 'INSearchForBillsIntent', 'INSearchForBillsIntentResponse', 'INSearchForMediaIntent', 'INSearchForMediaIntentResponse', 'INSearchForMediaMediaItemResolutionResult', 'INSearchForMessagesIntent', 'INSearchForMessagesIntentResponse', 'INSearchForNotebookItemsIntent', 'INSearchForNotebookItemsIntentResponse', 'INSearchForPhotosIntent', 'INSearchForPhotosIntentResponse', 'INSeat', 'INSendMessageAttachment', 'INSendMessageIntent', 'INSendMessageIntentResponse', 'INSendMessageRecipientResolutionResult', 'INSendPaymentCurrencyAmountResolutionResult', 'INSendPaymentIntent', 'INSendPaymentIntentResponse', 'INSendPaymentPayeeResolutionResult', 'INSendRideFeedbackIntent', 'INSendRideFeedbackIntentResponse', 'INSetAudioSourceInCarIntent', 'INSetAudioSourceInCarIntentResponse', 'INSetCarLockStatusIntent', 'INSetCarLockStatusIntentResponse', 'INSetClimateSettingsInCarIntent', 'INSetClimateSettingsInCarIntentResponse', 'INSetDefrosterSettingsInCarIntent', 'INSetDefrosterSettingsInCarIntentResponse', 'INSetMessageAttributeIntent', 'INSetMessageAttributeIntentResponse', 'INSetProfileInCarIntent', 'INSetProfileInCarIntentResponse', 'INSetRadioStationIntent', 'INSetRadioStationIntentResponse', 'INSetSeatSettingsInCarIntent', 'INSetSeatSettingsInCarIntentResponse', 'INSetTaskAttributeIntent', 'INSetTaskAttributeIntentResponse', 'INSetTaskAttributeTemporalEventTriggerResolutionResult', 'INShortcut', 'INSnoozeTasksIntent', 'INSnoozeTasksIntentResponse', 'INSnoozeTasksTaskResolutionResult', 'INSpatialEventTrigger', 'INSpatialEventTriggerResolutionResult', 'INSpeakableString', 'INSpeakableStringResolutionResult', 'INSpeedResolutionResult', 'INStartAudioCallIntent', 'INStartAudioCallIntentResponse', 'INStartCallCallCapabilityResolutionResult', 'INStartCallCallRecordToCallBackResolutionResult', 'INStartCallContactResolutionResult', 'INStartCallIntent', 'INStartCallIntentResponse', 'INStartPhotoPlaybackIntent', 'INStartPhotoPlaybackIntentResponse', 'INStartVideoCallIntent', 'INStartVideoCallIntentResponse', 'INStartWorkoutIntent', 'INStartWorkoutIntentResponse', 'INStringResolutionResult', 'INTask', 'INTaskList', 'INTaskListResolutionResult', 'INTaskPriorityResolutionResult', 'INTaskResolutionResult', 'INTaskStatusResolutionResult', 'INTemperatureResolutionResult', 'INTemporalEventTrigger', 'INTemporalEventTriggerResolutionResult', 'INTemporalEventTriggerTypeOptionsResolutionResult', 'INTermsAndConditions', 'INTextNoteContent', 'INTicketedEvent', 'INTicketedEventReservation', 'INTimeIntervalResolutionResult', 'INTrainReservation', 'INTrainTrip', 'INTransferMoneyIntent', 'INTransferMoneyIntentResponse', 'INUIAddVoiceShortcutButton', 'INUIAddVoiceShortcutViewController', 'INUIEditVoiceShortcutViewController', 'INURLResolutionResult', 'INUpcomingMediaManager', 'INUpdateMediaAffinityIntent', 'INUpdateMediaAffinityIntentResponse', 'INUpdateMediaAffinityMediaItemResolutionResult', 'INUserContext', 'INVisualCodeTypeResolutionResult', 'INVocabulary', 'INVoiceShortcut', 'INVoiceShortcutCenter', 'INVolumeResolutionResult', 'INWorkoutGoalUnitTypeResolutionResult', 'INWorkoutLocationTypeResolutionResult', 'IOSurface', 'JSContext', 'JSManagedValue', 'JSValue', 'JSVirtualMachine', 'LAContext', 'LPLinkMetadata', 'LPLinkView', 'LPMetadataProvider', 'MCAdvertiserAssistant', 'MCBrowserViewController', 'MCNearbyServiceAdvertiser', 'MCNearbyServiceBrowser', 'MCPeerID', 'MCSession', 'MDLAnimatedMatrix4x4', 'MDLAnimatedQuaternion', 'MDLAnimatedQuaternionArray', 'MDLAnimatedScalar', 'MDLAnimatedScalarArray', 'MDLAnimatedValue', 'MDLAnimatedVector2', 'MDLAnimatedVector3', 'MDLAnimatedVector3Array', 'MDLAnimatedVector4', 'MDLAnimationBindComponent', 'MDLAreaLight', 'MDLAsset', 'MDLBundleAssetResolver', 'MDLCamera', 'MDLCheckerboardTexture', 'MDLColorSwatchTexture', 'MDLLight', 'MDLLightProbe', 'MDLMaterial', 'MDLMaterialProperty', 'MDLMaterialPropertyConnection', 'MDLMaterialPropertyGraph', 'MDLMaterialPropertyNode', 'MDLMatrix4x4Array', 'MDLMesh', 'MDLMeshBufferData', 'MDLMeshBufferDataAllocator', 'MDLMeshBufferMap', 'MDLMeshBufferZoneDefault', 'MDLNoiseTexture', 'MDLNormalMapTexture', 'MDLObject', 'MDLObjectContainer', 'MDLPackedJointAnimation', 'MDLPathAssetResolver', 'MDLPhotometricLight', 'MDLPhysicallyPlausibleLight', 'MDLPhysicallyPlausibleScatteringFunction', 'MDLRelativeAssetResolver', 'MDLScatteringFunction', 'MDLSkeleton', 'MDLSkyCubeTexture', 'MDLStereoscopicCamera', 'MDLSubmesh', 'MDLSubmeshTopology', 'MDLTexture', 'MDLTextureFilter', 'MDLTextureSampler', 'MDLTransform', 'MDLTransformMatrixOp', 'MDLTransformOrientOp', 'MDLTransformRotateOp', 'MDLTransformRotateXOp', 'MDLTransformRotateYOp', 'MDLTransformRotateZOp', 'MDLTransformScaleOp', 'MDLTransformStack', 'MDLTransformTranslateOp', 'MDLURLTexture', 'MDLVertexAttribute', 'MDLVertexAttributeData', 'MDLVertexBufferLayout', 'MDLVertexDescriptor', 'MDLVoxelArray', 'MFMailComposeViewController', 'MFMessageComposeViewController', 'MIDICIDeviceInfo', 'MIDICIDiscoveredNode', 'MIDICIDiscoveryManager', 'MIDICIProfile', 'MIDICIProfileState', 'MIDICIResponder', 'MIDICISession', 'MIDINetworkConnection', 'MIDINetworkHost', 'MIDINetworkSession', 'MKAnnotationView', 'MKCircle', 'MKCircleRenderer', 'MKCircleView', 'MKClusterAnnotation', 'MKCompassButton', 'MKDirections', 'MKDirectionsRequest', 'MKDirectionsResponse', 'MKDistanceFormatter', 'MKETAResponse', 'MKGeoJSONDecoder', 'MKGeoJSONFeature', 'MKGeodesicPolyline', 'MKGradientPolylineRenderer', 'MKLocalPointsOfInterestRequest', 'MKLocalSearch', 'MKLocalSearchCompleter', 'MKLocalSearchCompletion', 'MKLocalSearchRequest', 'MKLocalSearchResponse', 'MKMapCamera', 'MKMapCameraBoundary', 'MKMapCameraZoomRange', 'MKMapItem', 'MKMapSnapshot', 'MKMapSnapshotOptions', 'MKMapSnapshotter', 'MKMapView', 'MKMarkerAnnotationView', 'MKMultiPoint', 'MKMultiPolygon', 'MKMultiPolygonRenderer', 'MKMultiPolyline', 'MKMultiPolylineRenderer', 'MKOverlayPathRenderer', 'MKOverlayPathView', 'MKOverlayRenderer', 'MKOverlayView', 'MKPinAnnotationView', 'MKPitchControl', 'MKPlacemark', 'MKPointAnnotation', 'MKPointOfInterestFilter', 'MKPolygon', 'MKPolygonRenderer', 'MKPolygonView', 'MKPolyline', 'MKPolylineRenderer', 'MKPolylineView', 'MKReverseGeocoder', 'MKRoute', 'MKRouteStep', 'MKScaleView', 'MKShape', 'MKTileOverlay', 'MKTileOverlayRenderer', 'MKUserLocation', 'MKUserLocationView', 'MKUserTrackingBarButtonItem', 'MKUserTrackingButton', 'MKZoomControl', 'MLArrayBatchProvider', 'MLCActivationDescriptor', 'MLCActivationLayer', 'MLCArithmeticLayer', 'MLCBatchNormalizationLayer', 'MLCConcatenationLayer', 'MLCConvolutionDescriptor', 'MLCConvolutionLayer', 'MLCDevice', 'MLCDropoutLayer', 'MLCEmbeddingDescriptor', 'MLCEmbeddingLayer', 'MLCFullyConnectedLayer', 'MLCGramMatrixLayer', 'MLCGraph', 'MLCGroupNormalizationLayer', 'MLCInferenceGraph', 'MLCInstanceNormalizationLayer', 'MLCLSTMDescriptor', 'MLCLSTMLayer', 'MLCLayer', 'MLCLayerNormalizationLayer', 'MLCLossDescriptor', 'MLCLossLayer', 'MLCMatMulDescriptor', 'MLCMatMulLayer', 'MLCMultiheadAttentionDescriptor', 'MLCMultiheadAttentionLayer', 'MLCPaddingLayer', 'MLCPoolingDescriptor', 'MLCPoolingLayer', 'MLCReductionLayer', 'MLCReshapeLayer', 'MLCSliceLayer', 'MLCSoftmaxLayer', 'MLCSplitLayer', 'MLCTensor', 'MLCTensorData', 'MLCTensorDescriptor', 'MLCTensorOptimizerDeviceData', 'MLCTensorParameter', 'MLCTrainingGraph', 'MLCTransposeLayer', 'MLCUpsampleLayer', 'MLCYOLOLossDescriptor', 'MLCYOLOLossLayer', 'MLDictionaryConstraint', 'MLDictionaryFeatureProvider', 'MLFeatureDescription', 'MLFeatureValue', 'MLImageConstraint', 'MLImageSize', 'MLImageSizeConstraint', 'MLKey', 'MLMetricKey', 'MLModel', 'MLModelCollection', 'MLModelCollectionEntry', 'MLModelConfiguration', 'MLModelDescription', 'MLMultiArray', 'MLMultiArrayConstraint', 'MLMultiArrayShapeConstraint', 'MLNumericConstraint', 'MLParameterDescription', 'MLParameterKey', 'MLPredictionOptions', 'MLSequence', 'MLSequenceConstraint', 'MLTask', 'MLUpdateContext', 'MLUpdateProgressHandlers', 'MLUpdateTask', 'MPChangeLanguageOptionCommandEvent', 'MPChangePlaybackPositionCommand', 'MPChangePlaybackPositionCommandEvent', 'MPChangePlaybackRateCommand', 'MPChangePlaybackRateCommandEvent', 'MPChangeRepeatModeCommand', 'MPChangeRepeatModeCommandEvent', 'MPChangeShuffleModeCommand', 'MPChangeShuffleModeCommandEvent', 'MPContentItem', 'MPFeedbackCommand', 'MPFeedbackCommandEvent', 'MPMediaEntity', 'MPMediaItem', 'MPMediaItemArtwork', 'MPMediaItemCollection', 'MPMediaLibrary', 'MPMediaPickerController', 'MPMediaPlaylist', 'MPMediaPlaylistCreationMetadata', 'MPMediaPredicate', 'MPMediaPropertyPredicate', 'MPMediaQuery', 'MPMediaQuerySection', 'MPMovieAccessLog', 'MPMovieAccessLogEvent', 'MPMovieErrorLog', 'MPMovieErrorLogEvent', 'MPMoviePlayerController', 'MPMoviePlayerViewController', 'MPMusicPlayerApplicationController', 'MPMusicPlayerController', 'MPMusicPlayerControllerMutableQueue', 'MPMusicPlayerControllerQueue', 'MPMusicPlayerMediaItemQueueDescriptor', 'MPMusicPlayerPlayParameters', 'MPMusicPlayerPlayParametersQueueDescriptor', 'MPMusicPlayerQueueDescriptor', 'MPMusicPlayerStoreQueueDescriptor', 'MPNowPlayingInfoCenter', 'MPNowPlayingInfoLanguageOption', 'MPNowPlayingInfoLanguageOptionGroup', 'MPNowPlayingSession', 'MPPlayableContentManager', 'MPPlayableContentManagerContext', 'MPRatingCommand', 'MPRatingCommandEvent', 'MPRemoteCommand', 'MPRemoteCommandCenter', 'MPRemoteCommandEvent', 'MPSGraph', 'MPSGraphConvolution2DOpDescriptor', 'MPSGraphDepthwiseConvolution2DOpDescriptor', 'MPSGraphDevice', 'MPSGraphExecutionDescriptor', 'MPSGraphOperation', 'MPSGraphPooling2DOpDescriptor', 'MPSGraphShapedType', 'MPSGraphTensor', 'MPSGraphTensorData', 'MPSGraphVariableOp', 'MPSeekCommandEvent', 'MPSkipIntervalCommand', 'MPSkipIntervalCommandEvent', 'MPTimedMetadata', 'MPVolumeView', 'MSConversation', 'MSMessage', 'MSMessageLayout', 'MSMessageLiveLayout', 'MSMessageTemplateLayout', 'MSMessagesAppViewController', 'MSServiceAccount', 'MSSession', 'MSSetupSession', 'MSSticker', 'MSStickerBrowserView', 'MSStickerBrowserViewController', 'MSStickerView', 'MTKMesh', 'MTKMeshBuffer', 'MTKMeshBufferAllocator', 'MTKSubmesh', 'MTKTextureLoader', 'MTKView', 'MTLAccelerationStructureBoundingBoxGeometryDescriptor', 'MTLAccelerationStructureDescriptor', 'MTLAccelerationStructureGeometryDescriptor', 'MTLAccelerationStructureTriangleGeometryDescriptor', 'MTLArgument', 'MTLArgumentDescriptor', 'MTLArrayType', 'MTLAttribute', 'MTLAttributeDescriptor', 'MTLAttributeDescriptorArray', 'MTLBinaryArchiveDescriptor', 'MTLBlitPassDescriptor', 'MTLBlitPassSampleBufferAttachmentDescriptor', 'MTLBlitPassSampleBufferAttachmentDescriptorArray', 'MTLBufferLayoutDescriptor', 'MTLBufferLayoutDescriptorArray', 'MTLCaptureDescriptor', 'MTLCaptureManager', 'MTLCommandBufferDescriptor', 'MTLCompileOptions', 'MTLComputePassDescriptor', 'MTLComputePassSampleBufferAttachmentDescriptor', 'MTLComputePassSampleBufferAttachmentDescriptorArray', 'MTLComputePipelineDescriptor', 'MTLComputePipelineReflection', 'MTLCounterSampleBufferDescriptor', 'MTLDepthStencilDescriptor', 'MTLFunctionConstant', 'MTLFunctionConstantValues', 'MTLFunctionDescriptor', 'MTLHeapDescriptor', 'MTLIndirectCommandBufferDescriptor', 'MTLInstanceAccelerationStructureDescriptor', 'MTLIntersectionFunctionDescriptor', 'MTLIntersectionFunctionTableDescriptor', 'MTLLinkedFunctions', 'MTLPipelineBufferDescriptor', 'MTLPipelineBufferDescriptorArray', 'MTLPointerType', 'MTLPrimitiveAccelerationStructureDescriptor', 'MTLRasterizationRateLayerArray', 'MTLRasterizationRateLayerDescriptor', 'MTLRasterizationRateMapDescriptor', 'MTLRasterizationRateSampleArray', 'MTLRenderPassAttachmentDescriptor', 'MTLRenderPassColorAttachmentDescriptor', 'MTLRenderPassColorAttachmentDescriptorArray', 'MTLRenderPassDepthAttachmentDescriptor', 'MTLRenderPassDescriptor', 'MTLRenderPassSampleBufferAttachmentDescriptor', 'MTLRenderPassSampleBufferAttachmentDescriptorArray', 'MTLRenderPassStencilAttachmentDescriptor', 'MTLRenderPipelineColorAttachmentDescriptor', 'MTLRenderPipelineColorAttachmentDescriptorArray', 'MTLRenderPipelineDescriptor', 'MTLRenderPipelineReflection', 'MTLResourceStatePassDescriptor', 'MTLResourceStatePassSampleBufferAttachmentDescriptor', 'MTLResourceStatePassSampleBufferAttachmentDescriptorArray', 'MTLSamplerDescriptor', 'MTLSharedEventHandle', 'MTLSharedEventListener', 'MTLSharedTextureHandle', 'MTLStageInputOutputDescriptor', 'MTLStencilDescriptor', 'MTLStructMember', 'MTLStructType', 'MTLTextureDescriptor', 'MTLTextureReferenceType', 'MTLTileRenderPipelineColorAttachmentDescriptor', 'MTLTileRenderPipelineColorAttachmentDescriptorArray', 'MTLTileRenderPipelineDescriptor', 'MTLType', 'MTLVertexAttribute', 'MTLVertexAttributeDescriptor', 'MTLVertexAttributeDescriptorArray', 'MTLVertexBufferLayoutDescriptor', 'MTLVertexBufferLayoutDescriptorArray', 'MTLVertexDescriptor', 'MTLVisibleFunctionTableDescriptor', 'MXAnimationMetric', 'MXAppExitMetric', 'MXAppLaunchMetric', 'MXAppResponsivenessMetric', 'MXAppRunTimeMetric', 'MXAverage', 'MXBackgroundExitData', 'MXCPUExceptionDiagnostic', 'MXCPUMetric', 'MXCallStackTree', 'MXCellularConditionMetric', 'MXCrashDiagnostic', 'MXDiagnostic', 'MXDiagnosticPayload', 'MXDiskIOMetric', 'MXDiskWriteExceptionDiagnostic', 'MXDisplayMetric', 'MXForegroundExitData', 'MXGPUMetric', 'MXHangDiagnostic', 'MXHistogram', 'MXHistogramBucket', 'MXLocationActivityMetric', 'MXMemoryMetric', 'MXMetaData', 'MXMetric', 'MXMetricManager', 'MXMetricPayload', 'MXNetworkTransferMetric', 'MXSignpostIntervalData', 'MXSignpostMetric', 'MXUnitAveragePixelLuminance', 'MXUnitSignalBars', 'MyClass', 'NCWidgetController', 'NEAppProxyFlow', 'NEAppProxyProvider', 'NEAppProxyProviderManager', 'NEAppProxyTCPFlow', 'NEAppProxyUDPFlow', 'NEAppPushManager', 'NEAppPushProvider', 'NEAppRule', 'NEDNSOverHTTPSSettings', 'NEDNSOverTLSSettings', 'NEDNSProxyManager', 'NEDNSProxyProvider', 'NEDNSProxyProviderProtocol', 'NEDNSSettings', 'NEDNSSettingsManager', 'NEEvaluateConnectionRule', 'NEFilterBrowserFlow', 'NEFilterControlProvider', 'NEFilterControlVerdict', 'NEFilterDataProvider', 'NEFilterDataVerdict', 'NEFilterFlow', 'NEFilterManager', 'NEFilterNewFlowVerdict', 'NEFilterPacketContext', 'NEFilterPacketProvider', 'NEFilterProvider', 'NEFilterProviderConfiguration', 'NEFilterRemediationVerdict', 'NEFilterReport', 'NEFilterRule', 'NEFilterSettings', 'NEFilterSocketFlow', 'NEFilterVerdict', 'NEFlowMetaData', 'NEHotspotConfiguration', 'NEHotspotConfigurationManager', 'NEHotspotEAPSettings', 'NEHotspotHS20Settings', 'NEHotspotHelper', 'NEHotspotHelperCommand', 'NEHotspotHelperResponse', 'NEHotspotNetwork', 'NEIPv4Route', 'NEIPv4Settings', 'NEIPv6Route', 'NEIPv6Settings', 'NENetworkRule', 'NEOnDemandRule', 'NEOnDemandRuleConnect', 'NEOnDemandRuleDisconnect', 'NEOnDemandRuleEvaluateConnection', 'NEOnDemandRuleIgnore', 'NEPacket', 'NEPacketTunnelFlow', 'NEPacketTunnelNetworkSettings', 'NEPacketTunnelProvider', 'NEProvider', 'NEProxyServer', 'NEProxySettings', 'NETransparentProxyManager', 'NETransparentProxyNetworkSettings', 'NETransparentProxyProvider', 'NETunnelNetworkSettings', 'NETunnelProvider', 'NETunnelProviderManager', 'NETunnelProviderProtocol', 'NETunnelProviderSession', 'NEVPNConnection', 'NEVPNIKEv2SecurityAssociationParameters', 'NEVPNManager', 'NEVPNProtocol', 'NEVPNProtocolIKEv2', 'NEVPNProtocolIPSec', 'NFCISO15693CustomCommandConfiguration', 'NFCISO15693ReadMultipleBlocksConfiguration', 'NFCISO15693ReaderSession', 'NFCISO7816APDU', 'NFCNDEFMessage', 'NFCNDEFPayload', 'NFCNDEFReaderSession', 'NFCReaderSession', 'NFCTagCommandConfiguration', 'NFCTagReaderSession', 'NFCVASCommandConfiguration', 'NFCVASReaderSession', 'NFCVASResponse', 'NIConfiguration', 'NIDiscoveryToken', 'NINearbyObject', 'NINearbyPeerConfiguration', 'NISession', 'NKAssetDownload', 'NKIssue', 'NKLibrary', 'NLEmbedding', 'NLGazetteer', 'NLLanguageRecognizer', 'NLModel', 'NLModelConfiguration', 'NLTagger', 'NLTokenizer', 'NSArray', 'NSAssertionHandler', 'NSAsynchronousFetchRequest', 'NSAsynchronousFetchResult', 'NSAtomicStore', 'NSAtomicStoreCacheNode', 'NSAttributeDescription', 'NSAttributedString', 'NSAutoreleasePool', 'NSBatchDeleteRequest', 'NSBatchDeleteResult', 'NSBatchInsertRequest', 'NSBatchInsertResult', 'NSBatchUpdateRequest', 'NSBatchUpdateResult', 'NSBlockOperation', 'NSBundle', 'NSBundleResourceRequest', 'NSByteCountFormatter', 'NSCache', 'NSCachedURLResponse', 'NSCalendar', 'NSCharacterSet', 'NSCoder', 'NSCollectionLayoutAnchor', 'NSCollectionLayoutBoundarySupplementaryItem', 'NSCollectionLayoutDecorationItem', 'NSCollectionLayoutDimension', 'NSCollectionLayoutEdgeSpacing', 'NSCollectionLayoutGroup', 'NSCollectionLayoutGroupCustomItem', 'NSCollectionLayoutItem', 'NSCollectionLayoutSection', 'NSCollectionLayoutSize', 'NSCollectionLayoutSpacing', 'NSCollectionLayoutSupplementaryItem', 'NSComparisonPredicate', 'NSCompoundPredicate', 'NSCondition', 'NSConditionLock', 'NSConstantString', 'NSConstraintConflict', 'NSCoreDataCoreSpotlightDelegate', 'NSCountedSet', 'NSData', 'NSDataAsset', 'NSDataDetector', 'NSDate', 'NSDateComponents', 'NSDateComponentsFormatter', 'NSDateFormatter', 'NSDateInterval', 'NSDateIntervalFormatter', 'NSDecimalNumber', 'NSDecimalNumberHandler', 'NSDerivedAttributeDescription', 'NSDictionary', 'NSDiffableDataSourceSectionSnapshot', 'NSDiffableDataSourceSectionTransaction', 'NSDiffableDataSourceSnapshot', 'NSDiffableDataSourceTransaction', 'NSDimension', 'NSDirectoryEnumerator', 'NSEnergyFormatter', 'NSEntityDescription', 'NSEntityMapping', 'NSEntityMigrationPolicy', 'NSEnumerator', 'NSError', 'NSEvent', 'NSException', 'NSExpression', 'NSExpressionDescription', 'NSExtensionContext', 'NSExtensionItem', 'NSFetchIndexDescription', 'NSFetchIndexElementDescription', 'NSFetchRequest', 'NSFetchRequestExpression', 'NSFetchedPropertyDescription', 'NSFetchedResultsController', 'NSFileAccessIntent', 'NSFileCoordinator', 'NSFileHandle', 'NSFileManager', 'NSFileProviderDomain', 'NSFileProviderExtension', 'NSFileProviderManager', 'NSFileProviderService', 'NSFileSecurity', 'NSFileVersion', 'NSFileWrapper', 'NSFormatter', 'NSHTTPCookie', 'NSHTTPCookieStorage', 'NSHTTPURLResponse', 'NSHashTable', 'NSISO8601DateFormatter', 'NSIncrementalStore', 'NSIncrementalStoreNode', 'NSIndexPath', 'NSIndexSet', 'NSInputStream', 'NSInvocation', 'NSInvocationOperation', 'NSItemProvider', 'NSJSONSerialization', 'NSKeyedArchiver', 'NSKeyedUnarchiver', 'NSLayoutAnchor', 'NSLayoutConstraint', 'NSLayoutDimension', 'NSLayoutManager', 'NSLayoutXAxisAnchor', 'NSLayoutYAxisAnchor', 'NSLengthFormatter', 'NSLinguisticTagger', 'NSListFormatter', 'NSLocale', 'NSLock', 'NSMachPort', 'NSManagedObject', 'NSManagedObjectContext', 'NSManagedObjectID', 'NSManagedObjectModel', 'NSMapTable', 'NSMappingModel', 'NSMassFormatter', 'NSMeasurement', 'NSMeasurementFormatter', 'NSMenuToolbarItem', 'NSMergeConflict', 'NSMergePolicy', 'NSMessagePort', 'NSMetadataItem', 'NSMetadataQuery', 'NSMetadataQueryAttributeValueTuple', 'NSMetadataQueryResultGroup', 'NSMethodSignature', 'NSMigrationManager', 'NSMutableArray', 'NSMutableAttributedString', 'NSMutableCharacterSet', 'NSMutableData', 'NSMutableDictionary', 'NSMutableIndexSet', 'NSMutableOrderedSet', 'NSMutableParagraphStyle', 'NSMutableSet', 'NSMutableString', 'NSMutableURLRequest', 'NSNetService', 'NSNetServiceBrowser', 'NSNotification', 'NSNotificationCenter', 'NSNotificationQueue', 'NSNull', 'NSNumber', 'NSNumberFormatter', 'NSObject', 'NSOperation', 'NSOperationQueue', 'NSOrderedCollectionChange', 'NSOrderedCollectionDifference', 'NSOrderedSet', 'NSOrthography', 'NSOutputStream', 'NSParagraphStyle', 'NSPersistentCloudKitContainer', 'NSPersistentCloudKitContainerEvent', 'NSPersistentCloudKitContainerEventRequest', 'NSPersistentCloudKitContainerEventResult', 'NSPersistentCloudKitContainerOptions', 'NSPersistentContainer', 'NSPersistentHistoryChange', 'NSPersistentHistoryChangeRequest', 'NSPersistentHistoryResult', 'NSPersistentHistoryToken', 'NSPersistentHistoryTransaction', 'NSPersistentStore', 'NSPersistentStoreAsynchronousResult', 'NSPersistentStoreCoordinator', 'NSPersistentStoreDescription', 'NSPersistentStoreRequest', 'NSPersistentStoreResult', 'NSPersonNameComponents', 'NSPersonNameComponentsFormatter', 'NSPipe', 'NSPointerArray', 'NSPointerFunctions', 'NSPort', 'NSPredicate', 'NSProcessInfo', 'NSProgress', 'NSPropertyDescription', 'NSPropertyListSerialization', 'NSPropertyMapping', 'NSProxy', 'NSPurgeableData', 'NSQueryGenerationToken', 'NSRecursiveLock', 'NSRegularExpression', 'NSRelationshipDescription', 'NSRelativeDateTimeFormatter', 'NSRunLoop', 'NSSaveChangesRequest', 'NSScanner', 'NSSecureUnarchiveFromDataTransformer', 'NSSet', 'NSShadow', 'NSSharingServicePickerToolbarItem', 'NSSharingServicePickerTouchBarItem', 'NSSimpleCString', 'NSSocketPort', 'NSSortDescriptor', 'NSStream', 'NSString', 'NSStringDrawingContext', 'NSTextAttachment', 'NSTextCheckingResult', 'NSTextContainer', 'NSTextStorage', 'NSTextTab', 'NSThread', 'NSTimeZone', 'NSTimer', 'NSToolbarItem', 'NSURL', 'NSURLAuthenticationChallenge', 'NSURLCache', 'NSURLComponents', 'NSURLConnection', 'NSURLCredential', 'NSURLCredentialStorage', 'NSURLProtectionSpace', 'NSURLProtocol', 'NSURLQueryItem', 'NSURLRequest', 'NSURLResponse', 'NSURLSession', 'NSURLSessionConfiguration', 'NSURLSessionDataTask', 'NSURLSessionDownloadTask', 'NSURLSessionStreamTask', 'NSURLSessionTask', 'NSURLSessionTaskMetrics', 'NSURLSessionTaskTransactionMetrics', 'NSURLSessionUploadTask', 'NSURLSessionWebSocketMessage', 'NSURLSessionWebSocketTask', 'NSUUID', 'NSUbiquitousKeyValueStore', 'NSUndoManager', 'NSUnit', 'NSUnitAcceleration', 'NSUnitAngle', 'NSUnitArea', 'NSUnitConcentrationMass', 'NSUnitConverter', 'NSUnitConverterLinear', 'NSUnitDispersion', 'NSUnitDuration', 'NSUnitElectricCharge', 'NSUnitElectricCurrent', 'NSUnitElectricPotentialDifference', 'NSUnitElectricResistance', 'NSUnitEnergy', 'NSUnitFrequency', 'NSUnitFuelEfficiency', 'NSUnitIlluminance', 'NSUnitInformationStorage', 'NSUnitLength', 'NSUnitMass', 'NSUnitPower', 'NSUnitPressure', 'NSUnitSpeed', 'NSUnitTemperature', 'NSUnitVolume', 'NSUserActivity', 'NSUserDefaults', 'NSValue', 'NSValueTransformer', 'NSXMLParser', 'NSXPCCoder', 'NSXPCConnection', 'NSXPCInterface', 'NSXPCListener', 'NSXPCListenerEndpoint', 'NWBonjourServiceEndpoint', 'NWEndpoint', 'NWHostEndpoint', 'NWPath', 'NWTCPConnection', 'NWTLSParameters', 'NWUDPSession', 'OSLogEntry', 'OSLogEntryActivity', 'OSLogEntryBoundary', 'OSLogEntryLog', 'OSLogEntrySignpost', 'OSLogEnumerator', 'OSLogMessageComponent', 'OSLogPosition', 'OSLogStore', 'PDFAction', 'PDFActionGoTo', 'PDFActionNamed', 'PDFActionRemoteGoTo', 'PDFActionResetForm', 'PDFActionURL', 'PDFAnnotation', 'PDFAppearanceCharacteristics', 'PDFBorder', 'PDFDestination', 'PDFDocument', 'PDFOutline', 'PDFPage', 'PDFSelection', 'PDFThumbnailView', 'PDFView', 'PHAdjustmentData', 'PHAsset', 'PHAssetChangeRequest', 'PHAssetCollection', 'PHAssetCollectionChangeRequest', 'PHAssetCreationRequest', 'PHAssetResource', 'PHAssetResourceCreationOptions', 'PHAssetResourceManager', 'PHAssetResourceRequestOptions', 'PHCachingImageManager', 'PHChange', 'PHChangeRequest', 'PHCloudIdentifier', 'PHCollection', 'PHCollectionList', 'PHCollectionListChangeRequest', 'PHContentEditingInput', 'PHContentEditingInputRequestOptions', 'PHContentEditingOutput', 'PHEditingExtensionContext', 'PHFetchOptions', 'PHFetchResult', 'PHFetchResultChangeDetails', 'PHImageManager', 'PHImageRequestOptions', 'PHLivePhoto', 'PHLivePhotoEditingContext', 'PHLivePhotoRequestOptions', 'PHLivePhotoView', 'PHObject', 'PHObjectChangeDetails', 'PHObjectPlaceholder', 'PHPhotoLibrary', 'PHPickerConfiguration', 'PHPickerFilter', 'PHPickerResult', 'PHPickerViewController', 'PHProject', 'PHProjectChangeRequest', 'PHVideoRequestOptions', 'PKAddCarKeyPassConfiguration', 'PKAddPassButton', 'PKAddPassesViewController', 'PKAddPaymentPassRequest', 'PKAddPaymentPassRequestConfiguration', 'PKAddPaymentPassViewController', 'PKAddSecureElementPassConfiguration', 'PKAddSecureElementPassViewController', 'PKAddShareablePassConfiguration', 'PKBarcodeEventConfigurationRequest', 'PKBarcodeEventMetadataRequest', 'PKBarcodeEventMetadataResponse', 'PKBarcodeEventSignatureRequest', 'PKBarcodeEventSignatureResponse', 'PKCanvasView', 'PKContact', 'PKDisbursementAuthorizationController', 'PKDisbursementRequest', 'PKDisbursementVoucher', 'PKDrawing', 'PKEraserTool', 'PKFloatRange', 'PKInk', 'PKInkingTool', 'PKIssuerProvisioningExtensionHandler', 'PKIssuerProvisioningExtensionPassEntry', 'PKIssuerProvisioningExtensionPaymentPassEntry', 'PKIssuerProvisioningExtensionStatus', 'PKLabeledValue', 'PKLassoTool', 'PKObject', 'PKPass', 'PKPassLibrary', 'PKPayment', 'PKPaymentAuthorizationController', 'PKPaymentAuthorizationResult', 'PKPaymentAuthorizationViewController', 'PKPaymentButton', 'PKPaymentInformationEventExtension', 'PKPaymentMerchantSession', 'PKPaymentMethod', 'PKPaymentPass', 'PKPaymentRequest', 'PKPaymentRequestMerchantSessionUpdate', 'PKPaymentRequestPaymentMethodUpdate', 'PKPaymentRequestShippingContactUpdate', 'PKPaymentRequestShippingMethodUpdate', 'PKPaymentRequestUpdate', 'PKPaymentSummaryItem', 'PKPaymentToken', 'PKPushCredentials', 'PKPushPayload', 'PKPushRegistry', 'PKSecureElementPass', 'PKShareablePassMetadata', 'PKShippingMethod', 'PKStroke', 'PKStrokePath', 'PKStrokePoint', 'PKSuicaPassProperties', 'PKTool', 'PKToolPicker', 'PKTransitPassProperties', 'QLFileThumbnailRequest', 'QLPreviewController', 'QLThumbnailGenerationRequest', 'QLThumbnailGenerator', 'QLThumbnailProvider', 'QLThumbnailReply', 'QLThumbnailRepresentation', 'RPBroadcastActivityController', 'RPBroadcastActivityViewController', 'RPBroadcastConfiguration', 'RPBroadcastController', 'RPBroadcastHandler', 'RPBroadcastMP4ClipHandler', 'RPBroadcastSampleHandler', 'RPPreviewViewController', 'RPScreenRecorder', 'RPSystemBroadcastPickerView', 'SCNAccelerationConstraint', 'SCNAction', 'SCNAnimation', 'SCNAnimationEvent', 'SCNAnimationPlayer', 'SCNAudioPlayer', 'SCNAudioSource', 'SCNAvoidOccluderConstraint', 'SCNBillboardConstraint', 'SCNBox', 'SCNCamera', 'SCNCameraController', 'SCNCapsule', 'SCNCone', 'SCNConstraint', 'SCNCylinder', 'SCNDistanceConstraint', 'SCNFloor', 'SCNGeometry', 'SCNGeometryElement', 'SCNGeometrySource', 'SCNGeometryTessellator', 'SCNHitTestResult', 'SCNIKConstraint', 'SCNLevelOfDetail', 'SCNLight', 'SCNLookAtConstraint', 'SCNMaterial', 'SCNMaterialProperty', 'SCNMorpher', 'SCNNode', 'SCNParticlePropertyController', 'SCNParticleSystem', 'SCNPhysicsBallSocketJoint', 'SCNPhysicsBehavior', 'SCNPhysicsBody', 'SCNPhysicsConeTwistJoint', 'SCNPhysicsContact', 'SCNPhysicsField', 'SCNPhysicsHingeJoint', 'SCNPhysicsShape', 'SCNPhysicsSliderJoint', 'SCNPhysicsVehicle', 'SCNPhysicsVehicleWheel', 'SCNPhysicsWorld', 'SCNPlane', 'SCNProgram', 'SCNPyramid', 'SCNReferenceNode', 'SCNRenderer', 'SCNReplicatorConstraint', 'SCNScene', 'SCNSceneSource', 'SCNShape', 'SCNSkinner', 'SCNSliderConstraint', 'SCNSphere', 'SCNTechnique', 'SCNText', 'SCNTimingFunction', 'SCNTorus', 'SCNTransaction', 'SCNTransformConstraint', 'SCNTube', 'SCNView', 'SFAcousticFeature', 'SFAuthenticationSession', 'SFContentBlockerManager', 'SFContentBlockerState', 'SFSafariViewController', 'SFSafariViewControllerConfiguration', 'SFSpeechAudioBufferRecognitionRequest', 'SFSpeechRecognitionRequest', 'SFSpeechRecognitionResult', 'SFSpeechRecognitionTask', 'SFSpeechRecognizer', 'SFSpeechURLRecognitionRequest', 'SFTranscription', 'SFTranscriptionSegment', 'SFVoiceAnalytics', 'SK3DNode', 'SKAction', 'SKAdNetwork', 'SKArcadeService', 'SKAttribute', 'SKAttributeValue', 'SKAudioNode', 'SKCameraNode', 'SKCloudServiceController', 'SKCloudServiceSetupViewController', 'SKConstraint', 'SKCropNode', 'SKDownload', 'SKEffectNode', 'SKEmitterNode', 'SKFieldNode', 'SKKeyframeSequence', 'SKLabelNode', 'SKLightNode', 'SKMutablePayment', 'SKMutableTexture', 'SKNode', 'SKOverlay', 'SKOverlayAppClipConfiguration', 'SKOverlayAppConfiguration', 'SKOverlayConfiguration', 'SKOverlayTransitionContext', 'SKPayment', 'SKPaymentDiscount', 'SKPaymentQueue', 'SKPaymentTransaction', 'SKPhysicsBody', 'SKPhysicsContact', 'SKPhysicsJoint', 'SKPhysicsJointFixed', 'SKPhysicsJointLimit', 'SKPhysicsJointPin', 'SKPhysicsJointSliding', 'SKPhysicsJointSpring', 'SKPhysicsWorld', 'SKProduct', 'SKProductDiscount', 'SKProductStorePromotionController', 'SKProductSubscriptionPeriod', 'SKProductsRequest', 'SKProductsResponse', 'SKRange', 'SKReachConstraints', 'SKReceiptRefreshRequest', 'SKReferenceNode', 'SKRegion', 'SKRenderer', 'SKRequest', 'SKScene', 'SKShader', 'SKShapeNode', 'SKSpriteNode', 'SKStoreProductViewController', 'SKStoreReviewController', 'SKStorefront', 'SKTexture', 'SKTextureAtlas', 'SKTileDefinition', 'SKTileGroup', 'SKTileGroupRule', 'SKTileMapNode', 'SKTileSet', 'SKTransformNode', 'SKTransition', 'SKUniform', 'SKVideoNode', 'SKView', 'SKWarpGeometry', 'SKWarpGeometryGrid', 'SLComposeServiceViewController', 'SLComposeSheetConfigurationItem', 'SLComposeViewController', 'SLRequest', 'SNAudioFileAnalyzer', 'SNAudioStreamAnalyzer', 'SNClassification', 'SNClassificationResult', 'SNClassifySoundRequest', 'SRAmbientLightSample', 'SRApplicationUsage', 'SRDeletionRecord', 'SRDevice', 'SRDeviceUsageReport', 'SRFetchRequest', 'SRFetchResult', 'SRKeyboardMetrics', 'SRKeyboardProbabilityMetric', 'SRMessagesUsageReport', 'SRNotificationUsage', 'SRPhoneUsageReport', 'SRSensorReader', 'SRVisit', 'SRWebUsage', 'SRWristDetection', 'SSReadingList', 'STScreenTimeConfiguration', 'STScreenTimeConfigurationObserver', 'STWebHistory', 'STWebpageController', 'TKBERTLVRecord', 'TKCompactTLVRecord', 'TKSimpleTLVRecord', 'TKSmartCard', 'TKSmartCardATR', 'TKSmartCardATRInterfaceGroup', 'TKSmartCardPINFormat', 'TKSmartCardSlot', 'TKSmartCardSlotManager', 'TKSmartCardToken', 'TKSmartCardTokenDriver', 'TKSmartCardTokenSession', 'TKSmartCardUserInteraction', 'TKSmartCardUserInteractionForPINOperation', 'TKSmartCardUserInteractionForSecurePINChange', 'TKSmartCardUserInteractionForSecurePINVerification', 'TKTLVRecord', 'TKToken', 'TKTokenAuthOperation', 'TKTokenConfiguration', 'TKTokenDriver', 'TKTokenDriverConfiguration', 'TKTokenKeyAlgorithm', 'TKTokenKeyExchangeParameters', 'TKTokenKeychainCertificate', 'TKTokenKeychainContents', 'TKTokenKeychainItem', 'TKTokenKeychainKey', 'TKTokenPasswordAuthOperation', 'TKTokenSession', 'TKTokenSmartCardPINAuthOperation', 'TKTokenWatcher', 'TWRequest', 'TWTweetComposeViewController', 'UIAcceleration', 'UIAccelerometer', 'UIAccessibilityCustomAction', 'UIAccessibilityCustomRotor', 'UIAccessibilityCustomRotorItemResult', 'UIAccessibilityCustomRotorSearchPredicate', 'UIAccessibilityElement', 'UIAccessibilityLocationDescriptor', 'UIAction', 'UIActionSheet', 'UIActivity', 'UIActivityIndicatorView', 'UIActivityItemProvider', 'UIActivityItemsConfiguration', 'UIActivityViewController', 'UIAlertAction', 'UIAlertController', 'UIAlertView', 'UIApplication', 'UIApplicationShortcutIcon', 'UIApplicationShortcutItem', 'UIAttachmentBehavior', 'UIBackgroundConfiguration', 'UIBarAppearance', 'UIBarButtonItem', 'UIBarButtonItemAppearance', 'UIBarButtonItemGroup', 'UIBarButtonItemStateAppearance', 'UIBarItem', 'UIBezierPath', 'UIBlurEffect', 'UIButton', 'UICellAccessory', 'UICellAccessoryCheckmark', 'UICellAccessoryCustomView', 'UICellAccessoryDelete', 'UICellAccessoryDisclosureIndicator', 'UICellAccessoryInsert', 'UICellAccessoryLabel', 'UICellAccessoryMultiselect', 'UICellAccessoryOutlineDisclosure', 'UICellAccessoryReorder', 'UICellConfigurationState', 'UICloudSharingController', 'UICollectionLayoutListConfiguration', 'UICollectionReusableView', 'UICollectionView', 'UICollectionViewCell', 'UICollectionViewCellRegistration', 'UICollectionViewCompositionalLayout', 'UICollectionViewCompositionalLayoutConfiguration', 'UICollectionViewController', 'UICollectionViewDiffableDataSource', 'UICollectionViewDiffableDataSourceReorderingHandlers', 'UICollectionViewDiffableDataSourceSectionSnapshotHandlers', 'UICollectionViewDropPlaceholder', 'UICollectionViewDropProposal', 'UICollectionViewFlowLayout', 'UICollectionViewFlowLayoutInvalidationContext', 'UICollectionViewFocusUpdateContext', 'UICollectionViewLayout', 'UICollectionViewLayoutAttributes', 'UICollectionViewLayoutInvalidationContext', 'UICollectionViewListCell', 'UICollectionViewPlaceholder', 'UICollectionViewSupplementaryRegistration', 'UICollectionViewTransitionLayout', 'UICollectionViewUpdateItem', 'UICollisionBehavior', 'UIColor', 'UIColorPickerViewController', 'UIColorWell', 'UICommand', 'UICommandAlternate', 'UIContextMenuConfiguration', 'UIContextMenuInteraction', 'UIContextualAction', 'UIControl', 'UICubicTimingParameters', 'UIDatePicker', 'UIDeferredMenuElement', 'UIDevice', 'UIDictationPhrase', 'UIDocument', 'UIDocumentBrowserAction', 'UIDocumentBrowserTransitionController', 'UIDocumentBrowserViewController', 'UIDocumentInteractionController', 'UIDocumentMenuViewController', 'UIDocumentPickerExtensionViewController', 'UIDocumentPickerViewController', 'UIDragInteraction', 'UIDragItem', 'UIDragPreview', 'UIDragPreviewParameters', 'UIDragPreviewTarget', 'UIDropInteraction', 'UIDropProposal', 'UIDynamicAnimator', 'UIDynamicBehavior', 'UIDynamicItemBehavior', 'UIDynamicItemGroup', 'UIEvent', 'UIFeedbackGenerator', 'UIFieldBehavior', 'UIFocusAnimationCoordinator', 'UIFocusDebugger', 'UIFocusGuide', 'UIFocusMovementHint', 'UIFocusSystem', 'UIFocusUpdateContext', 'UIFont', 'UIFontDescriptor', 'UIFontMetrics', 'UIFontPickerViewController', 'UIFontPickerViewControllerConfiguration', 'UIGestureRecognizer', 'UIGraphicsImageRenderer', 'UIGraphicsImageRendererContext', 'UIGraphicsImageRendererFormat', 'UIGraphicsPDFRenderer', 'UIGraphicsPDFRendererContext', 'UIGraphicsPDFRendererFormat', 'UIGraphicsRenderer', 'UIGraphicsRendererContext', 'UIGraphicsRendererFormat', 'UIGravityBehavior', 'UIHoverGestureRecognizer', 'UIImage', 'UIImageAsset', 'UIImageConfiguration', 'UIImagePickerController', 'UIImageSymbolConfiguration', 'UIImageView', 'UIImpactFeedbackGenerator', 'UIIndirectScribbleInteraction', 'UIInputView', 'UIInputViewController', 'UIInterpolatingMotionEffect', 'UIKey', 'UIKeyCommand', 'UILabel', 'UILargeContentViewerInteraction', 'UILayoutGuide', 'UILexicon', 'UILexiconEntry', 'UIListContentConfiguration', 'UIListContentImageProperties', 'UIListContentTextProperties', 'UIListContentView', 'UILocalNotification', 'UILocalizedIndexedCollation', 'UILongPressGestureRecognizer', 'UIManagedDocument', 'UIMarkupTextPrintFormatter', 'UIMenu', 'UIMenuController', 'UIMenuElement', 'UIMenuItem', 'UIMenuSystem', 'UIMotionEffect', 'UIMotionEffectGroup', 'UIMutableApplicationShortcutItem', 'UIMutableUserNotificationAction', 'UIMutableUserNotificationCategory', 'UINavigationBar', 'UINavigationBarAppearance', 'UINavigationController', 'UINavigationItem', 'UINib', 'UINotificationFeedbackGenerator', 'UIOpenURLContext', 'UIPageControl', 'UIPageViewController', 'UIPanGestureRecognizer', 'UIPasteConfiguration', 'UIPasteboard', 'UIPencilInteraction', 'UIPercentDrivenInteractiveTransition', 'UIPickerView', 'UIPinchGestureRecognizer', 'UIPointerEffect', 'UIPointerHighlightEffect', 'UIPointerHoverEffect', 'UIPointerInteraction', 'UIPointerLiftEffect', 'UIPointerLockState', 'UIPointerRegion', 'UIPointerRegionRequest', 'UIPointerShape', 'UIPointerStyle', 'UIPopoverBackgroundView', 'UIPopoverController', 'UIPopoverPresentationController', 'UIPresentationController', 'UIPress', 'UIPressesEvent', 'UIPreviewAction', 'UIPreviewActionGroup', 'UIPreviewInteraction', 'UIPreviewParameters', 'UIPreviewTarget', 'UIPrintFormatter', 'UIPrintInfo', 'UIPrintInteractionController', 'UIPrintPageRenderer', 'UIPrintPaper', 'UIPrinter', 'UIPrinterPickerController', 'UIProgressView', 'UIPushBehavior', 'UIReferenceLibraryViewController', 'UIRefreshControl', 'UIRegion', 'UIResponder', 'UIRotationGestureRecognizer', 'UIScene', 'UISceneActivationConditions', 'UISceneActivationRequestOptions', 'UISceneConfiguration', 'UISceneConnectionOptions', 'UISceneDestructionRequestOptions', 'UISceneOpenExternalURLOptions', 'UISceneOpenURLOptions', 'UISceneSession', 'UISceneSizeRestrictions', 'UIScreen', 'UIScreenEdgePanGestureRecognizer', 'UIScreenMode', 'UIScreenshotService', 'UIScribbleInteraction', 'UIScrollView', 'UISearchBar', 'UISearchContainerViewController', 'UISearchController', 'UISearchDisplayController', 'UISearchSuggestionItem', 'UISearchTextField', 'UISearchToken', 'UISegmentedControl', 'UISelectionFeedbackGenerator', 'UISimpleTextPrintFormatter', 'UISlider', 'UISnapBehavior', 'UISplitViewController', 'UISpringLoadedInteraction', 'UISpringTimingParameters', 'UIStackView', 'UIStatusBarManager', 'UIStepper', 'UIStoryboard', 'UIStoryboardPopoverSegue', 'UIStoryboardSegue', 'UIStoryboardUnwindSegueSource', 'UISwipeActionsConfiguration', 'UISwipeGestureRecognizer', 'UISwitch', 'UITabBar', 'UITabBarAppearance', 'UITabBarController', 'UITabBarItem', 'UITabBarItemAppearance', 'UITabBarItemStateAppearance', 'UITableView', 'UITableViewCell', 'UITableViewController', 'UITableViewDiffableDataSource', 'UITableViewDropPlaceholder', 'UITableViewDropProposal', 'UITableViewFocusUpdateContext', 'UITableViewHeaderFooterView', 'UITableViewPlaceholder', 'UITableViewRowAction', 'UITapGestureRecognizer', 'UITargetedDragPreview', 'UITargetedPreview', 'UITextChecker', 'UITextDragPreviewRenderer', 'UITextDropProposal', 'UITextField', 'UITextFormattingCoordinator', 'UITextInputAssistantItem', 'UITextInputMode', 'UITextInputPasswordRules', 'UITextInputStringTokenizer', 'UITextInteraction', 'UITextPlaceholder', 'UITextPosition', 'UITextRange', 'UITextSelectionRect', 'UITextView', 'UITitlebar', 'UIToolbar', 'UIToolbarAppearance', 'UITouch', 'UITraitCollection', 'UIUserNotificationAction', 'UIUserNotificationCategory', 'UIUserNotificationSettings', 'UIVibrancyEffect', 'UIVideoEditorController', 'UIView', 'UIViewConfigurationState', 'UIViewController', 'UIViewPrintFormatter', 'UIViewPropertyAnimator', 'UIVisualEffect', 'UIVisualEffectView', 'UIWebView', 'UIWindow', 'UIWindowScene', 'UIWindowSceneDestructionRequestOptions', 'UNCalendarNotificationTrigger', 'UNLocationNotificationTrigger', 'UNMutableNotificationContent', 'UNNotification', 'UNNotificationAction', 'UNNotificationAttachment', 'UNNotificationCategory', 'UNNotificationContent', 'UNNotificationRequest', 'UNNotificationResponse', 'UNNotificationServiceExtension', 'UNNotificationSettings', 'UNNotificationSound', 'UNNotificationTrigger', 'UNPushNotificationTrigger', 'UNTextInputNotificationAction', 'UNTextInputNotificationResponse', 'UNTimeIntervalNotificationTrigger', 'UNUserNotificationCenter', 'UTType', 'VNBarcodeObservation', 'VNCircle', 'VNClassificationObservation', 'VNClassifyImageRequest', 'VNContour', 'VNContoursObservation', 'VNCoreMLFeatureValueObservation', 'VNCoreMLModel', 'VNCoreMLRequest', 'VNDetectBarcodesRequest', 'VNDetectContoursRequest', 'VNDetectFaceCaptureQualityRequest', 'VNDetectFaceLandmarksRequest', 'VNDetectFaceRectanglesRequest', 'VNDetectHorizonRequest', 'VNDetectHumanBodyPoseRequest', 'VNDetectHumanHandPoseRequest', 'VNDetectHumanRectanglesRequest', 'VNDetectRectanglesRequest', 'VNDetectTextRectanglesRequest', 'VNDetectTrajectoriesRequest', 'VNDetectedObjectObservation', 'VNDetectedPoint', 'VNDocumentCameraScan', 'VNDocumentCameraViewController', 'VNFaceLandmarkRegion', 'VNFaceLandmarkRegion2D', 'VNFaceLandmarks', 'VNFaceLandmarks2D', 'VNFaceObservation', 'VNFeaturePrintObservation', 'VNGenerateAttentionBasedSaliencyImageRequest', 'VNGenerateImageFeaturePrintRequest', 'VNGenerateObjectnessBasedSaliencyImageRequest', 'VNGenerateOpticalFlowRequest', 'VNGeometryUtils', 'VNHomographicImageRegistrationRequest', 'VNHorizonObservation', 'VNHumanBodyPoseObservation', 'VNHumanHandPoseObservation', 'VNImageAlignmentObservation', 'VNImageBasedRequest', 'VNImageHomographicAlignmentObservation', 'VNImageRegistrationRequest', 'VNImageRequestHandler', 'VNImageTranslationAlignmentObservation', 'VNObservation', 'VNPixelBufferObservation', 'VNPoint', 'VNRecognizeAnimalsRequest', 'VNRecognizeTextRequest', 'VNRecognizedObjectObservation', 'VNRecognizedPoint', 'VNRecognizedPointsObservation', 'VNRecognizedText', 'VNRecognizedTextObservation', 'VNRectangleObservation', 'VNRequest', 'VNSaliencyImageObservation', 'VNSequenceRequestHandler', 'VNStatefulRequest', 'VNTargetedImageRequest', 'VNTextObservation', 'VNTrackObjectRequest', 'VNTrackRectangleRequest', 'VNTrackingRequest', 'VNTrajectoryObservation', 'VNTranslationalImageRegistrationRequest', 'VNVector', 'VNVideoProcessor', 'VNVideoProcessorCadence', 'VNVideoProcessorFrameRateCadence', 'VNVideoProcessorRequestProcessingOptions', 'VNVideoProcessorTimeIntervalCadence', 'VSAccountApplicationProvider', 'VSAccountManager', 'VSAccountManagerResult', 'VSAccountMetadata', 'VSAccountMetadataRequest', 'VSAccountProviderResponse', 'VSSubscription', 'VSSubscriptionRegistrationCenter', 'WCSession', 'WCSessionFile', 'WCSessionFileTransfer', 'WCSessionUserInfoTransfer', 'WKBackForwardList', 'WKBackForwardListItem', 'WKContentRuleList', 'WKContentRuleListStore', 'WKContentWorld', 'WKContextMenuElementInfo', 'WKFindConfiguration', 'WKFindResult', 'WKFrameInfo', 'WKHTTPCookieStore', 'WKNavigation', 'WKNavigationAction', 'WKNavigationResponse', 'WKOpenPanelParameters', 'WKPDFConfiguration', 'WKPreferences', 'WKPreviewElementInfo', 'WKProcessPool', 'WKScriptMessage', 'WKSecurityOrigin', 'WKSnapshotConfiguration', 'WKUserContentController', 'WKUserScript', 'WKWebView', 'WKWebViewConfiguration', 'WKWebpagePreferences', 'WKWebsiteDataRecord', 'WKWebsiteDataStore', 'WKWindowFeatures', '__EntityAccessibilityWrapper'}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_cocoa_builtins.py:COCOA_PRIMITIVES = {'ACErrorCode', 'ALCcontext_struct', 'ALCdevice_struct', 'ALMXGlyphEntry', 'ALMXHeader', 'API_UNAVAILABLE', 'AUChannelInfo', 'AUDependentParameter', 'AUDistanceAttenuationData', 'AUHostIdentifier', 'AUHostVersionIdentifier', 'AUInputSamplesInOutputCallbackStruct', 'AUMIDIEvent', 'AUMIDIOutputCallbackStruct', 'AUNodeInteraction', 'AUNodeRenderCallback', 'AUNumVersion', 'AUParameterAutomationEvent', 'AUParameterEvent', 'AUParameterMIDIMapping', 'AUPreset', 'AUPresetEvent', 'AURecordedParameterEvent', 'AURenderCallbackStruct', 'AURenderEventHeader', 'AUSamplerBankPresetData', 'AUSamplerInstrumentData', 'AnchorPoint', 'AnchorPointTable', 'AnkrTable', 'AudioBalanceFade', 'AudioBuffer', 'AudioBufferList', 'AudioBytePacketTranslation', 'AudioChannelDescription', 'AudioChannelLayout', 'AudioClassDescription', 'AudioCodecMagicCookieInfo', 'AudioCodecPrimeInfo', 'AudioComponentDescription', 'AudioComponentPlugInInterface', 'AudioConverterPrimeInfo', 'AudioFileMarker', 'AudioFileMarkerList', 'AudioFilePacketTableInfo', 'AudioFileRegion', 'AudioFileRegionList', 'AudioFileTypeAndFormatID', 'AudioFile_SMPTE_Time', 'AudioFormatInfo', 'AudioFormatListItem', 'AudioFramePacketTranslation', 'AudioIndependentPacketTranslation', 'AudioOutputUnitMIDICallbacks', 'AudioOutputUnitStartAtTimeParams', 'AudioPacketDependencyInfoTranslation', 'AudioPacketRangeByteCountTranslation', 'AudioPacketRollDistanceTranslation', 'AudioPanningInfo', 'AudioQueueBuffer', 'AudioQueueChannelAssignment', 'AudioQueueLevelMeterState', 'AudioQueueParameterEvent', 'AudioStreamBasicDescription', 'AudioStreamPacketDescription', 'AudioTimeStamp', 'AudioUnitCocoaViewInfo', 'AudioUnitConnection', 'AudioUnitExternalBuffer', 'AudioUnitFrequencyResponseBin', 'AudioUnitMIDIControlMapping', 'AudioUnitMeterClipping', 'AudioUnitNodeConnection', 'AudioUnitOtherPluginDesc', 'AudioUnitParameter', 'AudioUnitParameterEvent', 'AudioUnitParameterHistoryInfo', 'AudioUnitParameterInfo', 'AudioUnitParameterNameInfo', 'AudioUnitParameterStringFromValue', 'AudioUnitParameterValueFromString', 'AudioUnitParameterValueName', 'AudioUnitParameterValueTranslation', 'AudioUnitPresetMAS_SettingData', 'AudioUnitPresetMAS_Settings', 'AudioUnitProperty', 'AudioUnitRenderContext', 'AudioValueRange', 'AudioValueTranslation', 'AuthorizationOpaqueRef', 'BslnFormat0Part', 'BslnFormat1Part', 'BslnFormat2Part', 'BslnFormat3Part', 'BslnTable', 'CABarBeatTime', 'CAFAudioDescription', 'CAFChunkHeader', 'CAFDataChunk', 'CAFFileHeader', 'CAFInfoStrings', 'CAFInstrumentChunk', 'CAFMarker', 'CAFMarkerChunk', 'CAFOverviewChunk', 'CAFOverviewSample', 'CAFPacketTableHeader', 'CAFPeakChunk', 'CAFPositionPeak', 'CAFRegion', 'CAFRegionChunk', 'CAFStringID', 'CAFStrings', 'CAFUMIDChunk', 'CAF_SMPTE_Time', 'CAF_UUID_ChunkHeader', 'CA_BOXABLE', 'CFHostClientContext', 'CFNetServiceClientContext', 'CF_BRIDGED_MUTABLE_TYPE', 'CF_BRIDGED_TYPE', 'CF_RELATED_TYPE', 'CGAffineTransform', 'CGDataConsumerCallbacks', 'CGDataProviderDirectCallbacks', 'CGDataProviderSequentialCallbacks', 'CGFunctionCallbacks', 'CGPDFArray', 'CGPDFContentStream', 'CGPDFDictionary', 'CGPDFObject', 'CGPDFOperatorTable', 'CGPDFScanner', 'CGPDFStream', 'CGPDFString', 'CGPathElement', 'CGPatternCallbacks', 'CGVector', 'CG_BOXABLE', 'CLLocationCoordinate2D', 'CM_BRIDGED_TYPE', 'CTParagraphStyleSetting', 'CVPlanarComponentInfo', 'CVPlanarPixelBufferInfo', 'CVPlanarPixelBufferInfo_YCbCrBiPlanar', 'CVPlanarPixelBufferInfo_YCbCrPlanar', 'CVSMPTETime', 'CV_BRIDGED_TYPE', 'ComponentInstanceRecord', 'ExtendedAudioFormatInfo', 'ExtendedControlEvent', 'ExtendedNoteOnEvent', 'ExtendedTempoEvent', 'FontVariation', 'GCQuaternion', 'GKBox', 'GKQuad', 'GKTriangle', 'GLKEffectPropertyPrv', 'HostCallbackInfo', 'IIO_BRIDGED_TYPE', 'IUnknownVTbl', 'JustDirectionTable', 'JustPCAction', 'JustPCActionSubrecord', 'JustPCConditionalAddAction', 'JustPCDecompositionAction', 'JustPCDuctilityAction', 'JustPCGlyphRepeatAddAction', 'JustPostcompTable', 'JustTable', 'JustWidthDeltaEntry', 'JustWidthDeltaGroup', 'KernIndexArrayHeader', 'KernKerningPair', 'KernOffsetTable', 'KernOrderedListEntry', 'KernOrderedListHeader', 'KernSimpleArrayHeader', 'KernStateEntry', 'KernStateHeader', 'KernSubtableHeader', 'KernTableHeader', 'KernVersion0Header', 'KernVersion0SubtableHeader', 'KerxAnchorPointAction', 'KerxControlPointAction', 'KerxControlPointEntry', 'KerxControlPointHeader', 'KerxCoordinateAction', 'KerxIndexArrayHeader', 'KerxKerningPair', 'KerxOrderedListEntry', 'KerxOrderedListHeader', 'KerxSimpleArrayHeader', 'KerxStateEntry', 'KerxStateHeader', 'KerxSubtableHeader', 'KerxTableHeader', 'LcarCaretClassEntry', 'LcarCaretTable', 'LtagStringRange', 'LtagTable', 'MDL_CLASS_EXPORT', 'MIDICIDeviceIdentification', 'MIDIChannelMessage', 'MIDIControlTransform', 'MIDIDriverInterface', 'MIDIEventList', 'MIDIEventPacket', 'MIDIIOErrorNotification', 'MIDIMessage_128', 'MIDIMessage_64', 'MIDIMessage_96', 'MIDIMetaEvent', 'MIDINoteMessage', 'MIDINotification', 'MIDIObjectAddRemoveNotification', 'MIDIObjectPropertyChangeNotification', 'MIDIPacket', 'MIDIPacketList', 'MIDIRawData', 'MIDISysexSendRequest', 'MIDIThruConnectionEndpoint', 'MIDIThruConnectionParams', 'MIDITransform', 'MIDIValueMap', 'MPSDeviceOptions', 'MixerDistanceParams', 'MortChain', 'MortContextualSubtable', 'MortFeatureEntry', 'MortInsertionSubtable', 'MortLigatureSubtable', 'MortRearrangementSubtable', 'MortSubtable', 'MortSwashSubtable', 'MortTable', 'MorxChain', 'MorxContextualSubtable', 'MorxInsertionSubtable', 'MorxLigatureSubtable', 'MorxRearrangementSubtable', 'MorxSubtable', 'MorxTable', 'MusicDeviceNoteParams', 'MusicDeviceStdNoteParams', 'MusicEventUserData', 'MusicTrackLoopInfo', 'NoteParamsControlValue', 'OpaqueAudioComponent', 'OpaqueAudioComponentInstance', 'OpaqueAudioConverter', 'OpaqueAudioQueue', 'OpaqueAudioQueueProcessingTap', 'OpaqueAudioQueueTimeline', 'OpaqueExtAudioFile', 'OpaqueJSClass', 'OpaqueJSContext', 'OpaqueJSContextGroup', 'OpaqueJSPropertyNameAccumulator', 'OpaqueJSPropertyNameArray', 'OpaqueJSString', 'OpaqueJSValue', 'OpaqueMusicEventIterator', 'OpaqueMusicPlayer', 'OpaqueMusicSequence', 'OpaqueMusicTrack', 'OpbdSideValues', 'OpbdTable', 'ParameterEvent', 'PropLookupSegment', 'PropLookupSingle', 'PropTable', 'ROTAGlyphEntry', 'ROTAHeader', 'SCNMatrix4', 'SCNVector3', 'SCNVector4', 'SFNTLookupArrayHeader', 'SFNTLookupBinarySearchHeader', 'SFNTLookupSegment', 'SFNTLookupSegmentHeader', 'SFNTLookupSingle', 'SFNTLookupSingleHeader', 'SFNTLookupTable', 'SFNTLookupTrimmedArrayHeader', 'SFNTLookupVectorHeader', 'SMPTETime', 'STClassTable', 'STEntryOne', 'STEntryTwo', 'STEntryZero', 'STHeader', 'STXEntryOne', 'STXEntryTwo', 'STXEntryZero', 'STXHeader', 'ScheduledAudioFileRegion', 'ScheduledAudioSlice', 'SecKeychainAttribute', 'SecKeychainAttributeInfo', 'SecKeychainAttributeList', 'TrakTable', 'TrakTableData', 'TrakTableEntry', 'UIAccessibility', 'VTDecompressionOutputCallbackRecord', 'VTInt32Point', 'VTInt32Size', '_CFHTTPAuthentication', '_GLKMatrix2', '_GLKMatrix3', '_GLKMatrix4', '_GLKQuaternion', '_GLKVector2', '_GLKVector3', '_GLKVector4', '_GLKVertexAttributeParameters', '_MTLAxisAlignedBoundingBox', '_MTLPackedFloat3', '_MTLPackedFloat4x3', '_NSRange', '_NSZone', '__CFHTTPMessage', '__CFHost', '__CFNetDiagnostic', '__CFNetService', '__CFNetServiceBrowser', '__CFNetServiceMonitor', '__CFXMLNode', '__CFXMLParser', '__GLsync', '__SecAccess', '__SecCertificate', '__SecIdentity', '__SecKey', '__SecRandom', '__attribute__', 'gss_OID_desc_struct', 'gss_OID_set_desc_struct', 'gss_auth_identity', 'gss_buffer_desc_struct', 'gss_buffer_set_desc_struct', 'gss_channel_bindings_struct', 'gss_cred_id_t_desc_struct', 'gss_ctx_id_t_desc_struct', 'gss_iov_buffer_desc_struct', 'gss_krb5_cfx_keydata', 'gss_krb5_lucid_context_v1', 'gss_krb5_lucid_context_version', 'gss_krb5_lucid_key', 'gss_krb5_rfc1964_keydata', 'gss_name_t_desc_struct', 'opaqueCMBufferQueueTriggerToken', 'sfntCMapEncoding', 'sfntCMapExtendedSubHeader', 'sfntCMapHeader', 'sfntCMapSubHeader', 'sfntDescriptorHeader', 'sfntDirectory', 'sfntDirectoryEntry', 'sfntFeatureHeader', 'sfntFeatureName', 'sfntFontDescriptor', 'sfntFontFeatureSetting', 'sfntFontRunFeature', 'sfntInstance', 'sfntNameHeader', 'sfntNameRecord', 'sfntVariationAxis', 'sfntVariationHeader'}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_csound_builtins.py:lua_iaopcall
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_csound_builtins.py:lua_iaopcall_off
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_csound_builtins.py:lua_ikopcall
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_csound_builtins.py:lua_ikopcall_off
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_csound_builtins.py:lua_iopcall
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_csound_builtins.py:lua_iopcall_off
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_csound_builtins.py:lpcanal
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_csound_builtins.py:pcauchy
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_lasso_builtins.py:        'lassoapp_mime_type_appcache',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_lasso_builtins.py:        'httpcachecontrol',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_lua_builtins.py:           'pcall',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_lua_builtins.py:           'xpcall'),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_openedge_builtins.py:    'CPCASE',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_php_builtins.py: 'OPcache': ('opcache_compile_file',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_php_builtins.py:             'opcache_get_configuration',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_php_builtins.py:             'opcache_get_status',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_php_builtins.py:             'opcache_invalidate',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_php_builtins.py:             'opcache_is_script_cached',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_php_builtins.py:             'opcache_reset'),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_scheme_builtins.py:    "char-upcase",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_scheme_builtins.py:    "string-upcase",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_scheme_builtins.py:    "string-upcase!",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_scilab_builtins.py:    'pca',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_scilab_builtins.py:    'show_pca',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_stata_builtins.py:    "factor", "factor_estat", "factor_p", "factor_pca_rotated",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_stata_builtins.py:    "pac_7", "palette", "parse", "parse_dissim", "pause", "pca",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_stata_builtins.py:    "pca_8", "pca_display", "pca_estat", "pca_p", "pca_rotate",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_stata_builtins.py:    "pcamat", "pchart", "pchart_7", "pchi", "pchi_7", "pcorr",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pygments\lexers\_stata_builtins.py:    "yxview_normal_draw", "yxview_pcarrow_draw",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyparsing\common.py:    - :class:`upcase_tokens`
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyparsing\common.py:    upcase_tokens = staticmethod(token_map(lambda t: t.upper()))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyparsing\common.py:    upcaseTokens = staticmethod(replaced_by_pep8("upcaseTokens", upcase_tokens))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pyparsing\tools\cvt_pyparsing_pep8_names.py:traceParseAction transformString tryParse unicodeString upcaseTokens withAttribute withClass
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pythonwin\pywin\scintilla\control.py:    def SCICallTipCancel(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pythonwin\pywin\scintilla\control.py:        self.SendScintilla(scintillacon.SCI_CALLTIPCANCEL)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pythonwin\pywin\scintilla\IDLEenvironment.py:        self.edit.SCICallTipCancel()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\pythonwin\pywin\scintilla\scintillacon.py:SCI_CALLTIPCANCEL = 2201
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\regex\regex.py:_MAXREPCACHE = 500
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\regex\regex.py:    if len(_replacement_cache) >= _MAXREPCACHE:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\interpolate\_bsplines.py:    NB: Upcasts half- and single-precision floats to double precision.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\interpolate\_interpolate.py:        else:  # all checks pass, do the upcasting that we need later
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\linalg\blas.py:            # safe upcasting for mix of float64 and complex64 --> prefix 'z'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\linalg\tests\test_blas.py:    # check safe complex upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\linalg\tests\test_lapack.py:        # www.hpcavf.uclan.ac.uk/softwaredoc/sgi_scsl_html/sgi_html/ch03.html
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\optimize\_lbfgsb_py.py:        # float64, so upcast it
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\optimize\_optimize.py:        xk += update        # upcast if necessary
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\optimize\_shgo.py:        self.LMC = LMapCache()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\optimize\_shgo.py:class LMapCache:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\signal\tests\test_signaltools.py:    def test_float16_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\signal\tests\test_signaltools.py:        # float16 must be upcast to float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\signal\_signaltools.py:        # upcast integers and float16 to float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\bsr.py:    'upcast',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\compressed.py:    'upcast',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\compressed.py:    'upcast_char',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\construct.py:    'upcast',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\coo.py:    'upcast',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\coo.py:    'upcast_char',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\csc.py:    'upcast',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\csr.py:    'upcast',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\dia.py:    'upcast_char',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\dok.py:    'upcast',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\dok.py:    'upcast_scalar',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\linalg\_dsolve\linsolve.py:    A = A._asfptype()  # upcast to a floating point format
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\linalg\_dsolve\linsolve.py:    A = A._asfptype()  # upcast to a floating point format
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\linalg\_dsolve\linsolve.py:    A = A._asfptype()  # upcast to a floating point format
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\linalg\_dsolve\linsolve.py:        A = A._asfptype()  # upcast to a floating point format
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\linalg\_isolve\utils.py:        b = b.astype('d')  # upcast non-FP types to double
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\tests\test_arithmetic1d.py:            # Manually add to avoid upcasting from scalar
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\tests\test_base.py:                # Manually add to avoid upcasting from scalar
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\tests\test_base.py:    This is more than testing get_index_dtype. It allows checking whether upcasting
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\tests\test_sparsetools.py:def test_upcast():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\tests\test_sputils.py:    def test_upcast(self):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\tests\test_sputils.py:        assert_equal(sputils.upcast('intc'), np.intc)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\tests\test_sputils.py:        assert_equal(sputils.upcast('int32', 'float32'), np.float64)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\tests\test_sputils.py:        assert_equal(sputils.upcast('bool', complex, float), np.complex128)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\tests\test_sputils.py:        assert_equal(sputils.upcast('i', 'd'), np.float64)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_base.py:        """Upcast array to a floating point format (if necessary)"""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_base.py:                f'cannot upcast [{self.dtype.name}] to a floating point format'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_bsr.py:from ._sputils import (isshape, getdtype, getdata, to_native, upcast,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_bsr.py:                     dtype=upcast(self.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_bsr.py:        result = np.zeros(self.shape[0], dtype=upcast(self.dtype, other.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_bsr.py:        result = np.zeros((M,n_vecs), dtype=upcast(self.dtype,other.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_bsr.py:        data = np.empty(R*C*bnnz, dtype=upcast(self.dtype,other.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_bsr.py:        data = np.empty(nnz, dtype=upcast(self.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_bsr.py:            data = np.empty(R*C*max_bnnz, dtype=upcast(self.dtype,other.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_compressed.py:from ._sputils import (upcast, upcast_char, to_native, isdense, isshape,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_compressed.py:        dtype = upcast_char(self.dtype.char, other.dtype.char)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_compressed.py:        result = np.zeros(M, dtype=upcast_char(self.dtype.char, other.dtype.char))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_compressed.py:                          dtype=upcast_char(self.dtype.char, other.dtype.char))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_compressed.py:                return np.array(0, dtype=upcast(self.dtype, other.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_compressed.py:            return self.__class__(new_shape, dtype=upcast(self.dtype, other.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_compressed.py:        data = np.empty(nnz, dtype=upcast(self.dtype, other.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_compressed.py:                     dtype=upcast(self.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_compressed.py:            data = np.empty(maxnnz, dtype=upcast(self.dtype, other.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_construct.py:from ._sputils import upcast, get_index_dtype, isscalarlike
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_construct.py:    dtype = upcast(A.dtype, B.dtype)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_construct.py:        dtype = upcast(*all_dtypes) if all_dtypes else None
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_coo.py:from ._sputils import (upcast_char, to_native, isshape, getdtype,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_coo.py:        dtype = upcast_char(self.dtype.char, other.dtype.char)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_coo.py:                              dtype=upcast_char(self.dtype.char, other.dtype.char))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_coo.py:                          dtype=upcast_char(self.dtype.char, other.dtype.char))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_coo.py:        result_dtype = upcast_char(self.dtype.char, other.dtype.char)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_csc.py:from ._sputils import upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_csc.py:        data = np.empty(self.nnz, dtype=upcast(self.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_csr.py:from ._sputils import upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_csr.py:        data = np.empty(self.nnz, dtype=upcast(self.dtype))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_dia.py:    isshape, upcast_char, getdtype, get_sum_dtype, validateaxis, check_shape
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_dia.py:        y = np.zeros(self.shape[0], dtype=upcast_char(self.dtype.char,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_dok.py:                       upcast, upcast_scalar, check_shape)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_dok.py:            res_dtype = upcast_scalar(self.dtype, other)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_dok.py:            res_dtype = upcast(self.dtype, other.dtype)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_dok.py:        res_dtype = upcast_scalar(self.dtype, other)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_dok.py:        res_dtype = upcast(self.dtype, other.dtype)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_dok.py:        result_dtype = upcast(self.dtype, other.dtype)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_dok.py:            res_dtype = upcast_scalar(self.dtype, other)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_lil.py:from ._sputils import (getdtype, isshape, isscalarlike, upcast_scalar,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_lil.py:            res_dtype = upcast_scalar(self.dtype, other)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_matrix.py:        """Upcast matrix to a floating point format (if necessary)"""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:__all__ = ['upcast', 'getdtype', 'getdata', 'isscalarlike', 'isintlike',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:_upcast_memo = {}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:def upcast(*args):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    upcast(t0, t1, ..., tn) -> T  where T is a supported dtype
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    >>> from scipy.sparse._sputils import upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    >>> upcast('int32')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    >>> upcast('bool')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    >>> upcast('int32','float32')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    >>> upcast('bool',complex,float)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    t = _upcast_memo.get(hash(args))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    upcast = np.result_type(*args)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:        if np.can_cast(upcast, t):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:            _upcast_memo[hash(args)] = t
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:def upcast_char(*args):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    """Same as `upcast` but taking dtype.char as input (faster)."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    t = _upcast_memo.get(args)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    t = upcast(*map(np.dtype, args))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:    _upcast_memo[args] = t
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\sparse\_sputils.py:def upcast_scalar(dtype, scalar):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:        self.valid_upcasts = {'bool': [np_ulong, np_long, np.float32, np.float64],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:        tests = [(eo['random-bool-data'], self.valid_upcasts['bool']),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:                 (eo['random-uint-data'], self.valid_upcasts['uint']),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:                 (eo['random-int-data'], self.valid_upcasts['int']),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:                 (eo['random-float32-data'], self.valid_upcasts['float32'])]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:        self.valid_upcasts = {'bool': [np_ulong, np_long, np.float32, np.float64],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:        tests = [(eo['random-bool-data'], self.valid_upcasts['bool']),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:                 (eo['random-uint-data'], self.valid_upcasts['uint']),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:                 (eo['random-int-data'], self.valid_upcasts['int']),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\spatial\tests\test_distance.py:                 (eo['random-float32-data'], self.valid_upcasts['float32'])]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\special\tests\test_basic.py:class TestEllipCarlson:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_axis_nan_policy.py:    # upcast the arrays to np.float64. After gh16662, check expected promotion
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_continuous_basic.py:                'truncweibull_min', 'wrapcauchy'}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_distributions.py:class TestWrapCauchy:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_distributions.py:        # Check that wrapcauchy.cdf broadcasts the shape parameter
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_distributions.py:        p = stats.wrapcauchy.cdf(x, c)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_distributions.py:        scalar_values = [stats.wrapcauchy.cdf(x1, c1)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_distributions.py:        p = stats.wrapcauchy.cdf(np.pi, 0.03)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_distributions.py:        p = stats.wrapcauchy.cdf([x1, x2], c)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_fit.py:    'wrapcauchy',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_fit.py:mm_Xslow_fits = ['wrapcauchy']
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_fit.py:                      't', 'uniform', 'weibull_max', 'weibull_min', 'wrapcauchy'}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\tests\test_fit.py:                      'wald', 'weibull_max', 'weibull_min', 'wrapcauchy'}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\_continuous_distns.py:class wrapcauchy_gen(rv_continuous):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\_continuous_distns.py:    The probability density function for `wrapcauchy` is:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\_continuous_distns.py:    `wrapcauchy` takes ``c`` as a shape parameter for :math:`c`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\_continuous_distns.py:        # wrapcauchy.pdf(x, c) = (1-c**2) / (2*pi*(1+c**2-2*c*cos(x)))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\_continuous_distns.py:wrapcauchy = wrapcauchy_gen(a=0.0, b=2*np.pi, name='wrapcauchy')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\_distribution_infrastructure.py:    'wrapcauchy': 'WrappedCauchyLine',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\_distr_params.py:    ['wrapcauchy', (0.031071279018614728,)]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\_distr_params.py:    ['wrapcauchy', (2, )],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\stats\__init__.py:   wrapcauchy        -- Wrapped Cauchy
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\_lib\array_api_compat\common\_fft.py:# Note: NumPy fft functions improperly upcast float32 and complex64 to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\_lib\array_api_compat\torch\linalg.py:    # Use our wrapped sum to make sure it does upcasting correctly
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\_lib\array_api_compat\torch\_aliases.py:    # below because it still needs to upcast.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\_lib\array_api_compat\torch\_aliases.py:            # We can't upcast uint8 according to the spec because there is no
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\_lib\array_api_compat\torch\_aliases.py:            # torch.uint64, so at least upcast to int64 which is what sum does
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\_lib\array_api_compat\torch\_aliases.py:    # Make sure it upcasts.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\_lib\array_api_compat\torch\_aliases.py:            # We can't upcast uint8 according to the spec because there is no
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\scipy\_lib\array_api_compat\torch\_aliases.py:            # torch.uint64, so at least upcast to int64 which is what sum does
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\send2trash\win\legacy.py:        0x75: 0x4C7,  # DE_OPCANCELLED -> ERROR_CANCELLED
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\setuptools\_vendor\pyparsing\common.py:    - :class:`upcaseTokens`
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\setuptools\_vendor\pyparsing\common.py:    upcase_tokens = staticmethod(token_map(lambda t: t.upper()))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\setuptools\_vendor\pyparsing\common.py:    upcaseTokens = upcase_tokens
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\plots\_embedding.py:def embedding(ind, shap_values, feature_names=None, method="pca", alpha=1.0, show=True):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\plots\_embedding.py:    method : "pca" or numpy.array
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\plots\_embedding.py:        How to reduce the dimensions of the shap_values to 2D. If "pca" then the 2D
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\plots\_embedding.py:        PCA projection of shap_values is used. If a numpy array then is should be
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\plots\_embedding.py:    if isinstance(method, str) and method == "pca":
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\plots\_embedding.py:        pca = sklearn.decomposition.PCA(2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\plots\_embedding.py:        embedding_values = pca.fit_transform(shap_values)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:def _upcast_array(arr: np.ndarray) -> np.ndarray:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:    """Since njit doesn't support float16, we need to upcast it to float32.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:        arr (np.ndarray): array to upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:        np.ndarray: upcasted array
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:            _upcast_array(averaged_outs),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:            _upcast_array(last_outs),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:            _upcast_array(outputs),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:            _upcast_array(averaged_outs),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:            _upcast_array(last_outs),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\shap\utils\_masked_model.py:            _upcast_array(outputs),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\base.py:    names out, such as :class:`~sklearn.decomposition.PCA`. For example, if
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\base.py:    :class:`~sklearn.decomposition.PCA` outputs 3 features, then the generated feature
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\base.py:    names out are: `["pca0", "pca1", "pca2"]`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:            transformer_weights={"pca": 10, "Transf": 1},
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                ("bycol1", TransWithNames(["pca1", "pca2"]), ["a", "b", "d"]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:            ["bycol1__pca1", "bycol1__pca2", "remainder__c"],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                ("bycol1", TransWithNames([f"pca{i}" for i in range(2)]), ["b"]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                ("bycol2", TransWithNames([f"pca{i}" for i in range(2)]), ["b"]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                "bycol1__pca0",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                "bycol1__pca1",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                "bycol2__pca0",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                "bycol2__pca1",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                ("bycol1", TransWithNames(["pca1", "pca2"]), ["a", "b", "d"]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:            ["pca1", "pca2", "c"],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                ("bycol1", TransWithNames([f"pca{i}" for i in range(2)]), ["b"]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                ("bycol2", TransWithNames([f"kpca{i}" for i in range(2)]), ["b"]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:            ["pca0", "pca1", "kpca0", "kpca1", "a", "c", "d"],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                ("bycol1", TransWithNames([f"pca{i}" for i in range(6)]), ["b"]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:                ("bycol2", TransWithNames([f"pca{i}" for i in range(6)]), ["b"]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\compose\tests\test_column_transformer.py:            "['pca0', 'pca1', 'pca2', 'pca3', 'pca4', ...]",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\cross_decomposition\_pls.py:    For a comparison between PLS Regression and :class:`~sklearn.decomposition.PCA`, see
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\datasets\tests\test_openml.py:            "pCAMKII_N",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\datasets\tests\test_openml.py:            "pCASP9_N",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\datasets\_base.py:    See :ref:`sphx_glr_auto_examples_decomposition_plot_pca_iris.py` for a more
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_fastica.py:from sklearn.decomposition import PCA, FastICA, fastica
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_fastica.py:            pca = PCA(n_components=2, whiten=True, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_fastica.py:            X = pca.fit_transform(m.T)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:"""Tests for Incremental PCA."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:from sklearn.decomposition import PCA, IncrementalPCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    # Incremental PCA on dense arrays.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=2, batch_size=batch_size)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca = PCA(n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    X_transformed = ipca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.explained_variance_ratio_.sum(),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        pca.explained_variance_ratio_.sum(),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca = IncrementalPCA(n_components, batch_size=batch_size)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        cov = ipca.get_covariance()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        precision = ipca.get_precision()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_sparse(sparse_container):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    # Incremental PCA on sparse arrays.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca = PCA(n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=2, batch_size=batch_size)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    X_transformed = ipca.fit_transform(X_sparse)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.explained_variance_ratio_.sum(),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        pca.explained_variance_ratio_.sum(),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca = IncrementalPCA(n_components, batch_size=batch_size)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.fit(X_sparse)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        cov = ipca.get_covariance()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        precision = ipca.get_precision()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:            "IncrementalPCA.partial_fit does not support "
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:            "or use IncrementalPCA.fit to do so in batches."
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.partial_fit(X_sparse)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_check_projection():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    Yt = IncrementalPCA(n_components=2).fit(X).transform(Xt)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_inverse():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=2, batch_size=10).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    Y = ipca.transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    Y_inverse = ipca.inverse_transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_validation():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:            " columns for IncrementalPCA"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        IncrementalPCA(n_components, batch_size=10).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        IncrementalPCA(n_components=n_components).partial_fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=5)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.partial_fit(np.random.randn(5, 7))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.fit(np.random.randn(5, 7))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca = IncrementalPCA(n_components=None)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        # First partial_fit call, ipca.n_components_ is inferred from
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.partial_fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        assert ipca.n_components_ == min(X.shape)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        # Second partial_fit call, ipca.n_components_ is inferred from
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        # ipca.components_ computed from the first partial_fit call
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.partial_fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        assert ipca.n_components_ == ipca.components_.shape[0]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_set_params():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=20)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca.set_params(n_components=10)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.partial_fit(X2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca.set_params(n_components=15)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.partial_fit(X3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca.set_params(n_components=20)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca.partial_fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_num_features_change():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=None)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.partial_fit(X2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_batch_signs():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca = IncrementalPCA(n_components=None, batch_size=batch_size).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        all_components.append(ipca.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_partial_fit_small_batch():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pipca = IncrementalPCA(n_components=n_components)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pipca.partial_fit(X[:n_components])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        pipca.partial_fit(X[idx : idx + 1])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca = PCA(n_components=n_components)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    assert_allclose(pca.components_, pipca.components_, atol=1e-3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_batch_values():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca = IncrementalPCA(n_components=None, batch_size=batch_size).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        all_components.append(ipca.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_batch_rank():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca = IncrementalPCA(n_components=20, batch_size=batch_size).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        all_components.append(ipca.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_partial_fit():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=2, batch_size=batch_size).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pipca = IncrementalPCA(n_components=2, batch_size=batch_size)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        pipca.partial_fit(X[i:j, :])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    assert_almost_equal(ipca.components_, pipca.components_, decimal=3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_against_pca_iris():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    # Test that IncrementalPCA and PCA are approximate (to a sign flip).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    Y_pca = PCA(n_components=2).fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    Y_ipca = IncrementalPCA(n_components=2, batch_size=25).fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    assert_almost_equal(np.abs(Y_pca), np.abs(Y_ipca), 1)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_against_pca_random_data():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    # Test that IncrementalPCA and PCA are approximate (to a sign flip).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    Y_pca = PCA(n_components=3).fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    Y_ipca = IncrementalPCA(n_components=3, batch_size=25).fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    assert_almost_equal(np.abs(Y_pca), np.abs(Y_ipca), 1)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    # Test that PCA and IncrementalPCA calculations match
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        pca = PCA(n_components=nc).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca = IncrementalPCA(n_components=nc, batch_size=100).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:            pca.explained_variance_, ipca.explained_variance_, decimal=prec
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:            pca.explained_variance_ratio_, ipca.explained_variance_ratio_, decimal=prec
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        assert_almost_equal(pca.noise_variance_, ipca.noise_variance_, decimal=prec)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    # Check that the IncrementalPCA output has the correct singular values
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca = PCA(n_components=10, svd_solver="full", random_state=rng).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=10, batch_size=100).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    assert_array_almost_equal(pca.singular_values_, ipca.singular_values_, 2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    X_pca = pca.transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    X_ipca = ipca.transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        np.sum(pca.singular_values_**2.0), np.linalg.norm(X_pca, "fro") ** 2.0, 12
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        np.sum(ipca.singular_values_**2.0), np.linalg.norm(X_ipca, "fro") ** 2.0, 2
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        pca.singular_values_, np.sqrt(np.sum(X_pca**2.0, axis=0)), 12
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca.singular_values_, np.sqrt(np.sum(X_ipca**2.0, axis=0)), 2
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca = PCA(n_components=3, svd_solver="full", random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=3, batch_size=100)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    X_pca = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    X_pca /= np.sqrt(np.sum(X_pca**2.0, axis=0))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    X_pca[:, 0] *= 3.142
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    X_pca[:, 1] *= 2.718
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    X_hat = np.dot(X_pca, pca.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca.fit(X_hat)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca.fit(X_hat)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    assert_array_almost_equal(pca.singular_values_, [3.142, 2.718, 1.0], 14)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    assert_array_almost_equal(ipca.singular_values_, [3.142, 2.718, 1.0], 14)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    # Test that PCA and IncrementalPCA transforms match to sign flip.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        pca = PCA(whiten=True, n_components=nc).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        ipca = IncrementalPCA(whiten=True, n_components=nc, batch_size=250).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        stable_mask = pca.explained_variance_ratio_ > 1e-12
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        Xt_pca = pca.transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        Xt_ipca = ipca.transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:            np.abs(Xt_pca)[:, stable_mask],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:            np.abs(Xt_ipca)[:, stable_mask],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        Xinv_ipca = ipca.inverse_transform(Xt_ipca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        Xinv_pca = pca.inverse_transform(Xt_pca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        assert_allclose(X, Xinv_ipca, atol=atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        assert_allclose(X, Xinv_pca, atol=atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:        assert_allclose(Xinv_pca, Xinv_ipca, atol=atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_partial_fit_float_division():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca = IncrementalPCA(n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca.partial_fit(A)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca.n_samples_seen_ = float(pca.n_samples_seen_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca.partial_fit(B)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    singular_vals_float_samples_seen = pca.singular_values_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca2 = IncrementalPCA(n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca2.partial_fit(A)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca2.partial_fit(B)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    singular_vals_int_samples_seen = pca2.singular_values_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_fit_overflow_error():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=2, batch_size=10000)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca.fit(A)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca = PCA(n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    pca.fit(A)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    np.testing.assert_allclose(ipca.singular_values_, pca.singular_values_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:def test_incremental_pca_feature_names_out():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    """Check feature names out for IncrementalPCA."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    ipca = IncrementalPCA(n_components=2).fit(iris.data)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    names = ipca.get_feature_names_out()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_incremental_pca.py:    assert_array_equal([f"incrementalpca{i}" for i in range(2)], names)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:from sklearn.decomposition import PCA, KernelPCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            kpca = KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            X_fit_transformed = kpca.fit_transform(X_fit)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            X_fit_transformed2 = kpca.fit(X_fit).transform(X_fit)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            X_pred_transformed = kpca.transform(X_pred)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:                X_pred2 = kpca.inverse_transform(X_pred_transformed)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_invalid_parameters():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Check that kPCA raises an error if the parameters are invalid
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    estimator = KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_consistent_transform():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    Test that after fitting a kPCA model, it stays independent of any
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(random_state=state).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    transformed1 = kpca.transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    transformed2 = kpca.transform(X_copy)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_deterministic_output():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Test that Kernel PCA produces deterministic output
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            kpca = KernelPCA(n_components=2, eigen_solver=solver, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            transformed_X[i, :] = kpca.fit_transform(X)[0]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_sparse(csr_container):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Test that kPCA works on a sparse data input.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    Same test as ``test_kernel_pca except inverse_transform`` since it's not
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            kpca = KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            X_fit_transformed = kpca.fit_transform(X_fit)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            X_fit_transformed2 = kpca.fit(X_fit).transform(X_fit)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            X_pred_transformed = kpca.transform(X_pred)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:                kpca.inverse_transform(X_pred_transformed)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_linear_kernel(solver, n_features):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Test that kPCA with linear kernel is equivalent to PCA for all solvers.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    KernelPCA with linear kernel should produce the same output as PCA.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    # for a linear kernel, kernel PCA should find the same projection as PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        np.abs(KernelPCA(n_comps, eigen_solver=solver).fit(X_fit).transform(X_pred)),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            PCA(n_comps, svd_solver=solver if solver != "dense" else "full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_n_components():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            kpca = KernelPCA(n_components=c, eigen_solver=eigen_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            shape = kpca.fit(X_fit).transform(X_pred).shape
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    Xt = kpca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    Xt = kpca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(n_components=2, remove_zero_eig=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    Xt = kpca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            k = KernelPCA(n_components=2, remove_zero_eig=False, eigen_solver="dense")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_precomputed():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Test that kPCA works with a precomputed kernel, for all solvers"""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        X_kpca = (
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            KernelPCA(4, eigen_solver=eigen_solver, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        X_kpca2 = (
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        X_kpca_train = KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        X_kpca_train2 = (
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        assert_array_almost_equal(np.abs(X_kpca), np.abs(X_kpca2))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        assert_array_almost_equal(np.abs(X_kpca_train), np.abs(X_kpca_train2))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_precomputed_non_symmetric(solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca.fit(K)  # no error
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca_c = KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca_c.fit(Kc)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    assert_array_equal(kpca.eigenvectors_, kpca_c.eigenvectors_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    assert_array_equal(kpca.eigenvalues_, kpca_c.eigenvalues_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Check that kPCA works as expected in a grid search pipeline
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(kernel="rbf", n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    pipeline = Pipeline([("kernel_pca", kpca), ("Perceptron", Perceptron(max_iter=5))])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    param_grid = dict(kernel_pca__gamma=2.0 ** np.arange(-2, 2))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Check that kPCA works as expected in a grid search pipeline (2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(kernel="precomputed", n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    pipeline = Pipeline([("kernel_pca", kpca), ("Perceptron", Perceptron(max_iter=5))])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Check that kPCA projects in a space where nested circles are separable
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    projected in the first 2 kPCA using an RBF kernel, while raw samples
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    # PCA model.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    # and the gamma value has to be updated, the Kernel PCA example will
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    X_kpca = kpca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    train_score = Perceptron(max_iter=5).fit(X_kpca, y).score(X_kpca, y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Check that ``_check_psd_eigenvalues`` is correctly called in kPCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(kernel="linear", n_components=2, fit_inverse_transform=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    assert kpca.eigenvalues_.min() == 0
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    assert np.all(kpca.eigenvalues_ == _check_psd_eigenvalues(kpca.eigenvalues_))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Check how KernelPCA works with non-PSD kernels depending on n_components
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    error should be raised. Otherwise, KernelPCA should run without error
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(kernel="precomputed", eigen_solver=solver, n_components=7)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        kpca.fit(K)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(kernel="precomputed", eigen_solver=solver, n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:            kpca.fit(K)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        kpca.fit(K)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_solvers_equivalence(n_components):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        KernelPCA(n_components, eigen_solver="dense", random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        KernelPCA(n_components, eigen_solver="arpack", random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        KernelPCA(n_components, eigen_solver="randomized", random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_inverse_transform_reconstruction():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    X_trans = kpca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    X_reconst = kpca.inverse_transform(X_trans)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_raise_not_fitted_error():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        kpca.inverse_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    assert kpca.fit_transform(X).shape == kpca.fit_transform(X.astype(np.float32)).shape
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_feature_names_out():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Check feature names out for KernelPCA."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca = KernelPCA(n_components=2).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    names = kpca.get_feature_names_out()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    assert_array_equal([f"kernelpca{i}" for i in range(2)], names)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_inverse_correct_gamma():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca1 = KernelPCA(gamma=None, **kwargs).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    kpca2 = KernelPCA(gamma=expected_gamma, **kwargs).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    assert kpca1.gamma_ == expected_gamma
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    assert kpca2.gamma_ == expected_gamma
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    X1_recon = kpca1.inverse_transform(kpca1.transform(X))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    X2_recon = kpca2.inverse_transform(kpca1.transform(X))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:def test_kernel_pca_pandas_output():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:    """Check that KernelPCA works with pandas output when the solver is arpack.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_kernel_pca.py:        KernelPCA(n_components=2, eigen_solver="arpack").fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:from sklearn.decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:from sklearn.decomposition._pca import _assess_dimension, _infer_dimension
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:PCA_SOLVERS = ["full", "covariance_eigh", "arpack", "randomized", "auto"]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def _check_fitted_pca_close(pca1, pca2, rtol=1e-7, atol=1e-12):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca1.components_, pca2.components_, rtol=rtol, atol=atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca1.explained_variance_, pca2.explained_variance_, rtol=rtol, atol=atol
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca1.singular_values_, pca2.singular_values_, rtol=rtol, atol=atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca1.mean_, pca2.mean_, rtol=rtol, atol=atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca1.noise_variance_, pca2.noise_variance_, rtol=rtol, atol=atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca1.n_components_ == pca2.n_components_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca1.n_samples_ == pca2.n_samples_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca1.n_features_in_ == pca2.n_features_in_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("svd_solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca(svd_solver, n_components):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=n_components, svd_solver=svd_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_r = pca.fit(X).transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_r2 = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_r = pca.transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    cov = pca.get_covariance()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    precision = pca.get_precision()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_sparse(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pcad = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pcad.fit(Xd)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    _check_fitted_pca_close(pca, pcad, atol=atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca.transform(X2), pca.transform(X2d), atol=transform_atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca.transform(X2), pcad.transform(X2d), atol=transform_atol)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_sparse_fit_transform(global_random_seed, sparse_container):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_fit = PCA(n_components=10, svd_solver="arpack", random_state=global_random_seed)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_fit_transform = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_fit.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    transformed_X = pca_fit_transform.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    _check_fitted_pca_close(pca_fit, pca_fit_transform)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(transformed_X, pca_fit_transform.transform(X))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(transformed_X, pca_fit.transform(X))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca_fit.transform(X2), pca_fit_transform.transform(X2))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_sparse_pca_solver_error(global_random_seed, svd_solver, sparse_container):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=30, svd_solver=svd_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        'PCA only support sparse inputs with the "arpack" and "covariance_eigh"'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_sparse_pca_auto_arpack_singluar_values_consistency(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_arpack = PCA(n_components=10, svd_solver="arpack").fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_auto = PCA(n_components=10, svd_solver="auto").fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca_arpack.singular_values_, pca_auto.singular_values_, rtol=5e-3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=n_components)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    # Check that PCA output has unit-variance
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_whitened = pca.fit_transform(X_.copy())
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_whitened2 = pca.transform(X_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_unwhitened = pca.transform(X_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    "other_svd_solver", sorted(list(set(PCA_SOLVERS) - {"full", "auto"}))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_solver_equivalence(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_full = PCA(n_components=n_components, svd_solver="full", whiten=whiten)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_other = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_trans_full_train = pca_full.fit_transform(X_train)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_trans_other_train = pca_other.fit_transform(X_train)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert (pca_full.explained_variance_ >= 0).all()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca_full.explained_variance_, pca_other.explained_variance_, **tols)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca_full.explained_variance_ratio_,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca_other.explained_variance_ratio_,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    reference_components = pca_full.components_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    other_components = pca_other.components_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    stable = pca_full.explained_variance_ > variance_threshold
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_trans_full_test = pca_full.transform(X_test)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_trans_other_test = pca_other.transform(X_test)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_recons_full_test = pca_full.inverse_transform(X_trans_full_test)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_recons_other_test = pca_other.inverse_transform(X_trans_other_test)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    if pca_full.components_.shape[0] == pca_full.components_.shape[1]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    elif pca_full.components_.shape[0] < rank:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        assert pca_full.explained_variance_.min() > variance_threshold
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:            pca_full.transform(X_recons_full_test)[:, stable],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:            pca_other.transform(X_recons_other_test)[:, stable],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("svd_solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_explained_variance_empirical(X, svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=2, svd_solver=svd_solver, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_pca = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca.explained_variance_, np.var(X_pca, ddof=1, axis=0))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca.explained_variance_, expected_result, rtol=5e-3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_singular_values_consistency(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_full = PCA(n_components=2, svd_solver="full", random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_other = PCA(n_components=2, svd_solver=svd_solver, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_full.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_other.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca_full.singular_values_, pca_other.singular_values_, rtol=5e-3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("svd_solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_singular_values(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=2, svd_solver=svd_solver, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_trans = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        np.sum(pca.singular_values_**2), np.linalg.norm(X_trans, "fro") ** 2
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca.singular_values_, np.sqrt(np.sum(X_trans**2, axis=0)))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=3, svd_solver=svd_solver, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_trans = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_hat = np.dot(X_trans, pca.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X_hat)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca.singular_values_, [3.142, 2.718, 1.0])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("svd_solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_check_projection(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    Yt = PCA(n_components=2, svd_solver=svd_solver).fit(X).transform(Xt)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("svd_solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_check_projection_list(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=1, svd_solver=svd_solver, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    X_trans = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_inverse(svd_solver, whiten):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=2, svd_solver=svd_solver, whiten=whiten).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    Y = pca.transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    Y_inverse = pca.inverse_transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_validation(svd_solver, data, n_components, err_msg):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_fitted = PCA(n_components, svd_solver=svd_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca_fitted.fit(data)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:            PCA(n_components, svd_solver=svd_solver).fit(data)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(svd_solver=solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(data)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca.n_components_ == n_components_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components="mle", svd_solver=svd_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca.n_components_ == 1
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components="mle", svd_solver=svd_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_dim():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components="mle", svd_solver="full").fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca.n_components == "mle"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca.n_components_ == 1
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=p, svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    spect = pca.explained_variance_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=p, svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    spect = pca.explained_variance_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=p, svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    spect = pca.explained_variance_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=n_components, svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca.n_components == pytest.approx(n_components)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca.n_components_ == n_components_validated
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("svd_solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_score(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    # Test that probabilistic PCA scoring yields a reasonable score
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=2, svd_solver=svd_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    ll1 = pca.score(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    ll2 = pca.score(rng.randn(n, p) * 0.2 + np.array([3, 4, 5]))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=2, whiten=True, svd_solver=svd_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    ll2 = pca.score(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_score3():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    # Check that probabilistic PCA selects the right model
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca = PCA(n_components=k, svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca.fit(Xl)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        ll[k] = pca.score(Xt)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("svd_solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_sanity_noise_variance(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=30, svd_solver=svd_solver, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert np.all((pca.explained_variance_ - pca.noise_variance_) >= 0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_score_consistency_solvers(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_full = PCA(n_components=30, svd_solver="full", random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_other = PCA(n_components=30, svd_solver=svd_solver, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_full.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_other.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca_full.score(X), pca_other.score(X), rtol=5e-6)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_zero_noise_variance_edge_cases(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=p, svd_solver=svd_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca.noise_variance_ == 0
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.score(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.fit(X.T)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca.noise_variance_ == 0
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.score(X.T)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_svd_solver_auto(n_samples, n_features, n_components, expected_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_auto = PCA(n_components=n_components, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_test = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_auto.fit(data)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_auto._fit_svd_solver == expected_solver
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_test.fit(data)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca_auto.components_, pca_test.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("svd_solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_deterministic_output(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca = PCA(n_components=2, svd_solver=svd_solver, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        transformed_X[i, :] = pca.fit_transform(X)[0]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:@pytest.mark.parametrize("svd_solver", PCA_SOLVERS)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_dtype_preservation(svd_solver, global_random_seed):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    check_pca_float_dtype_preservation(svd_solver, global_random_seed)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    check_pca_int_dtype_upcast_to_double(svd_solver)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def check_pca_float_dtype_preservation(svd_solver, seed):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    # Ensure that PCA does not upscale the dtype when input is float32
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_64 = PCA(n_components=3, svd_solver=svd_solver, random_state=seed).fit(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_32 = PCA(n_components=3, svd_solver=svd_solver, random_state=seed).fit(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_64.components_.dtype == np.float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_32.components_.dtype == np.float32
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_64.transform(X_float64).dtype == np.float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_32.transform(X_float32).dtype == np.float32
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca_64.components_, pca_32.components_, rtol=1e-3, atol=1e-3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def check_pca_int_dtype_upcast_to_double(svd_solver):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    # Ensure that all int types will be upcast to float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_64 = PCA(n_components=3, svd_solver=svd_solver, random_state=0).fit(X_i64)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_32 = PCA(n_components=3, svd_solver=svd_solver, random_state=0).fit(X_i32)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_64.components_.dtype == np.float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_32.components_.dtype == np.float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_64.transform(X_i64).dtype == np.float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_32.transform(X_i32).dtype == np.float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(pca_64.components_, pca_32.components_, rtol=1e-4)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_n_components_mostly_explained_variance_ratio():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca1 = PCA().fit(X, y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    n_components = pca1.explained_variance_ratio_.cumsum()[-2]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca2 = PCA(n_components=n_components).fit(X, y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca2.n_components_ == X.shape[1]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components="mle").fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca.n_components_ == 1
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components="mle", svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_skl = PCA("mle", svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_skl.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert pca_skl.n_components_ == n_dim - 1
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_randomized_svd_n_oversamples():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_randomized = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_full = PCA(n_components=1, svd_solver="full").fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_arpack = PCA(n_components=1, svd_solver="arpack", random_state=0).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(np.abs(pca_full.components_), np.abs(pca_arpack.components_))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_allclose(np.abs(pca_randomized.components_), np.abs(pca_arpack.components_))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    """Check feature names out for PCA."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=2).fit(iris.data)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    names = pca.get_feature_names_out()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    assert_array_equal([f"pca{i}" for i in range(2)], names)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    """Check the accuracy of PCA's internal variance calculation"""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA().fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca_var = pca.explained_variance_ / pca.explained_variance_ratio_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    np.testing.assert_allclose(pca_var, true_var)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        PCA(n_components=2, svd_solver="full"),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        PCA(n_components=2, svd_solver="full", whiten=True),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        PCA(n_components=0.1, svd_solver="full", whiten=True),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        PCA(n_components=2, svd_solver="covariance_eigh"),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        PCA(n_components=2, svd_solver="covariance_eigh", whiten=True),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_array_api_compliance(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        # PCA with mle cannot use check_array_api_input_and_values because of
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        PCA(n_components="mle", svd_solver="full"),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:def test_pca_mle_array_api_compliance(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    # the specific case of PCA with mle-trimmed components.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca = PCA(n_components=2, svd_solver="arpack", random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:        "PCA with svd_solver='arpack' is not supported for Array API inputs."
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:            pca.fit(iris_xp)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.set_params(svd_solver="randomized", power_iteration_normalizer="LU")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:            pca.fit(iris_xp)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:    pca.set_params(svd_solver="randomized", power_iteration_normalizer="auto")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_pca.py:            pca.fit(iris_xp)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:from sklearn.decomposition import PCA, MiniBatchSparsePCA, SparsePCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:# SparsePCA can be a bit slow. To avoid having test times go up, we
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca = SparsePCA(n_components=8, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    U = spca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert spca.components_.shape == (8, 10)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca = SparsePCA(n_components=13, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    U = spca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert spca.components_.shape == (13, 10)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lars = SparsePCA(n_components=3, method="lars", alpha=alpha, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lars.fit(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lasso = SparsePCA(n_components=3, method="cd", random_state=0, alpha=alpha)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lasso.fit(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lars = SparsePCA(n_components=3, method="lars", alpha=alpha, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lars.fit(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    U1 = spca_lars.transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca = SparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    U2 = spca.transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert not np.all(spca_lars.components_ == 0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    # Test that SparsePCA won't return NaN when there is 0 feature in all
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    estimator = SparsePCA(n_components=8)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lars = SparsePCA(n_components=3, method="lars", random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    U1 = spca_lars.fit_transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lasso = SparsePCA(n_components=3, method="cd", random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    U2 = spca_lasso.fit(Y).transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model = SparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    pca = MiniBatchSparsePCA(n_components=8, max_iter=1, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    U = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert pca.components_.shape == (8, 10)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    pca = MiniBatchSparsePCA(n_components=13, max_iter=1, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    U = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert pca.components_.shape == (13, 10)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lars = MiniBatchSparsePCA(n_components=3, random_state=0, alpha=alpha).fit(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    U1 = spca_lars.transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:            spca = MiniBatchSparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:            U2 = spca.fit(Y).transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:        spca = MiniBatchSparsePCA(n_components=3, n_jobs=2, alpha=alpha, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:        U2 = spca.fit(Y).transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert not np.all(spca_lars.components_ == 0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lasso = MiniBatchSparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca_lars = SparsePCA(n_components=3, method="lars", alpha=alpha, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    results_train = spca_lars.fit_transform(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    results_test = spca_lars.transform(Y[:10])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:def test_pca_vs_spca():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca = SparsePCA(alpha=0, ridge_alpha=0, n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    pca = PCA(n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    pca.fit(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca.fit(Y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    results_test_pca = pca.transform(Z)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    results_test_spca = spca.transform(Z)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:        np.abs(spca.components_.dot(pca.components_.T)), np.eye(2), atol=1e-5
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    results_test_pca *= np.sign(results_test_pca[0, :])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    results_test_spca *= np.sign(results_test_spca[0, :])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert_allclose(results_test_pca, results_test_spca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:@pytest.mark.parametrize("SPCA", [SparsePCA, MiniBatchSparsePCA])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:def test_spca_n_components_(SPCA, n_components):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model = SPCA(n_components=n_components).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:@pytest.mark.parametrize("SPCA", (SparsePCA, MiniBatchSparsePCA))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:def test_sparse_pca_dtype_match(SPCA, method, data_type, expected_type):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model = SPCA(n_components=n_components, method=method)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:@pytest.mark.parametrize("SPCA", (SparsePCA, MiniBatchSparsePCA))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:def test_sparse_pca_numerical_consistency(SPCA, method):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model_32 = SPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model_64 = SPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:@pytest.mark.parametrize("SPCA", [SparsePCA, MiniBatchSparsePCA])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:def test_spca_feature_names_out(SPCA):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    """Check feature names out for *SparsePCA."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model = SPCA(n_components=4).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    estimator_name = SPCA.__name__.lower()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:def test_spca_early_stopping(global_random_seed):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model_early_stopped = MiniBatchSparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model_not_early_stopped = MiniBatchSparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model_early_stopped = MiniBatchSparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    model_not_early_stopped = MiniBatchSparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:def test_equivalence_components_pca_spca(global_random_seed):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    """Check the equivalence of the components found by PCA and SparsePCA.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    pca = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca = SparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert_allclose(pca.components_, spca.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:def test_sparse_pca_inverse_transform():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    """Check that `inverse_transform` in `SparsePCA` and `PCA` are similar."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca = SparsePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    pca = PCA(n_components=n_components, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    X_trans_spca = spca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    X_trans_pca = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:        spca.inverse_transform(X_trans_spca), pca.inverse_transform(X_trans_pca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:@pytest.mark.parametrize("SPCA", [SparsePCA, MiniBatchSparsePCA])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:def test_transform_inverse_transform_round_trip(SPCA):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    spca = SPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    X_trans_spca = spca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_sparse_pca.py:    assert_allclose(spca.inverse_transform(X_trans_spca), X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:from sklearn.decomposition import PCA, TruncatedSVD
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    pca = TruncatedSVD(n_components=2, algorithm=solver, random_state=rng).fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    X_pca = pca.transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:        np.sum(pca.singular_values_**2.0),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:        np.linalg.norm(X_pca, "fro") ** 2.0,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:        pca.singular_values_, np.sqrt(np.sum(X_pca**2.0, axis=0)), rtol=1e-2
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    pca = TruncatedSVD(n_components=3, algorithm=solver, random_state=rng)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    X_pca = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    X_pca /= np.sqrt(np.sum(X_pca**2.0, axis=0))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    X_pca[:, 0] *= 3.142
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    X_pca[:, 1] *= 2.718
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    X_hat_pca = np.dot(X_pca, pca.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    pca.fit(X_hat_pca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    assert_allclose(pca.singular_values_, [3.142, 2.718, 1.0], rtol=1e-14)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:def test_truncated_svd_eq_pca(X_sparse):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    # TruncatedSVD should be equal to PCA on centered data
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    pca = PCA(svd_solver="arpack", **params)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    Xt_pca = pca.fit_transform(X_c)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    assert_allclose(Xt_svd, Xt_pca, rtol=1e-9)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    assert_allclose(pca.mean_, 0, atol=1e-9)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\tests\test_truncated_svd.py:    assert_allclose(svd.components_, pca.components_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_base.py:class _BasePCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_base.py:    """Base class for PCA methods.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    SparsePCA : Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    MiniBatchSparsePCA : Mini-batch Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    SparsePCA : Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    MiniBatchSparsePCA : Mini-batch Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    MiniBatchSparsePCA : Mini-batch Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    SparsePCA : Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    MiniBatchSparsePCA : Mini-batch Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    SparsePCA : Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    MiniBatchSparsePCA : Mini-batch Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_dict_learning.py:    SparsePCA : Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_factor_analysis.py:FactorAnalysis is similar to probabilistic PCA implemented by PCA.score
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_factor_analysis.py:While PCA assumes Gaussian noise with the same variance for each
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_factor_analysis.py:    :class:`PCA`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_factor_analysis.py:    PCA: Principal component analysis is also a latent linear variable model
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_factor_analysis.py:        This extra assumption makes probabilistic PCA faster as it can be
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_fastica.py:    PCA : Principal component analysis (PCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_fastica.py:    IncrementalPCA : Incremental principal components analysis (IPCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_fastica.py:    KernelPCA : Kernel Principal component analysis (KPCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_fastica.py:    MiniBatchSparsePCA : Mini-batch Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_fastica.py:    SparsePCA : Sparse Principal Components Analysis (SparsePCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_fastica.py:            # Whitening and preprocessing by PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_fastica.py:            # in X has been projected onto a subspace by PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:from ._base import _BasePCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:class IncrementalPCA(_BasePCA):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    """Incremental principal components analysis (IPCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    memory efficient than a PCA, and allows sparse input.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    complexity ``O(n_samples * n_features ** 2)`` for PCA.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    :ref:`sphx_glr_auto_examples_decomposition_plot_incremental_pca.py`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    Read more in the :ref:`User Guide <IncrementalPCA>`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:        The estimated noise covariance following the Probabilistic PCA model
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:        http://www.miketipping.com/papers/met-mppca.pdf.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    PCA : Principal component analysis (PCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    KernelPCA : Kernel Principal component analysis (KPCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    SparsePCA : Sparse Principal Components Analysis (SparsePCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    Implements the incremental PCA model from:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    >>> from sklearn.decomposition import IncrementalPCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    >>> transformer = IncrementalPCA(n_components=7, batch_size=200)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:    IncrementalPCA(batch_size=200, n_components=7)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:                    "IncrementalPCA.partial_fit does not support "
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:                    "or use IncrementalPCA.fit to do so in batches."
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:                "more rows than columns for IncrementalPCA "
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:        >>> from sklearn.decomposition import IncrementalPCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:        >>> ipca = IncrementalPCA(n_components=2, batch_size=3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:        >>> ipca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:        IncrementalPCA(batch_size=3, n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_incremental_pca.py:        >>> ipca.transform(X) # doctest: +SKIP
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:class KernelPCA(ClassNamePrefixFeaturesOutMixin, TransformerMixin, BaseEstimator):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    """Kernel Principal component analysis (KPCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    Principal Components Analysis (PCA) and its kernelized version (KPCA), see
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    :ref:`sphx_glr_auto_examples_decomposition_plot_kernel_pca.py`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    For a usage example in denoising images using KPCA, see
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    Read more in the :ref:`User Guide <kernel_PCA>`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:        Kernel used for PCA.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    IncrementalPCA : Incremental Principal Component Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    PCA : Principal Component Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    SparsePCA : Sparse Principal Component Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    >>> from sklearn.decomposition import KernelPCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:    >>> transformer = KernelPCA(n_components=7, kernel='linear')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:            :class:`~sklearn.decomposition.PCA` instead. Unlike
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:            :class:`~sklearn.decomposition.PCA`,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_kernel_pca.py:            :class:`~sklearn.decomposition.KernelPCA`'s ``inverse_transform``
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_nmf.py:    MiniBatchSparsePCA : Mini-batch Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_nmf.py:    PCA : Principal component analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_nmf.py:    SparsePCA : Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:from ._base import _BasePCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    Automatic Choice of Dimensionality for PCA. NIPS 2000: 598-604
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:class PCA(_BasePCA):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    """Principal component analysis (PCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    :ref:`sphx_glr_auto_examples_decomposition_plot_pca_iris.py`
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    Read more in the :ref:`User Guide <PCA>`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:        The estimated noise covariance following the Probabilistic PCA model
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:        http://www.miketipping.com/papers/met-mppca.pdf. It is required to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    KernelPCA : Kernel Principal Component Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    SparsePCA : Sparse Principal Component Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    IncrementalPCA : Incremental Principal Component Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    `Minka, T. P.. "Automatic choice of dimensionality for PCA".
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    In NIPS, pp. 598-604 <https://tminka.github.io/papers/pca/minka-pca.pdf>`_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    Implements the probabilistic PCA model from:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    <http://www.miketipping.com/papers/met-mppca.pdf>`_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> from sklearn.decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> pca = PCA(n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    PCA(n_components=2)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> print(pca.explained_variance_ratio_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> print(pca.singular_values_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> pca = PCA(n_components=2, svd_solver='full')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    PCA(n_components=2, svd_solver='full')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> print(pca.explained_variance_ratio_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> print(pca.singular_values_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> pca = PCA(n_components=1, svd_solver='arpack')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    PCA(n_components=1, svd_solver='arpack')
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> print(pca.explained_variance_ratio_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:    >>> print(pca.singular_values_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:                'PCA only support sparse inputs with the "arpack" and'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:                "PCA with svd_solver='arpack' is not supported for Array API inputs."
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:            # Small problem or n_components == 'mle', just call full PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:        # Compute noise covariance using Probabilistic PCA model
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:        or http://www.miketipping.com/papers/met-mppca.pdf
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_pca.py:        or http://www.miketipping.com/papers/met-mppca.pdf
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:"""Matrix factorization with Sparse PCA."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:class _BaseSparsePCA(ClassNamePrefixFeaturesOutMixin, TransformerMixin, BaseEstimator):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    """Base class for SparsePCA and MiniBatchSparsePCA"""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:        Note that Sparse PCA components orthogonality is not enforced as in PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:class SparsePCA(_BaseSparsePCA):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    """Sparse Principal Components Analysis (SparsePCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    Read more in the :ref:`User Guide <SparsePCA>`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    PCA : Principal Component Analysis implementation.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    MiniBatchSparsePCA : Mini batch variant of `SparsePCA` that is faster but less
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    >>> from sklearn.decomposition import SparsePCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    >>> transformer = SparsePCA(n_components=5, random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    SparsePCA(...)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:        **_BaseSparsePCA._parameter_constraints,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:        """Specialized `fit` for SparsePCA."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:class MiniBatchSparsePCA(_BaseSparsePCA):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    For an example comparing sparse PCA to PCA, see
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    Read more in the :ref:`User Guide <SparsePCA>`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    IncrementalPCA : Incremental principal components analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    PCA : Principal component analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    SparsePCA : Sparse Principal Components Analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    >>> from sklearn.decomposition import MiniBatchSparsePCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    >>> transformer = MiniBatchSparsePCA(n_components=5, batch_size=50,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:    MiniBatchSparsePCA(...)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:        **_BaseSparsePCA._parameter_constraints,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_sparse_pca.py:        """Specialized `fit` for MiniBatchSparsePCA."""
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_truncated_svd.py:    truncated singular value decomposition (SVD). Contrary to PCA, this
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_truncated_svd.py:    IncrementalPCA : Incremental principal components analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_truncated_svd.py:    KernelPCA : Kernel Principal component analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_truncated_svd.py:    PCA : Principal component analysis.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\_truncated_svd.py:            # u_based_decision=False is needed to be consistent with PCA.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:These include PCA, NMF, ICA, and more. Most of the algorithms of this module can be
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:from ._incremental_pca import IncrementalPCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:from ._kernel_pca import KernelPCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:from ._pca import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:from ._sparse_pca import MiniBatchSparsePCA, SparsePCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:    "IncrementalPCA",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:    "KernelPCA",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:    "MiniBatchSparsePCA",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:    "PCA",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\decomposition\__init__.py:    "SparsePCA",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:        :ref:`sphx_glr_auto_examples_decomposition_plot_pca_vs_lda.py`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\feature_selection\tests\test_from_model.py:from sklearn.decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\feature_selection\tests\test_from_model.py:def _pca_importances(pca_estimator):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\feature_selection\tests\test_from_model.py:    return np.abs(pca_estimator.explained_variance_)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\feature_selection\tests\test_from_model.py:            make_pipeline(PCA(random_state=0), LogisticRegression()),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\feature_selection\tests\test_from_model.py:        (PCA(random_state=0), _pca_importances),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:@pytest.mark.parametrize("init", ("random", "pca"))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:def test_pca_initialization_not_compatible_with_precomputed_kernel():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:    # Precomputed distance matrices cannot use PCA initialization.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:    tsne = TSNE(metric="precomputed", init="pca", perplexity=1)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:        match='The parameter init="pca" cannot be used with metric="precomputed".',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:def test_pca_initialization_not_compatible_with_sparse_input(csr_container):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:    # Sparse input matrices cannot use PCA initialization.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:    tsne = TSNE(init="pca", learning_rate=100.0, perplexity=1)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:    with pytest.raises(TypeError, match="PCA initialization.*"):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:            init="pca",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:            init="pca",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\tests\test_t_sne.py:        init="pca",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:from ..decomposition import KernelPCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:    kernel_pca_ : object
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:        :class:`~sklearn.decomposition.KernelPCA` object used to implement the
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:    sklearn.decomposition.PCA : Principal component analysis that is a linear
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:    sklearn.decomposition.KernelPCA : Non-linear dimensionality reduction using
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:        kernels and PCA.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:        self.kernel_pca_ = KernelPCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:        self.embedding_ = self.kernel_pca_.fit_transform(G)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:        evals = self.kernel_pca_.eigenvalues_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_isomap.py:        return self.kernel_pca_.transform(G_X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_mds.py:    sklearn.decomposition.PCA : Principal component analysis that is a linear
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_mds.py:    sklearn.decomposition.KernelPCA : Non-linear dimensionality reduction using
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_mds.py:        kernels and PCA.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:from ..decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:    >>> from sklearn.decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:    >>> X_embedded = PCA(n_components=2).fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:    method (e.g. PCA for dense data or TruncatedSVD for sparse data)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:    init : {"random", "pca"} or ndarray of shape (n_samples, n_components), \
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:            default="pca"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:        PCA initialization cannot be used with precomputed distances and is
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:           The default value changed to `"pca"`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:    sklearn.decomposition.PCA : Principal component analysis that is a linear
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:    sklearn.decomposition.KernelPCA : Non-linear dimensionality reduction using
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:        kernels and PCA.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:            StrOptions({"pca", "random"}),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:        init="pca",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:        if isinstance(self.init, str) and self.init == "pca" and issparse(X):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:                "PCA initialization is currently not supported "
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:            if isinstance(self.init, str) and self.init == "pca":
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:                    'The parameter init="pca" cannot be used with metric="precomputed".'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:        elif self.init == "pca":
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:            pca = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:            pca.set_output(transform="default")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:            X_embedded = pca.fit_transform(X).astype(np.float32, copy=False)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\manifold\_t_sne.py:            # PCA is rescaled so that PC1 has standard deviation 1e-4 which is
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\pairwise.py:    float32, norms needs to be recomputed on upcast chunks.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\pairwise.py:        # matrix on chunks of X and Y upcast to float64
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\pairwise.py:        distances = _euclidean_distances_upcast(X, XX, Y, YY)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\pairwise.py:        # if dtype is already float64, no need to chunk and upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\pairwise.py:def _euclidean_distances_upcast(X, XX=None, Y=None, YY=None, batch_size=None):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\pairwise.py:    X and Y are upcast to float64 by chunks, which size is chosen to limit
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\tests\test_pairwise.py:    _euclidean_distances_upcast,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\tests\test_pairwise.py:def test_euclidean_distances_upcast(batch_size, x_array_constr, y_array_constr):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\tests\test_pairwise.py:    distances = _euclidean_distances_upcast(X, Y=Y, batch_size=batch_size)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\tests\test_pairwise.py:def test_euclidean_distances_upcast_sym(batch_size, x_array_constr):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\tests\test_pairwise.py:    distances = _euclidean_distances_upcast(X, Y=X, batch_size=batch_size)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\tests\test_pairwise.py:    # upcasting. On float64 there are still precision issues.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\tests\test_nca.py:    # Initialize with PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\tests\test_nca.py:    nca_pca = NeighborhoodComponentsAnalysis(init="pca")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\tests\test_nca.py:    nca_pca.fit(X, y)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\tests\test_nca.py:                nca_other = clone(nca_base).set_params(init="pca")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\tests\test_nca.py:    "init_name", ["pca", "lda", "identity", "random", "precomputed"]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\tests\test_nca.py:        "pca": "Finding principal components" + regexp_init,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\tests\test_nca.py:    # if pca or lda init, an additional line is printed, so we test
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\tests\test_nca.py:    if init_name in ["pca", "lda"]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:from ..decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:    init : {'auto', 'pca', 'lda', 'identity', 'random'} or ndarray of shape \
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:        `'auto'`, `'pca'`, `'lda'`, `'identity'`, `'random'`, and a numpy
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:            `n_components < min(n_features, n_samples)`, we use `'pca'`, as
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:        - `'pca'`
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:            (See :class:`~sklearn.decomposition.PCA`)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:        transformation. If `init='pca'`, `random_state` is passed as an
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:        argument to PCA when initializing the transformation. Pass an int
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:    sklearn.decomposition.PCA : Principal component analysis (PCA).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:            StrOptions({"auto", "pca", "lda", "identity", "random"}),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:                    init = "pca"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:            elif init in {"pca", "lda"}:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:                if init == "pca":
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:                    pca = PCA(
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:                    pca.fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neighbors\_nca.py:                    transformation = pca.components_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:        # This downcast to bool is to prevent upcasting when working with
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\neural_network\_rbm.py:    sklearn.decomposition.PCA : An unsupervised linear dimensionality
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\pipeline.py:            # For example Pipeline([PCA(), estimator]) accepts sparse data
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\pipeline.py:            # even if the estimator doesn't as PCA outputs a dense array.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\pipeline.py:    >>> from sklearn.decomposition import PCA, TruncatedSVD
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\pipeline.py:    >>> union = FeatureUnion([("pca", PCA(n_components=1)),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\pipeline.py:    >>> from sklearn.decomposition import PCA, TruncatedSVD
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\pipeline.py:    >>> make_union(PCA(), TruncatedSVD())
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\pipeline.py:     FeatureUnion(transformer_list=[('pca', PCA()),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\preprocessing\_data.py:    :class:`~sklearn.decomposition.PCA` : Further removes the linear
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\preprocessing\_data.py:    sklearn.decomposition.PCA : Further removes the linear correlation across
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\preprocessing\_data.py:    for :class:`~sklearn.decomposition.KernelPCA` for instance.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\preprocessing\_data.py:       <https://www.mlpack.org/papers/kpca.pdf>`_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\preprocessing\_encoders.py:        # if ignored are found: potentially need to upcast result to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:from sklearn.decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    pca = PCA().fit(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    components = pca.components_
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    frozen_pca = FrozenEstimator(pca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    assert_allclose(frozen_pca.components_, components)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    # Calling PCA methods such as `get_feature_names_out` still works
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    assert_array_equal(frozen_pca.get_feature_names_out(), pca.get_feature_names_out())
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    frozen_pca.fit(X_new)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    assert_allclose(frozen_pca.components_, components)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    frozen_pca.fit_transform(X_new)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    assert_allclose(frozen_pca.components_, components)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    clone_frozen_pca = clone(frozen_pca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    assert clone_frozen_pca is frozen_pca
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_base.py:    assert_allclose(clone_frozen_pca.components_, components)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_common.py:    if name == "PCA":
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_common.py:    if name == "KernelPCA":
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:from sklearn.decomposition import PCA, TruncatedSVD
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:def test_pipeline_methods_pca_svm():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    # Test the various methods of the pipeline (pca + svm).
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    # Test with PCA + SVC
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(svd_solver="full", n_components="mle", whiten=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pipe = Pipeline([("pca", pca), ("svc", clf)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:def test_pipeline_score_samples_pca_lof():
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(svd_solver="full", n_components="mle", whiten=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pipe = Pipeline([("pca", pca), ("lof", lof)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    lof.fit(pca.fit_transform(X))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    assert_allclose(pipe.score_samples(X), lof.score_samples(pca.transform(X)))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(n_components=2, svd_solver="randomized", whiten=True)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    for preprocessing in [scaler, pca]:
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pipe = Pipeline([("scaler", scaler), ("pca", pca)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    inner_msg = "'PCA' object has no attribute 'fit_predict'"
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    fu = make_union(pca, mock)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    assert names == ("pca", "transf")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    assert transformers == (pca, mock)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    fu = make_union(pca, mock, n_jobs=3)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    assert fu.transformer_list == make_union(pca, mock).transformer_list
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:        make_union(pca, mock, transformer_weights={"pca": 10, "Transf": 1})
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(n_components=2, svd_solver="full")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pipeline = Pipeline([("pca", pca)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    X_trans3 = pca.fit_transform(X)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    X_back2 = pca.inverse_transform(X_trans)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(n_components=2, svd_solver="randomized", random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:        [("pca", pca), ("select", select)], transformer_weights={"pca": 10}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:        [("pca", pca), ("select", select)], transformer_weights={"pca": 10}
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:        [("mock", Transf()), ("pca", pca), ("select", select)],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    # We use a different pca object to control the random_state stream
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    assert_array_almost_equal(X_transformed[:, :-1], 10 * pca.fit_transform(X))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    assert_array_almost_equal(X_fit_transformed[:, :-1], 10 * pca.fit_transform(X))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(n_components=2, svd_solver="randomized", random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    ft = FeatureUnion([("passthrough", "passthrough"), ("pca", pca)])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__pca0",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__pca1",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    ft.set_params(pca="passthrough")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__f0",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__f1",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__f2",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__f3",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    ft.set_params(passthrough=pca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "passthrough__pca0",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "passthrough__pca1",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__f0",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__f1",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__f2",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__f3",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:        [("passthrough", "passthrough"), ("pca", pca)],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__pca0",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__pca1",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(n_components=2, svd_solver="randomized", random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    ft = FeatureUnion([("pca", pca), ("passthrough", "passthrough")])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__pca0",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca__pca1",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA(n_components=2, svd_solver="randomized", random_state=0)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:        [("pca", pca), ("passthrough", "passthrough")], verbose_feature_names_out=False
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca0",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            "pca1",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    union = FeatureUnion([("scalar", StandardScaler()), ("pca", PCA())])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pca = PCA()
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:            ("pca", pca),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    assert union["pca"] is pca
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    union = FeatureUnion([("scalar", StandardScaler()), ("pca", PCA())])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\tests\test_pipeline.py:    pipe = Pipeline([("pca", PCA(n_components=2))])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\estimator_checks.py:        "KernelPCA",
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\extmath.py:        # Adjust n_iter. 7 was found a good compromise for PCA. See #5299
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\fixes.py:    For SciPy < 1.12, DIA arrays indices are upcasted to `np.int64` that is
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\optimize.py:        xk += alphak * xsupi  # upcast if necessary
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\sparsefuncs.py:    This is used by PCA on sparse data to avoid densifying the whole data
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_checks.py:from sklearn.decomposition import PCA
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_checks.py:        PCA,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:from sklearn.decomposition import PCA, TruncatedSVD
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:    f_union = FeatureUnion([("pca", PCA()), ("svd", TruncatedSVD())])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:    assert est_html_info.names == ("pca", "svd")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:        [("pca", PCA(), ["num1", "num2"]), ("svd", TruncatedSVD, [0, 3])]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:    assert est_html_info.names == ("pca", "svd")
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:            ("pca", PCA(n_components=1)),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:        pca = feat_u.transformer_list[0][1]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:        assert f"<pre>{html.escape(str(pca))}</pre>" in html_output
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:    pca = PCA(n_components=10)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:        pca_repr = html.escape(str(pca))
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:        html_output = estimator_html_repr(pca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:        assert pca_repr in html_output
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:    pca = PCA(n_components=10)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:    html_output = estimator_html_repr(pca)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_estimator_html_repr.py:        f'<div class="sk-text-repr-fallback"><pre>{html.escape(str(pca))}'
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_extmath.py:        # same bit size (f32 is not upcast to f64)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_fixes.py:        # Arrays should be upcasted to at least int32 precision.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_fixes.py:        # Check that `maxval` takes precedence over the arrays and thus upcast to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_fixes.py:        # maxval should take precedence over the arrays contents and thus upcast to
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_pprint.py:class PCA(BaseEstimator):
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_pprint.py:    pipeline = Pipeline([("reduce_dim", PCA()), ("classify", SVC())])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_pprint.py:            "reduce_dim": [PCA(iterated_power=7), NMF()],
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_pprint.py:                                        PCA(copy=True, iterated_power='auto',
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_pprint.py:                          'reduce_dim': [PCA(copy=True, iterated_power=7,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_validation.py:    # test that data-frames with homogeneous dtype are not upcast
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\tests\test_validation.py:    # we're not using upcasting rules for determining
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\validation.py:        :term:`get_feature_names_out` e.g. `PCA`.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\validation.py:    for estimators that generate their own names based on `n_features_out`, i.e. PCA.
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    PCA,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    IncrementalPCA,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    KernelPCA,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    MiniBatchSparsePCA,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    SparsePCA,
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:            estimator=Pipeline(steps=[("pca", PCA()), ("ridge", Ridge())]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:                steps=[("pca", PCA()), ("logisticregression", LogisticRegression())]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:            estimator=Pipeline(steps=[("pca", PCA()), ("ridge", Ridge())]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:                steps=[("pca", PCA()), ("logisticregression", LogisticRegression())]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:            estimator=Pipeline(steps=[("pca", PCA()), ("ridge", Ridge())]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:                steps=[("pca", PCA()), ("logisticregression", LogisticRegression())]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    IncrementalPCA: dict(batch_size=10),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    MiniBatchSparsePCA: dict(max_iter=5, batch_size=10),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:            estimator=Pipeline(steps=[("pca", PCA()), ("ridge", Ridge())]),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:                steps=[("pca", PCA()), ("logisticregression", LogisticRegression())]
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    SparsePCA: dict(max_iter=5),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    IncrementalPCA: {"check_dict_unchanged": dict(batch_size=10, n_components=1)},
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    KernelPCA: {"check_dict_unchanged": dict(n_components=1)},
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    MiniBatchSparsePCA: {
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    PCA: {"check_dict_unchanged": dict(n_components=1)},
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_test_common\instance_generator.py:    SparsePCA: {"check_dict_unchanged": dict(max_iter=5, n_components=1)},
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sqlalchemy\dialects\postgresql\pg_catalog.py:    Column("typcategory", CHAR),
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sympy\codegen\tests\test_ast.py:    pcall = FunctionCall('pwer', [y, 3])
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sympy\codegen\tests\test_ast.py:    tree1 = CodeBlock(pwer, pcall)
Users\Administrator\AppData\Local\Programs\Python\Python311\Lib\site-packages\sympy\codegen\tests\test_ast.py:    for a, b in zip(tree1, [pwer, pcall]):
